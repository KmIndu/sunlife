 private String getFormType(String dataType) {
        if (dataType.equals("String"))
            return "text";
        else if (dataType.equals("Boolean"))
            return "boolean";
        else 
            return "number";
    }
       
    private String getControllerFile() {        
        m_caseClassDataFields = chop(m_caseClassDataFields, 2);
        
        String className = m_javaClassName.substring(1);
        String pluralClassName = cairoTreeListControllerGetIdentifierPluralName(className);
        String lowerPluralClassName = pluralClassName.toLowerCase();
        String capitalizedPluralClassName = capitalize(pluralClassName);
        String lowerCaseClassName = cairoTreeListControllerGetIdentifierName(className);
        String capitalizedClassName = capitalize(lowerCaseClassName);
        
        String pkColumnName = m_caseClassPrefix + "ID";
        
        m_formData = "      \"id\" -> optional(number),\n" + chop(m_formData, 2) + "\n";        
        m_writeData = ("      \"id\" -> Json.toJson(xxxz.id),\n" + "      C." + pkColumnName + " -> Json.toJson(xxxz.id),\n" + chop(m_writeData, 2)).replaceAll("xxxz", lowerCaseClassName) + "\n";
        m_createUpdateParamList = chop(m_createUpdateParamList, 2).replaceAll("xxxz", lowerCaseClassName);

        return "package controllers.logged.modules.general\n\n"
                + m_controllerImports
                + "\n\n"
                + m_controllerClassData.replace("CASE-CLASS-FIELDS", m_caseClassDataFields).replaceAll("Xxxz", capitalizedClassName)
                + "\n\n"
                + m_controllerObject
                    .replaceAll("Xxxzs", capitalizedPluralClassName)
                    .replaceAll("xxxzs", lowerPluralClassName)
                    .replaceAll("Xxxz", capitalizedClassName)
                    .replaceAll("xxxz", lowerCaseClassName)
                    .replaceAll("XXXZs", pluralClassName.toUpperCase())
                    .replaceAll("XXXZ", lowerCaseClassName.toUpperCase())
                    .replaceAll("\\[FORM-DATA\\]", m_formData)
                    .replaceAll("\\[WRITES-DATA\\]", m_writeData)
                    .replaceAll("\\[UPDATE-PARAM-LIST\\]", m_createUpdateParamList)
                    .replaceAll("\\[CREATE-PARAM-LIST\\]", m_createUpdateParamList)
                ;    
    }
    
    private String chop(String text, int characters) {
        if (text.length() <= characters)
            return "";
        else 
            return text.substring(0, text.length() - characters);
    }
    
    private String toCamel(String text) {
        String rtn = "";
        boolean lastWasUnderscore = false;
        for (int i = 0; i < text.length(); i++) {
            String c = text.substring(i, i+1);
            if (c.equals("_")) {
                lastWasUnderscore = true;
            }
            else {
                if (lastWasUnderscore) {
                    rtn += c.toUpperCase();
                    lastWasUnderscore = false;
                }                
                else {
                    rtn += c.toLowerCase();
                }
            }
        }
        return rtn;
    }
    
    /*
     
     * MODEL
     
     */    
    
    private static final String m_modelImports = 
            "import java.sql.{Connection, CallableStatement, ResultSet, Types, SQLException}\n"
          + "import anorm.SqlParser._\n"
          + "import anorm._\n"
          + "import services.DateUtil\n"
          + "import services.db.DB\n"
          + "import models.cairo.system.database.{DBHelper, Register, Field, FieldType, SaveResult}\n"
          + "import play.api.Play.current\n"
          + "import models.domain.CompanyUser\n"
          + "import java.util.Date\n"
          + "import play.api.Logger\n"
          + "import play.api.libs.json._\n"
          + "import scala.util.control.NonFatal\n";
    
    private String m_modelCaseClass = 
            "case class Xxxz(\n              id: Int,\n"
          + "CASE-CLASS-FIELDS-FULL,\n"
          + "              createdAt: Date,\n"
          + "              updatedAt: Date,\n"
          + "              updatedBy: Int) {\n\n"
          + "  def this(\n      id: Int,\nCASE-CLASS-FIELDS-NO-FK-NAMES) = {\n\n"
          + "    this(\n      id,\nCASE-CLASS-ARGUMENTS-FULL,\n"
          + "      DateUtil.currentTime,\n      DateUtil.currentTime,\n      DBHelper.NoId)\n"
          + "  }\n\n"  
          + "  def this(\nCASE-CLASS-FIELDS-NO-FK-NAMES) = {\n\n"
          + "    this(\n      DBHelper.NoId,\nCASE-CLASS-ARGUMENTS-NO-FK)\n\n"
          + "  }\n\n"
          + "}";
    
    private String m_modelObject = 
                "object Xxxz {\n\n"

            + "  lazy val emptyXxxz = Xxxz(\nCASE-CLASS-EMPTY-ARGUMENTS)\n\n"

            + "  def apply(\n      id: Int,\nCASE-CLASS-FIELDS-NO-FK-NAMES) = {\n\n"
            + "    new Xxxz(\n      id,\nCASE-CLASS-ARGUMENTS-APPLY-FULL)\n"
            + "  }\n\n"
            + "  def apply(\nCASE-CLASS-FIELDS-NO-FK-NAMES) = {\n\n"
            + "    new Xxxz(\nCASE-CLASS-ARGUMENTS-NO-FK)\n"
            + "  }\n\n"

            + "  private val xxxzParser: RowParser[Xxxz] = {\n"
            + "      SqlParser.get[Int](C.PK_COLUMN) ~\n"
            + "[PARSER-MAP]"
            + "      SqlParser.get[Date](DBHelper.CREATED_AT) ~\n"
            + "      SqlParser.get[Date](DBHelper.UPDATED_AT) ~\n"
            + "      SqlParser.get[Int](DBHelper.UPDATED_BY) map {\n"
            
            /* [PARSER-MAP]:
             
            + "      SqlParser.get[String](C.PRO_NAME) ~\n"
            + "      SqlParser.get[String](C.PRO_CODE) ~\n"
            + "      SqlParser.get[String](C.PRO_DESCRIP) ~\n"
            + "      SqlParser.get[Int](DBHelper.ACTIVE) ~\n"
            + "      SqlParser.get[Int](C.PA_ID) ~\n"
            + "      SqlParser.get[String](C.PA_NAME)
             
             */
            
            
            + "      case\n              id ~\n[PARSER~COLUMNS] ~\n              createdAt ~\n              updatedAt ~\n              updatedBy =>\n"
            
            /* [PARSER~COLUMNS]:             
             
             name ~ code ~ descrip ~ active ~ paId ~ paName
             
             */            
            
            + "        Xxxz(\n              id,\n[PARSER-COLUMNS],\n              createdAt,\n              updatedAt,\n              updatedBy)\n"
            
            /* [PARSER-COLUMNS]:
            
             name, code, descrip, (if(active != 0) true else false), paId, paName
            
            */
            
            + "    }\n"
            + "  }\n\n"

            + "  def create(user: CompanyUser, xxxz: Xxxz): Xxxz = {\n"
            + "    save(user, xxxz, true)\n"
            + "  }\n\n"

            + "  def update(user: CompanyUser, xxxz: Xxxz): Xxxz = {\n"
            + "    save(user, xxxz, false)\n"
            + "  }\n\n"

            + "  private def save(user: CompanyUser, xxxz: Xxxz, isNew: Boolean): Xxxz = {\n"
            + "    def getFields = {\n"
            + "      List(\n"
            + "[SAVE-FIELD-LIST]\n"
            + "      )\n"
            + "    }\n"
            
            /* [SAVE-FIELD-LIST]
             
            + "        Field(C.PRO_NAME, xxxz.name, FieldType.text),\n"
            + "        Field(C.PRO_CODE, xxxz.code, FieldType.text),\n"
            + "        Field(C.PRO_DESCRIP, xxxz.descrip, FieldType.text),\n"
            + "        Field(DBHelper.ACTIVE, (if(xxxz.active) 1 else 0), FieldType.boolean),\n"
            + "        Field(C.PA_ID, xxxz.paId, FieldType.id)\n"             
             
             */
            
            
            + "    def throwException = {\n"
            + "      throw new RuntimeException(s\"Error when saving ${C.XXXZ}\")\n"
            + "    }\n\n"

            + "    DBHelper.saveEx(\n"
            + "      user,\n"
            + "      Register(\n"
            + "        C.XXXZ,\n"
            + "        C.PK_COLUMN,\n"
            + "        xxxz.id,\n"
            + "        false,\n"
            + "        true,\n"
            + "        true,\n"
            + "        getFields),\n"
            + "      isNew,\n"
            + "      C.CODE_COLUMN\n"
            + "    ) match {\n"
            + "      case SaveResult(true, id) => load(user, id).getOrElse(throwException)\n"
            + "      case SaveResult(false, id) => throwException\n"
            + "    }\n"
            + "  }\n\n"

            + "  def load(user: CompanyUser, id: Int): Option[Xxxz] = {\n"
            + "    loadWhere(user, s\"${C.PK_COLUMN} = {id}\", 'id -> id)\n"
            + "  }\n\n"

            + "  def loadWhere(user: CompanyUser, where: String, args : scala.Tuple2[scala.Any, anorm.ParameterValue[_]]*) = {\n"
            + "    DB.withConnection(user.database.database) { implicit connection =>\n"
            + "      SQL(s\"SELECT t1.*, t2.${C.FK_NAME} FROM ${C.XXXZ} t1 INNER JOIN ${C.???} t2 ON t1.${C.FK_ID} = t2.${C.FK_ID} WHERE $where\")\n"
            + "        .on(args: _*)\n"
            + "        .as(xxxzParser.singleOpt)\n"
            + "    }\n"
            + "  }\n\n"

            + "  def delete(user: CompanyUser, id: Int) = {\n"
            + "    DB.withConnection(user.database.database) { implicit connection =>\n"
            + "      try {\n"
            + "        SQL(s\"DELETE FROM ${C.XXXZ} WHERE ${C.PK_COLUMN} = {id}\")\n"
            + "        .on('id -> id)\n"
            + "        .executeUpdate\n"
            + "      } catch {\n"
            + "        case NonFatal(e) => {\n"
            + "          Logger.error(s\"can't delete a ${C.XXXZ}. ${C.PK_COLUMN} id: $id. Error ${e.toString}\")\n"
            + "          throw e\n"
            + "        }\n"
            + "      }\n"
            + "    }\n"
            + "  }\n\n"

            + "  def get(user: CompanyUser, id: Int): Xxxz = {\n"
            + "    load(user, id) match {\n"
            + "      case Some(p) => p\n"
            + "      case None => emptyXxxz\n"
            + "    }\n"
            + "  }\n"
            + "}\n";           
    
    private String m_caseClassFields = "";
    private String m_caseClassNoFKFields = "";

    private String m_caseClassArgumentsFull = "";    
    private String m_caseClassArgumentsApplyFull = "";    
    private String m_caseClassArgumentsNoFK = "";
    private String m_caseClassEmptyArguments = "";
    private String m_parserMap = "";
    private String m_parserColumns = "";
    private String m_parserColumns2 = "";
    private String m_saveFieldList = "";
    private String m_parserMapLastField = "";
    private String m_camelField = "";
    
    private String m_caseClassLastField = "";
    
    private void writeModelCaseClass(String strLine) {
      if (strLine.contains("var elem = properties.add(null, Cairo.General.Constants.")) {
          m_caseClassLastField = strLine.trim().replace("var elem = properties.add(null, Cairo.General.Constants.", "");
          m_caseClassLastField = m_caseClassLastField.substring(0, m_caseClassLastField.indexOf(")"));
          
          m_parserMapLastField = m_caseClassLastField;
          
          if (m_caseClassPrefix.isEmpty()) {
              m_caseClassPrefix = m_caseClassLastField.substring(0, m_caseClassLastField.indexOf("_") + 1);
          }
          
          if (m_caseClassLastField.startsWith(m_caseClassPrefix)) {
            m_caseClassLastField = m_caseClassLastField.substring(m_caseClassPrefix.length());
          }
          
          m_camelField = toCamel(m_caseClassLastField);
          
          m_caseClassFields += "              " + m_camelField + ": ";
          m_caseClassNoFKFields += "      " + m_camelField + ": ";
          
          m_caseClassArgumentsFull += "      " + m_camelField + ",\n";
          m_caseClassArgumentsApplyFull += "      " + m_camelField + ",\n";
          m_caseClassArgumentsNoFK += "      " + m_camelField + ",\n";
          
          m_parserColumns += "              " + m_camelField + " ~\n";
          m_parserColumns2 += "              " + m_camelField + ",\n";
                  
      }
      else if(strLine.contains("setValue") && ! m_discardProperty) {
          String expression = strLine.substring(strLine.indexOf("(") + 1, strLine.indexOf(")"));
          if (expression.equals("m_active === true ? 1 : 0")) {
              m_caseClassFields += "              active: Boolean,\n";
              m_caseClassNoFKFields += "      active: Boolean,\n";
              m_caseClassArgumentsFull += "      active,\n";
              m_caseClassArgumentsApplyFull += "      active,\n";
              m_caseClassArgumentsNoFK += "      active,\n";
              m_caseClassEmptyArguments += "    false,\n";
              m_parserMap += "      SqlParser.get[Int](DBHelper.ACTIVE) ~\n";
              m_parserColumns += "              active ~\n";
              m_parserColumns2 += "              (if(active != 0) true else false),\n";
              m_saveFieldList += "        Field(DBHelper.ACTIVE, (if(xxxz.active) 1 else 0), FieldType.boolean),\n";
              
          }
          else {
            IdentifierInfo info = getIdentifierInfo(getVariableFromExpression(expression)); 
            if (info != null) {
                String dataType = info.variable != null ? info.variable.dataType : info.function.getReturnType().dataType;
                String scalaType = getScalaType(dataType);
                if (! m_setIdFound) {
                  m_caseClassNoFKFields += scalaType + ",\n";
                  m_caseClassFields += scalaType + ",\n";
                }
                m_caseClassEmptyArguments += "    " + getZeroValueForDataType(dataType) + ",\n";
                m_parserMap += "      SqlParser.get[" + scalaType + "](C." + m_parserMapLastField + ") ~\n";            
                m_saveFieldList += "        Field(C." + m_parserMapLastField + ", xxxz." + m_camelField + ", FieldType." + getFormType(dataType) + "),\n";            
            }
            else {
                int debug = 1;
            }
          }
      }      
      else if(strLine.contains("setSelectId")) {
          int t = m_caseClassLastField.indexOf("_");
          if(t >= 0) {
            String fkName = m_caseClassLastField.substring(0, t).toLowerCase() + "Name";

            if (m_caseClassNoFKFields.contains("ibcId:")) {
                int debug = 1;
            }

            m_caseClassFields = updateLastFieldType(m_caseClassFields, "Int");
            m_caseClassNoFKFields = updateLastFieldType(m_caseClassNoFKFields, "Int");
            int len = (m_caseClassEmptyArguments.endsWith(" 0,\n")) ? 3 : (m_caseClassEmptyArguments.endsWith(" null,\n")) ? 6 : 4;

            m_caseClassEmptyArguments = chop(m_caseClassEmptyArguments, len) + "DBHelper.NoId,\n";
            m_caseClassFields += "              " + fkName + ": String,\n";
            m_caseClassArgumentsFull += "      \"\",\n";
            m_parserMap = updateLastParserType(m_parserMap, "Int");
            m_parserMap += "      SqlParser.get[String](C." + m_caseClassLastField.substring(0, m_caseClassLastField.indexOf("_")).toUpperCase() + "_NAME" + ") ~\n";
            m_parserColumns += "              " + fkName + " ~\n";
            m_parserColumns2 += "              " + fkName + ",\n";

            m_saveFieldList = updateLastSaveListType(m_saveFieldList, "id");
          }
      }
    }
    
    private String updateLastParserType(String list, String dataType) {
        for (int i = list.length()-1; i > 0; i--) {
            if (list.charAt(i) == '[') {
                list = list.substring(0, i + 1) + dataType + "](C." + m_parserMapLastField + ") ~\n";
                break;
            }
        }
        return list;
    }

    private String updateLastSaveListType(String list, String dataType) {
        for (int i = list.length()-3; i > 0; i--) {
            if (list.charAt(i) == ',') {
                list = list.substring(0, i + 1) + " FieldType." + dataType + "),\n";
                break;
            }
        }
        return list;
    }    
    
    private String getModelFile() {
               
        String className = m_javaClassName.substring(1);
        String pluralClassName = cairoTreeListControllerGetIdentifierPluralName(className);
        String lowerPluralClassName = pluralClassName.toLowerCase();
        String capitalizedPluralClassName = capitalize(pluralClassName);
        String lowerCaseClassName = cairoTreeListControllerGetIdentifierName(className);
        String capitalizedClassName = capitalize(lowerCaseClassName);
        
        String pkColumnName = m_caseClassPrefix + "ID";
        String codeColumnName = m_caseClassPrefix + "CODE";
        
        m_caseClassFields = chop(m_caseClassFields, 2);
        m_caseClassNoFKFields = chop(m_caseClassNoFKFields, 2);
        m_caseClassArgumentsFull = chop(m_caseClassArgumentsFull, 2);
        m_caseClassArgumentsApplyFull = chop(m_caseClassArgumentsApplyFull, 2);
        m_caseClassArgumentsNoFK = chop(m_caseClassArgumentsNoFK, 2);        
        
        return "package models.cairo.modules.general\n\n"
                + m_modelImports
                + "\n"
                + m_modelCaseClass
                        .replace("CASE-CLASS-FIELDS-FULL", m_caseClassFields)
                        .replace("CASE-CLASS-FIELDS-NO-FK-NAMES", m_caseClassNoFKFields)
                        .replace("CASE-CLASS-ARGUMENTS-FULL", m_caseClassArgumentsFull)
                        .replace("CASE-CLASS-ARGUMENTS-NO-FK", m_caseClassArgumentsNoFK)
                        .replaceAll("Xxxz", capitalizedClassName)
                + "\n\n"
                + m_modelObject
                    .replace("CASE-CLASS-FIELDS-FULL", m_caseClassFields)
                    .replace("CASE-CLASS-FIELDS-NO-FK-NAMES", m_caseClassNoFKFields)
                    .replace("CASE-CLASS-ARGUMENTS-APPLY-FULL", m_caseClassArgumentsApplyFull)
                    .replace("CASE-CLASS-ARGUMENTS-NO-FK", m_caseClassArgumentsNoFK)
                    .replace("CASE-CLASS-EMPTY-ARGUMENTS", chop(m_caseClassEmptyArguments, 2))
                    .replaceAll("PK_COLUMN", pkColumnName)
                    .replaceAll("CODE_COLUMN", codeColumnName)
                    .replaceAll("\\[PARSER-MAP\\]", m_parserMap)
                    .replaceAll("\\[PARSER~COLUMNS\\]", chop(m_parserColumns, 2))
                    .replaceAll("\\[PARSER-COLUMNS\\]", chop(m_parserColumns2, 2))
                    .replaceAll("\\[SAVE-FIELD-LIST\\]", chop(m_saveFieldList, 2))
                    .replaceAll("Xxxzs", capitalizedPluralClassName)
                    .replaceAll("xxxzs", lowerPluralClassName)
                    .replaceAll("Xxxz", capitalizedClassName)
                    .replaceAll("xxxz", lowerCaseClassName)
                    .replaceAll("XXXZs", pluralClassName.toUpperCase())
                    .replaceAll("XXXZ", lowerCaseClassName.toUpperCase())
                ;
        
        ////////////////////////////////////////////////////////////////////////
        

        
/*        
        
        m_formData = "      \"id\" -> optional(number),\n" + chop(m_formData, 2) + "\n";        
        m_writeData = ("      \"id\" -> Json.toJson(xxxz.id),\n" + chop(m_writeData, 2)).replaceAll("xxxz", lowerCaseClassName) + "\n";
        m_createUpdateParamList = chop(m_createUpdateParamList, 2).replaceAll("xxxz", lowerCaseClassName);

        return m_controllerImports
                + "\n\n"
                + m_controllerClassData.replace("CASE-CLASS-FIELDS", m_caseClassDataFields).replaceAll("Xxxz", capitalizedClassName)
                + "\n\n"
                + m_controllerObject
                    .replaceAll("Xxxzs", capitalizedPluralClassName)
                    .replaceAll("xxxzs", lowerPluralClassName)
                    .replaceAll("Xxxz", capitalizedClassName)
                    .replaceAll("xxxz", lowerCaseClassName)
                    .replaceAll("XXXZs", pluralClassName.toUpperCase())
                    .replaceAll("XXXZ", lowerCaseClassName.toUpperCase())
                    .replaceAll("\\[FORM-DATA\\]", m_formData)
                    .replaceAll("\\[WRITES-DATA\\]", m_writeData)
                    .replaceAll("\\[UPDATE-PARAM-LIST\\]", m_createUpdateParamList)
                    .replaceAll("\\[CREATE-PARAM-LIST\\]", m_createUpdateParamList)
                ; 
                */ 
    }
    
    private String getScalaType(String dataType) {
        return dataType.equals("Integer") ? "Int" : dataType;
    }
    
    private String m_router = 
        "GET     /api/v1/general/xxxz/:id              controllers.logged.modules.general.Xxxzs.get(id: Int)\n"
      + "POST    /api/v1/general/xxxz                  controllers.logged.modules.general.Xxxzs.create\n"
      + "PUT     /api/v1/general/xxxz/:id              controllers.logged.modules.general.Xxxzs.update(id: Int)\n"
      + "DELETE  /api/v1/general/xxxz/:id              controllers.logged.modules.general.Xxxzs.delete(id: Int)\n";
            
    private String getRouter() {
        String className = m_javaClassName.substring(1);
        String path = className.toLowerCase();
        String controllerName = capitalize(cairoTreeListControllerGetIdentifierPluralName(className));
        return m_router
              .replaceAll("xxxz", path)
              .replaceAll("Xxxzs", controllerName);              
    }
    
    
    /*
     
     SCALA functions
     * 
     * CONTROLLER
     * 
     * imports:
     * 
        import controllers._
        import play.api.mvc._
        import play.api.data._
        import play.api.data.Forms._
        import actions._
        import play.api.Logger
        import play.api.libs.json._
        import models.cairo.modules.general._
        import models.cairo.system.security.CairoSecurity
        import models.cairo.system.database.DBHelper
     *
     * case class XXXZData (only columns in the table. for FK do not include names)
     * 
     * object XXXZs extends Controller with ProvidesUser
     * 
     * XXXZForm:    only columns in the table
     * 
     * XXXZWrites:  all fields in XXXZ model (include FK's name) take this from load
     * 
     * get: very easy: just call model.load
     * 
     * create: very easy: just call model.create
     * 
     * delete: very easy: just call model.delete
     * 
     * MODEL
     * 
     * imports:
     * 
        import java.sql.{Connection, CallableStatement, ResultSet, Types, SQLException}
        import anorm.SqlParser._
        import anorm._
        import services.DateUtil
        import services.db.DB
        import models.cairo.system.database.{DBHelper, Register, Field, FieldType, SaveResult}
        import play.api.Play.current
        import models.domain.CompanyUser
        import java.util.Date
        import play.api.Logger
        import play.api.libs.json._
        import scala.util.control.NonFatal
     * 
     * case class XXXZ
     *  three constructors:
     *      - default constructor: all fields including names of FK
     *      - constructor which doesn't takes names of FK
     *      - constructor which doesn't takes names of FK neither PK
     * 
     * object XXXZ
     * 
     *  an emptyXXXZ
     * 
     *  two apply methods to implement the two aditional constructors
     * 
     *  rowParser
     * 
     *  create and update (very easy: only assign parameter: Type like provincia: Provincia and return type like ): Provincia, then call save(user, parameter, true/false))
     * 
     *  save  - easy: just define a list with Field(colName, value, type. this has to be done when parsin save just use the case K_xxx to create the list
     *                define an exception with a generic message
     *                call DBHelper.saveEx
     *                match the result
     * 
     *  load - easy: just set the idColumnName and call loadWhere
     * 
     *  loadWhere - very easy: just set the parser, the select should be written manually don't translate the select just copy the original select from load into
     *                         this function to help the manual editing
     * 
     *  delete - very easy: just set the name of the table and PK if the delete uses an SP or is more complex it will be translated manually
     * 
     *  get - just call load and if None return emptyXXXZ
     * 
     * ROUTER
     * 
     * # general
            GET     /api/v1/general/XXXZ/:id              controllers.logged.modules.general.XXXZs.get(id: Int)
            POST    /api/v1/general/XXXZ                  controllers.logged.modules.general.XXXZs.create
            PUT     /api/v1/general/XXXZ/:id              controllers.logged.modules.general.XXXZs.update(id: Int)
            DELETE  /api/v1/general/XXXZ/:id              controllers.logged.modules.general.XXXZs.delete(id: Int)
     * 
     * 
     
     */
    
}

class IdentifierInfo {
    boolean isFunction = false;
    Function function = null;
    Variable variable = null;
}

/*
 And
 As
 Call
 Do
 Exit
 False
 True
 For
 Function
 GoTo
 If
 Loop
 Me
 Next
 Not
 Nothing
 Option
 Or
 Private
 Public
 Resume
 Step
 Sub
 Then
 Until
 While
 If..Else..ElseIf..Then
 */

/*
 * TODO_DONE: file mError.bas line 72 {s = Replace(s, "$" & i + 1, X(i))}
 *       the code is translated as
 *              {s = Replace(s, "$" + ((Integer) i).toString() + 1, X(i));}
 *       it is wrong because i + 1 must to be evaluated first and then has to apply
 *       the cast to Integer:
 *              {s = Replace(s, "$" + ((Integer) (i + 1)).toString(), X(i));}
 */

/*
 *
 * TODO_DONE: manage events
 * TODO: manage byref params that actually aren't byref because are not asigned to a value
 *       by the function code
 * TODO_DONE: change getters in assignment eg:
 *              m_obj.getProperty() = ...;
 *       must be
 *              m_obj.setProperty(...);
 * TODO: translate byref for strings
 * TODO: translate byref for arrays. this is for array type params that are resized
 *       by the the function code. we have to search for redim
 * TODO_DONE: translate redim
 * TODO_DONE: translate instr
 * TODO: translate database access. replace recordsets.
 * TODO: translate globals (be aware of multi threading)
 * TODO: file functions (print, open, getattr, etc.)
 * TODO_DONE: translate Not sentence eg return Not cancel (this is parcially translated functionName = Not Cancel)
 * TODO: translate default property
 * TODO: translate on error goto controlerror
 * TODO: add import calls for references to vb projects we have translated
 * TODO_DONE: initialize local variables to zero or null string or null date or false
 * TODO: translate replace function
 * TODO_DONE: replace literal dates which are sourronded by #
 * TODO: resolve params array
 * TODO: translate IsEmpty for variants
 *
 * TODO: make an html report with a sumary of the work done (total classes translated,
 *       total files created, total projects translated, total functions)
 *
 *       erros: list of windows api calls founded and the line number where it appears in files
 *              list o variables of with block which can not be resolved and the line number
 *               where it appears in files
 *              list of references which are not vb projects we have translated yet eg: stdole2.dll
 *
 *       warnnings: list all the cases where default properties were translated
 *                  list all the cases where array indexes where translated
 *                  list all the cases where byref strings and byref numbers where translated
 *                  list all the cases where byref objects where translated to byval because
 *                   the object is not assigned by the code in the function and neither by the code
 *                   in other functions called by the function which was translated and takes
 *                   the object as a byref parameter
 *                  list all the cases where we found #If #else and #end if
 *
 */

