private String replaceOneParamFunction(String expression, String function, String javaFunction) {
        
        expression = G.ltrimTab(expression);

        if (containsFunction(expression, function)) {

            boolean functionFound = false;
            int openParentheses = 0;
            String[] words = G.split(expression);
            String params = "";
            expression = "";

            for (int i = 0; i < words.length; i++) {
                if (functionFound) {
                    if (words[i].equals("(")) {
                        openParentheses++;
                        if (openParentheses > 1) {
                            params += words[i];
                        }
                    }
                    // look for a close parentheses without an open parentheses
                    else if (words[i].equals(")")) {
                        openParentheses--;
                        if (openParentheses == 0) {
                            if (containsFunction(params, function)) {
                                params = replaceOneParamFunction(params, function, javaFunction);
                            }
                            String[] vparams = G.split(params);
                            String identifier = "";

                            int colons = 0;
                            identifier = "";
                            for (int t = 0; t < vparams.length; t++) {
                                if (vparams[t].equals(",")) {
                                    colons++;
                                }
                                else {

                                    if (colons == 0) {
                                        identifier += vparams[t];
                                    }
                                    else {
                                        showError("Unexpected colon found in "
                                                + function
                                                + " function's params: " + params);
                                    }
                                }
                            }
                            // identifier can be a complex expresion
                            // like ' "an string plus" + a_var '
                            //
                            if (G.contains(identifier, " ")) {
                                identifier = "(" + identifier + ")";
                            }
                            expression += javaFunction + "(" + identifier + ")";
                            functionFound = false;
                            params = "";
                        }
                        else {
                            params = params.trim() + words[i];
                        }
                    }
                    else {
                        params += words[i];
                    }
                }
                else {
                    if (words[i].equalsIgnoreCase(function)) {
                        functionFound = true;
                    }
                    else if (G.beginLike(words[i], function + "(")) {
                        expression += replaceOneParamFunction(words[i], function, javaFunction);
                    }
                    else if (words[i].toLowerCase().contains(" " + function + "(")) {
                        expression += replaceOneParamFunction(words[i], function, javaFunction);
                    }
                    else if (words[i].toLowerCase().contains("(" + function + "(")) {
                        expression += replaceOneParamFunction(words[i], function, javaFunction);
                    }
                    else {
                        expression += words[i];
                    }
                }
            }
        }
        return expression.trim();
    }

    private boolean containsTypeOf(String expression) {
        if (G.beginLike(expression, "typeof ")) {
            return true;
        }
        else if (expression.toLowerCase().contains(" typeof ")) {
            return true;
        }
        else if (expression.toLowerCase().contains("(typeof ")) {
            return true;
        }
        else {
            return false;
        }
    }

    private boolean containsMid(String expression) {
        if (expression.toLowerCase().contains(" mid(")) {
            return true;
        }
        else if (expression.toLowerCase().contains("(mid(")) {
            return true;
        }
        else if (expression.toLowerCase().contains(" mid$(")) {
            return true;
        }
        else if (expression.toLowerCase().contains("(mid$(")) {
            return true;
        } 
        else if (G.beginLike(expression,"mid(")) {
            return true;
        }
        else if (G.beginLike(expression,"mid$(")) {
            return true;
        }
        else {
            return false;
        }
    }

    private boolean containsLeft(String expression) {
        if (expression.toLowerCase().contains(" left(")) {
            return true;
        }
        else if (expression.toLowerCase().contains("(left(")) {
            return true;
        }
        else if (expression.toLowerCase().contains(" left$(")) {
            return true;
        }
        else if (expression.toLowerCase().contains("(left$(")) {
            return true;
        }
        else if (G.beginLike(expression,"left(")) {
            return true;
        }
        else if (G.beginLike(expression,"left$(")) {
            return true;
        }
        else {
            return false;
        }
    }

    private boolean containsRight(String expression) {
        if (expression.toLowerCase().contains(" right(")) {
            return true;
        }
        else if (expression.toLowerCase().contains("(right(")) {
            return true;
        }
        else if (expression.toLowerCase().contains(" right$(")) {
            return true;
        }
        else if (expression.toLowerCase().contains("(right$(")) {
            return true;
        }
        else if (G.beginLike(expression,"right(")) {
            return true;
        }
        else if (G.beginLike(expression,"right$(")) {
            return true;
        }
        else {
            return false;
        }
    }

    private boolean containsLCase(String expression) {
        if (expression.toLowerCase().contains(" lcase(")) {
            return true;
        }
        else if (expression.toLowerCase().contains("(lcase(")) {
            return true;
        }
        else if (expression.toLowerCase().contains(" lcase$(")) {
            return true;
        }
        else if (expression.toLowerCase().contains("(lcase$(")) {
            return true;
        }
        else if (G.beginLike(expression,"lcase(")) {
            return true;
        }
        else if (G.beginLike(expression,"lcase$(")) {
            return true;
        }
        else {
            return false;
        }
    }

    private boolean containsUCase(String expression) {
        if (expression.toLowerCase().contains(" ucase(")) {
            return true;
        }
        else if (expression.toLowerCase().contains("(ucase(")) {
            return true;
        }
        else if (expression.toLowerCase().contains(" ucase$(")) {
            return true;
        }
        else if (expression.toLowerCase().contains("(ucase$(")) {
            return true;
        }
        else if (G.beginLike(expression,"ucase(")) {
            return true;
        }
        else if (G.beginLike(expression,"ucase$(")) {
            return true;
        }
        else {
            return false;
        }
    }

    private boolean containsLen(String expression) {
        return containsFunction(expression, "len");
    }

    private boolean containsTrim(String expression) {
        if (expression.toLowerCase().contains(" trim(")) {
            return true;
        }
        else if (expression.toLowerCase().contains("(trim(")) {
            return true;
        }
        else if (expression.toLowerCase().contains(" trim$(")) {
            return true;
        }
        else if (expression.toLowerCase().contains("(trim$(")) {
            return true;
        }
        else if (G.beginLike(expression,"trim(")) {
            return true;
        }
        else if (G.beginLike(expression,"trim$(")) {
            return true;
        }
        else {
            return false;
        }
    }

    private boolean containsInStr(String expression) {
        return containsFunction(expression, "instr");
    }

    private boolean containsReplace(String expression) {
        if (expression.toLowerCase().contains(" replace(")) {
            return true;
        }
        else if (expression.toLowerCase().contains("(replace(")) {
            return true;
        }
        else if (expression.toLowerCase().contains(" replace$(")) {
            return true;
        }
        else if (expression.toLowerCase().contains("(replace$(")) {
            return true;
        } 
        else if (G.beginLike(expression,"replace(")) {
            return true;
        }
        else if (G.beginLike(expression,"replace$(")) {
            return true;
        }
        else {
            return false;
        }
    }

    private boolean containsIif(String expression) {
        if (expression.toLowerCase().contains(" iif(")) {
            return true;
        }
        else if (expression.toLowerCase().contains("(iif(")) {
            return true;
        }
        else if (G.beginLike(expression,"iif(")) {
            return true;
        }
        else {
            return false;
        }
    }
    
    private boolean containsFunction(String expression, String function) {
        function = function.toLowerCase();
        expression = expression.toLowerCase();
        if (expression.contains(" " + function + "(")) {
            return true;
        }
        else if (expression.contains("(" + function + "(")) {
            return true;
        }
        else if (G.beginLike(expression,function + "(")) {
            return true;
        }
        else {
            return false;
        }
    }

    private String replaceVbWords(String expression) {
        expression = G.ltrimTab(expression);
        String[] words = G.split2(expression);
        expression = "";

        // Public
        //
        for (int i = 0; i < words.length; i++) {
            if (words[i].equalsIgnoreCase("vbNullString")) {
                words[i] = "\"\"";
            }
            else if (words[i].equalsIgnoreCase("False")) {
                words[i] = "false";
            }
            else if (words[i].equalsIgnoreCase("True")) {
                words[i] = "true";
            }
            else if (words[i].equalsIgnoreCase("vbCrLf")) {
                words[i] = "\"\\r\\n\"";
            }
            else if (words[i].equalsIgnoreCase("vbCr")) {
                words[i] = "\"\\n\"";
            }
            else if (words[i].equalsIgnoreCase("vbLf")) {
                words[i] = "\"\\r\"";
            }
            else if (words[i].equalsIgnoreCase("me")) {
                if(m_translateToCairo) {
                    words[i] = "self";
                }
                else {
                    words[i] = "this";
                }
            }
            expression += words[i];// + " ";
        }
        return expression.trim();
    }

    private String processEqualsSentence(String firstOperand, String secondOperand, String operator) {
        boolean isNotEquals = operator.equals("!=");
        if (isStringExpression(firstOperand)) {
            if (isNotEquals) {
                String firstSpace = "";
                if (firstOperand.startsWith(" "))
                    firstSpace = " ";
                return firstSpace 
                        +"!("
                        + firstOperand.trim() + ".equals(" + secondOperand.trim() + ")"
                        +")";
            }
            else
                return G.rtrim(firstOperand) + ".equals(" + secondOperand.trim() + ")";
        }
        else if (isStringExpression(secondOperand)) {
            if (isNotEquals) {
                String firstSpace = "";
                if (secondOperand.startsWith(" "))
                    firstSpace = " ";
                return firstSpace
                        +"!("
                        + secondOperand.trim() + ".equals(" + firstOperand.trim() + ")"
                        + ")";
            }
            else
                return G.rtrim(secondOperand) + ".equals(" + firstOperand.trim() + ")";
        }
        else {
            if (isNotEquals)
                return firstOperand + "!=" + secondOperand;
            else
                return firstOperand + "==" + secondOperand;
        }
    }

    private boolean isStringExpression(String expression) {
        IdentifierInfo info = null;
        String type = "";
        String parent = "";
        expression = expression.trim();
        if (expression.length() == 0)
            return false;
        if (expression.charAt(0) == '.') {
            if (expression.length() > 1) {
                expression = expression.substring(1);
            }
            else {
                expression = "";
            }
        }
        String[] words = G.split3(expression,".");
        if (m_collWiths.size() > 0) {
            parent = m_collWiths.get(m_collWiths.size()-1).dataType;
        }
        for (int i = 0; i < words.length; i++) {
            info = getIdentifierInfo(words[i], parent, !parent.isEmpty());
            if (info == null)
                type = "";
            else if (info.isFunction)
                type = info.function.getReturnType().dataType;
            else
                type = info.variable.dataType;
            parent = type;
        }

        if (info == null) {
            if (expression.charAt(0) == '"') {
                if (expression.charAt(expression.length()-1) == '"') {
                    return true;
                }
            }
            return false;
        }
        else {
            if (info.isFunction) {
                return info.function.getReturnType().isString;
            }
            else {
                return info.variable.isString;
            }
        }
    }

    private Function getFunction(String expression, String className) {
        String functionName = "";

        /*
        // debug
        if (expression.toLowerCase().contains("cIABMClient_Terminate".toLowerCase())) {
            int i = 9999;
        }
         * 
         */
        
        if (expression.contains("(")) {
            int i = expression.indexOf("(");
            if (i > 0) {
                functionName = expression.substring(0, i);
            }
        }
        else {
            functionName = expression;
        }
        if (functionName.isEmpty()) {
            return null;
        }

        Iterator itrFile = null;

        // first we search in private functions
        //
        if (className.isEmpty()
                || className.toLowerCase().equals("this")
                || className.toLowerCase().equals("self")
                || className.toLowerCase().equals("me")) {
            itrFile = m_collFiles.iterator();
            while(itrFile.hasNext()) {
                SourceFile source = (SourceFile)itrFile.next();
                if (source.getJavaName().equals(m_javaClassName)) {
                    Iterator itrPrivateFunctions = source.getPrivateFunctions().iterator();
                    while (itrPrivateFunctions.hasNext()) {
                        Function privateFunction = (Function)itrPrivateFunctions.next();
                        if (privateFunction.getJavaName().equals(functionName))
                            return privateFunction;
                        else if (privateFunction.getVbName().equals(functionName))
                            return privateFunction;
                    }
                    break;
                }
            }
        }

        // to search in public memebers we assign the real name
        // of this class to the parameter className when we
        // have the sinonyms 'this' or 'me'
        //
        if (className.toLowerCase().equals("this")
                || className.toLowerCase().equals("self")
                || className.toLowerCase().equals("me")) {
            className = m_javaClassName;
        }

        // here we search for public functions, public properties
        //
        itrFile = m_collFiles.iterator();
        while(itrFile.hasNext()) {
            SourceFile source = (SourceFile)itrFile.next();
            if (className.isEmpty()
                    || source.getJavaName().equals(className)
                    || source.getVbName().equals(className)) {
                Iterator itrPublicFunctions = source.getPublicFunctions().iterator();
                while (itrPublicFunctions.hasNext()) {
                    Function publicFunction = (Function)itrPublicFunctions.next();
                    if (publicFunction.getJavaName().equals(functionName))
                        return publicFunction;
                    else if (publicFunction.getVbName().equals(functionName))
                        return publicFunction;
                }
                if (!className.isEmpty())
                    break;
            }
        }

        // here we search for public functions in java
        //
        itrFile = m_collJavaClassess.iterator();
        while(itrFile.hasNext()) {
            SourceFile source = (SourceFile)itrFile.next();
            if (className.isEmpty()
                    || source.getJavaName().equals(className)) {
                Iterator itrPublicFunctions = source.getPublicFunctions().iterator();
                while (itrPublicFunctions.hasNext()) {
                    Function publicFunction = (Function)itrPublicFunctions.next();
                    if (publicFunction.getJavaName().equals(functionName))
                        return publicFunction;
                }
                break;
            }
        }

        // if we are here, we must look in the database
        //
        Function publicFunction = FunctionObject.getFunctionFromName(
                                                    functionName,
                                                    className,
                                                    m_references);

        return publicFunction;
    }

    private String getCastToString(String identifier) {
        
        // if the caller by mistake put parentheses in a return sentences
        // we fixed it here
        //
        if (identifier.startsWith("(return") && identifier.endsWith(")")) {
            identifier = identifier.substring(1,identifier.length()-1);
        }

        String returnPrefix = "";
        identifier = identifier.trim();
        if (G.beginLike(identifier.trim(), "return")) {
            int i = identifier.indexOf("return") + 6;
            returnPrefix = identifier.substring(0, i);
            identifier = identifier.substring(i);
        }

        Variable var = getVariable(identifier);        
        
        if (var == null) {
            IdentifierInfo info = getIdentifierInfo(identifier);
            if (info != null) {
                if (!info.isFunction) 
                    var = info.variable;
                else
                    var = info.function.getReturnType();
            }
        }
        if (var != null) {
            if (var.isString)
                return returnPrefix + identifier;
                    
            else if (var.isLong)
                if (m_translateToJava)
                    return returnPrefix + "((Long) " + identifier + ").toString()";
                else
                    return returnPrefix + identifier + ".toString()";
                    
            else if (var.isInt)
                if (m_translateToJava)
                    return returnPrefix + "((Integer) " + identifier + ").toString()";
                else
                    return returnPrefix + identifier + ".toString()";
                    
            else if (var.isBoolean)
                if (m_translateToJava)
                    return returnPrefix + "((Boolean) " + identifier + ").toString()";
                else
                    return returnPrefix + identifier + ".toString()";
                    
            else
                return returnPrefix + identifier;
        }
        else if (isComplexExpression(identifier)) {
            if (isStringExpression(identifier)) 
                return returnPrefix + identifier;
            else if (identifier.startsWith("(")) {
                if (m_translateToJava)
                    return returnPrefix + "String.valueOf" + identifier;
                else
                    return returnPrefix + identifier + ".ToString()";
            }
            else {
                if (m_translateToJava)
                    return returnPrefix + "String.valueOf(" + identifier + ")";
                else
                    return returnPrefix + "(" + identifier + ").ToString()";
            } 
        }
        else
            return returnPrefix + identifier;
    }
    
    private IdentifierInfo getIdentifierInfo(String expression) {
        IdentifierInfo info = null;
        String type = "";
        String parent = "";
        String[] words = G.split2(expression, ".()[]");
        String[] parents = new String[30]; // why 30? who nows :P, 30 should be enough :)
        int openParentheses = 0;

        for (int i = 0; i < words.length; i++) {
            if (!(".()[]".contains(words[i]))) {
                if (openParentheses == 0) {
                    info = getIdentifierInfo(words[i], parent, !parent.isEmpty());
                    if (info == null)
                        type = "";
                    else if (info.isFunction) {
                        type = info.function.getReturnType().dataType;
                    }
                    else {
                        type = info.variable.dataType;
                    }
                    parent = type;
                }
            }
            else if (words[i].equals("(")) {
                parents[openParentheses] = parent;
                parent = "";
                openParentheses++;
            }
            else if (words[i].equals(")")) {
                openParentheses--;
                parent = parents[openParentheses];
            }
            else if (words[i].equals("[")) {
                parents[openParentheses] = parent;
                parent = "";
                openParentheses++;
            }
            else if (words[i].equals("]")) {
                openParentheses--;
                parent = parents[openParentheses];
            }
        }    
        return info;
    }

    private boolean isComplexExpression(String expression) {
        if (expression.contains("+"))
            return true;
        if (expression.contains("-"))
            return true;
        if (expression.contains("*"))
            return true;
        if (expression.contains("/"))
            return true;
        else
            return false;
    }

    private Variable getVariable(String identifier) {
        return getVariable(identifier, "", false);
    }

    private Variable getVariable(String expression, String className, boolean isField) {
        String identifier = "";

        // in vb arrays use parentheses to define the index
        // eg: m_vGroups(i)
        //
        if (expression.contains("(")) {
            int i = expression.indexOf("(");
            if (i > 0) {
                identifier = expression.substring(0, i);
            }
        }
        else if (expression.contains("[")) {
            int i = expression.indexOf("[");
            if (i > 0) {
                identifier = expression.substring(0, i);
            }
        }
        else {
            identifier = expression;
        }
        if (identifier.isEmpty()) {
            return null;
        }

        if (!isField) {
            for (int i = 0; i < m_functionVariables.size(); i++) {
                if (identifier.equals(m_functionVariables.get(i).getVbName())) {
                    return m_functionVariables.get(i);
                }
                if (identifier.equals(m_functionVariables.get(i).getJavaName())) {
                    return m_functionVariables.get(i);
                }
            }
            for (int i = 0; i < m_memberVariables.size(); i++) {
                if (identifier.equals(m_memberVariables.get(i).getVbName())) {
                    return m_memberVariables.get(i);
                }
                if (identifier.equals(m_memberVariables.get(i).getJavaName())) {
                    return m_memberVariables.get(i);
                }
            }
        }

        // now we search in private types and public types
        // declared in this class
        //
        Iterator itrTypes = null;

        if (!className.isEmpty()) {
            itrTypes = m_types.iterator();
            while(itrTypes.hasNext()) {
                Type type = (Type)itrTypes.next();
                if (type.javaName.equals(className)
                        || type.vbName.equals(className)) {
                    Iterator itrMembers = type.getMembersVariables().iterator();
                    while (itrMembers.hasNext()) {
                        Variable member = (Variable)itrMembers.next();
                        if (member.getJavaName().equalsIgnoreCase(identifier))
                            return member;
                        else if (member.getVbName().equalsIgnoreCase(identifier))
                            return member;
                    }
                    break;
                }
            }
        }

        // here we search for public variables declared in bas files
        //
        Iterator itrFile = m_collFiles.iterator();
        while(itrFile.hasNext()) {
            SourceFile source = (SourceFile)itrFile.next();
            if (className.isEmpty()
                    || source.getJavaName().equals(className)
                    || source.getVbName().equals(className)) {
                Iterator itrPublicVar = source.getPublicVariables().iterator();
                while (itrPublicVar.hasNext()) {
                    Variable publicVar = (Variable)itrPublicVar.next();
                    if (publicVar.getJavaName().equalsIgnoreCase(identifier))
                        return publicVar;
                    else if (publicVar.getVbName().equalsIgnoreCase(identifier))
                        return publicVar;
                }
                if (!className.isEmpty())
                    break;
            }
        }
        
        // if we are here, we must look in the database
        //
        Variable publicVariable = VariableObject.getVariableFromName(
                                                    identifier,
                                                    className,
                                                    m_references);

        return publicVariable;
    }

    private Variable getMemberVariable(String expression) {
        String identifier = "";

        // in vb arrays use parentheses to define the index
        // eg: m_vGroups(i)
        //
        if (expression.contains("(")) {
            int i = expression.indexOf("(");
            if (i > 0) {
                identifier = expression.substring(0, i);
            }
        }
        else {
            identifier = expression;
        }
        if (identifier.isEmpty()) {
            return null;
        }

        for (int i = 0; i < m_memberVariables.size(); i++) {
            if (identifier.equals(m_memberVariables.get(i).getVbName())) {
                return m_memberVariables.get(i);
            }
            if (identifier.equals(m_memberVariables.get(i).getJavaName())) {
                return m_memberVariables.get(i);
            }
        }
        return null;
    }

    private String[] getWordsFromSentence(String strLine) {
        boolean literalFlag = false;
        String[] words = new String[500];
        String word = "";
        int j = 0;
        for (int i = 0; i < strLine.length(); i++) {
            if (strLine.charAt(i) == '"') {
                literalFlag = !literalFlag;
            }
            if (!literalFlag) {
                if (C_SYMBOLS.contains(String.valueOf(strLine.charAt(i)))) {
                    if (!word.isEmpty()) {
                        /*if (j >= words.length) {
                            int dummy = 0;
                        }*/
                        words[j] = word;
                        word = "";
                        j++;
                    }
                    /*if (j >= words.length) {
                        int dummy = 0;
                    }*/
                    words[j] = String.valueOf(strLine.charAt(i));
                    j++;
                }
                else {
                    word += String.valueOf(strLine.charAt(i));
                }
            }
            else {
                word += String.valueOf(strLine.charAt(i));
            }
        }
        if (!word.isEmpty()) {
            words[j] = word;
            j++;
        }
        String[] rtn = new String[j];
        System.arraycopy(words, 0, rtn, 0, j);
        return rtn;
    }

    private boolean isFunctionDeclaration(String strLine) {
        if (G.beginLike(strLine, "Public Function "))
            return true;
        else if (G.beginLike(strLine, "Private Function "))
            return true;
        else if (G.beginLike(strLine, "Friend Function "))
            return true;
        else if (G.beginLike(strLine, "Public Sub "))
            return true;
        else if (G.beginLike(strLine, "Private Sub "))
            return true;
        else if (G.beginLike(strLine, "Friend Sub "))
            return true;
        else if (G.beginLike(strLine, "Public Property "))
            return true;
        else if (G.beginLike(strLine, "Private Property "))
            return true;
        else if (G.beginLike(strLine, "Friend Property "))
            return true;
        else if (G.beginLike(strLine, "Function "))
            return true;
        else if (G.beginLike(strLine, "Sub "))
            return true;
        else if (G.beginLike(strLine, "Property "))
            return true;
        else
            return false;
    }

    private String translateFunctionDeclaration(String strLine) {
        // On Error flag is reset in every function
        //
        m_onErrorFound = false;
        m_onErrorLabel = "";
        m_onCatchBlock = false;
        
        initInCairoFlags();

        String functionName = "";
        String functionType = "";
        String functionScope = "";

        m_vbFunctionName = "";
        m_functionVariables.removeAll(m_functionVariables);

        strLine = G.ltrimTab(strLine);
        String[] words = G.splitSpace(strLine);//strLine.split("\\s+");

        // Public
        //
        if (words[0].equalsIgnoreCase("public")) {
            functionScope = "public";
            functionName = words[2];
            m_vbFunctionName = words[2];
            if (words[1].equalsIgnoreCase("sub")) {
                functionType = "void";
            }
            else if (words[1].equalsIgnoreCase("function")) {
                functionType = getFunctionType(strLine);
            }
            // properties
            //
            else {
                if (functionName.equalsIgnoreCase("get")) {
                    functionName = "get" 
                                    + words[3].substring(0, 1).toUpperCase()
                                    + words[3].substring(1);
                    m_vbFunctionName = words[3];
                    functionType = getPropertyType(strLine);
                }
                else {
                    functionName = "set" 
                                    + words[3].substring(0, 1).toUpperCase()
                                    + words[3].substring(1);
                    m_vbFunctionName = words[3];
                    functionType = "void";
                }
            }
        }
        // Private
        //
        else if (words[0].equalsIgnoreCase("private")) {
            functionScope = "private";
            functionName = words[2];
            m_vbFunctionName = words[2];
            if (words[1].equalsIgnoreCase("sub")) {
                functionType = "void";
            }
            else if (words[1].equalsIgnoreCase("function")) {
                functionType = getFunctionType(strLine);
            }
            // properties
            //
            else {
                if (functionName.equalsIgnoreCase("get")) {
                    functionName = "get" 
                                    + words[3].substring(0, 1).toUpperCase()
                                    + words[3].substring(1);
                    m_vbFunctionName = words[3];
                    functionType = getPropertyType(strLine);
                }
                else {
                    functionName = "set" 
                                    + words[3].substring(0, 1).toUpperCase()
                                    + words[3].substring(1);
                    m_vbFunctionName = words[3];
                    functionType = "void";
                }
            }
        }
