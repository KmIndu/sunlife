if (line.contains("astrOnes(") || line.contains("astrTens(") || line.contains("astrGroup(")) {
    line = line.replaceAll("astrOnes\\(([^)]*)\\)", "astrOnes[$1]")
               .replaceAll("astrTens\\(([^)]*)\\)", "astrTens[$1]")
               .replaceAll("astrGroup\\(([^)]*)\\)", "astrGroup[$1]");
}




if (line.contains("astrOnes(") || line.contains("astrTens(") || line.contains("astrGroup(")) {
    line = line.replaceAll("(astrOnes\\()([^)]*)(\\))", "$1*$3")
               .replaceAll("(astrTens\\()([^)]*)(\\))", "$1*$3")
               .replaceAll("(astrGroup\\()([^)]*)(\\))", "$1*$3");
}



if (line.contains("astrOnes(") || line.contains("astrTens(") || line.contains("astrGroup(")) {
    line = line.replaceAll("astrOnes\\([^)]*\\)", "astrOnes[*]")
               .replaceAll("astrTens\\([^)]*\\)", "astrTens[*]")
               .replaceAll("astrGroup\\([^)]*\\)", "astrGroup[*]");
}





if(line.contains("astrOnes(") || line.contains("astrTens(") || line.contains("astrGroup("))
				{
					line=line.replace("astrOnes(*)", "astrOnes[*]")
							.replace("astrTens(*)", "astrTens[*]")
							.replace("astrGroup(*)", "astrGroup[*]");
				}


switch (strLast) {
        case  "A" To "I":
        intSign = 1;
        intLast = (int)(strLast) - 65 + 1;

        case  "J" To "R":
        intSign = -1;
        intLast = (int)(strLast) - 74 + 1;

        case  "{":
        intSign = 1;

        case  "}":
        intSign = -1;
