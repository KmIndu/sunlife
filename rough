private String translateConstDeclaration(String strLine) {
    // VB6: Const cstrCurrentProc As String = "cmdClose_Click"
    // Java: final String cstrCurrentProc = "cmdClose_Click";
    
    strLine = strLine.trim();
    String[] words = G.splitSpace(strLine);
    
    if (words.length < 5 || !words[0].equalsIgnoreCase("Const")) {
        return "*" + strLine + newline;  // Not a valid Const declaration
    }

    String identifier = words[1];
    String dataType = words[3];
    String constValue = words[5];

    if (dataType.isEmpty()) {
        // Determine data type if not explicitly specified
        // (You can use your existing logic for this)
    }

    String javaDeclaration = "final " + dataType + " " + identifier + " = " + constValue + ";";

    return javaDeclaration + newline;
}




private String translateCodeAux(String strLine, boolean inDeclaration) {

        // get out spaces even tabs
        //
        String workLine = G.ltrimTab(strLine).toLowerCase();

        //check for Const declaration
        if(inDeclaration && workLine.contains(" const "))
        {
            return translateConstDeclaration(strLine);
        }

        // dim
        if (workLine.length() > 4) {
            if (workLine.substring(0,4).equals("dim ")) {
                return translateDim(strLine);
            }
        }
        // in declaration
            // private and public can be modifiers of member variables
            // or events
            //
        if (inDeclaration) {
            if (workLine.length() > 8) {
                if (workLine.substring(0,8).equals("private ")) {
                    if (workLine.contains(" const ")) {
                        return translatePrivateConstMember(strLine);                        
                    }
                    else {
                        return translatePrivateMember(strLine);
                    }
                }
            }
            if (workLine.length() > 7) {
                if (workLine.substring(0,7).equals("public ")) {
                    if (workLine.contains(" const ")) {
                        return translatePublicConstMember(strLine);
                    }
                    else if (workLine.contains(" event ")) {
                        return translateEventDeclaration(strLine);
                    }
                    else {
                        return translatePublicMember(strLine);
                    }
                }
            }
        }
        // in function
            // private and public only can be modifier of functions
            //
        else {
            // a function declaration is like this
                // Public Function ShowPrintDialog(ByVal
            if (isFunctionDeclaration(workLine)) {
                strLine = translateFunctionDeclaration(strLine);
                checkEventHandler(strLine);
                strLine = translateFunctionReturnVariable(strLine);
                return strLine;
            }
            else {
                if (isEndFunction(workLine)) {
                    String onErrorLabelNotFound = checkOnErrorLabelFound();
                    String endOfPreviousOnError = getEndOfPreviousOnError();
                    String javaScript = m_translateToCairo ? ";" : "";
                    strLine = onErrorLabelNotFound
                                + endOfPreviousOnError
                                + getReturnLine()
                                + "}" + javaScript + newline;
                    m_function = null;
                    m_inFunction = false;
                    return strLine;
                }
                // function's body
                //
                else {
                    // types of sentences
                        // conditional block
                            // if, select case, elseif, else
                    if (isIfSentence(workLine))
                        return translateIfSentence(strLine);
                    if (isElseIfSentence(workLine))
                        return translateElseIfSentence(strLine);
                    else if (isElseSentence(workLine))
                        return translateElseSentence(strLine);
                    else if (isEndIfSentence(workLine))
                        return translateEndIfSentence(strLine);
                    else if (isSelectCaseSentence(workLine))
                        return translateSelectCaseSentence(strLine);
                    else if (isCaseSentence(workLine))
                        return translateCaseSentence(strLine);
                    else if (isEndSelectSentence(workLine))
                        return translateEndSelectSentence(strLine);
                    else if (isExitFunctionSentence(workLine))
                        return translateExitFunctionSentence(strLine);
                    else if (isDoWhileSentence(workLine))
                        return translateDoWhileSentence(strLine);
                    else if (isDoSentence(workLine))
                        return translateDoSentence(strLine);
                    else if (isWhileSentence(workLine))
                        return translateWhileSentence(strLine);
                    else if (isLoopUntilSentence(workLine))
                        return translateLoopUntilWhileSentence(strLine, true);
                    else if (isLoopWhileSentence(workLine))
                        return translateLoopUntilWhileSentence(strLine, false);
                    else if (isWendSentence(workLine))
                        return translateWendSentence(strLine);
                    else if (isLoopSentence(workLine))
                        return translateLoopSentence(strLine);
                    else if (isForSentence(workLine))
                        return translateForSentence(strLine);
                    else if (isNextSentence(workLine))
                        return translateNextSentence(strLine);
                    else if (isOnErrorSentence(workLine))
                        return translateOnErrorSentence(strLine);
                    else if (isOnErrorLabelSentence(workLine))
                        return translateOnErrorLabelSentence(strLine);
                    else
                        return translateSentenceWithNewLine(strLine);
                        // loop block
                            // for, while, do, loop

                        // asignment sentence
                            // set, =

                        // call sentence
                }
            }
        }
        return "*" + strLine + newline;
    }
