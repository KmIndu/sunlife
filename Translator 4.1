    private String replaceWithSentence(String strLine) {

        // debug
        /*
        if (strLine.toLowerCase().contains("With m_Groups.Item(i)".toLowerCase())) {
            int i = 0;
        }
         /* 
         */
        // debug
        
        if (G.beginLike(strLine, "with ")) {
            m_withDeclaration = true;

            // first we have to get the variable
            // and then the type of it
            //
            int startComment = getStartComment(strLine);
            String workLine = strLine;
            String comments = "";
            if (startComment >= 0) {
                comments =  "; //" + workLine.substring(startComment);
                workLine = workLine.substring(0, startComment-1);
            }
            int i = workLine.toLowerCase().indexOf("with");
            IdentifierInfo info = null;
            String packageName = "";
            String type = "";
            String parent = "";
            String parentJavaName = "";
            boolean inWith = false;
            workLine = workLine.substring(i + 5).trim();
            boolean startWithPeriod = false;
            if (workLine.charAt(0) == '.') {
                startWithPeriod = true;
                if (workLine.length() > 1) {
                    workLine = workLine.substring(1);
                }
                else {
                    workLine = "";
                }
            }
            // debug
            // String[] words = G.split3(workLine,".");
            String[] words = G.split4(workLine,".");
            // debug
            
            if (m_collWiths.size() > 0 && startWithPeriod) {
                parent = m_collWiths.get(m_collWiths.size()-1).dataType;
                parentJavaName = m_collWiths.get(m_collWiths.size()-1).getJavaName() + ".";
                inWith = true;
            }
            else {
                parent = "";
                parentJavaName = "";
            }
            for (i = 0; i < words.length; i++) {
                info = getIdentifierInfo(words[i], parent, !parent.isEmpty());
                if (info == null)
                    type = "";
                else if (info.isFunction)
                    type = info.function.getReturnType().dataType;
                else
                    type = info.variable.dataType;
                parent = type;
            }
            String parentWithCall = ""; // for example: "tBi." in "With tBI.bmiHeader"
            for (i = 0; i < words.length-1; i++) {
                parentWithCall += words[i] + ".";
            }

            String prefix = "";
            if (type.length() == 0) {
                type = "__TYPE_NOT_FOUND";
                prefix = "//*TODO:** can't found type for with block"
                            + newline
                            + getTabs()
                            + "//*"
                            + strLine
                            + newline
                            + getTabs();
            }

            Variable var = new Variable();
            var.setType(type);
            var.packageName = packageName;

            if (info == null) {
                var.setJavaName("w_" + var.dataType.substring(0, 1).toLowerCase()
                            + var.dataType.substring(1));

                if (inWith) {
                    if (m_translateToCairo) {
                        String varName = var.getJavaName();
                        if (var.dataType.equals("cIABMTabItem")) {
                            varName = varName.equals("w_add") ? "tab" : varName;
                        }
                        else {
                            varName = varName.equals("w_add") ? "elem" : varName;
                        }
                        varName = varName.equals("w_properties") ? "properties" : varName;                        
                        var.setJavaName(varName);
                        strLine = prefix
                                    + "var "
                                    + var.getJavaName()
                                    + " = "
                                    + parentJavaName
                                    + workLine
                                    + comments;                        
                    }
                    else {
                        strLine = prefix
                                    + var.dataType
                                    + " "
                                    + var.getJavaName()
                                    + " = "
                                    + parentJavaName
                                    + workLine
                                    + comments;
                    }
                }
                else {
                    if (m_translateToCairo) {
                        String varName = var.getJavaName();
                        if (var.dataType.equals("cIABMTabItem")) {
                            varName = varName.equals("w_add") ? "tab" : varName;
                        }
                        else {
                            varName = varName.equals("w_add") ? "elem" : varName;
                        }
                        varName = varName.equals("w_item") ? "property" : varName;
                        varName = varName.equals("w_properties") ? "properties" : varName;
                        var.setJavaName(varName);
                        strLine = prefix
                                    + "var "
                                    + varName
                                    + " = " + workLine
                                    + comments;
                    }
                    else {
                        strLine = prefix
                                    + var.dataType
                                    + " "
                                    + var.getJavaName()
                                    + " = " + workLine
                                    + comments;
                    }
                    m_inWith = true;
                }
            }
            else {
                if (info.isFunction) {
                    var.setJavaName("w_" + info.function.getVbName().substring(0, 1).toLowerCase()
                                + info.function.getVbName().substring(1));
                    String params = "";
                    int startParams = workLine.indexOf("(");
                    if (startParams >= 0) {
                        params = workLine.substring(startParams);
                    }
                    else {
                        params = "()";
                    }
                    if (inWith) {
                        if (m_translateToCairo) {
                            String varName = var.getJavaName();
                            if (var.dataType.equals("cIABMTabItem")) {
                                varName = varName.equals("w_add") ? "tab" : varName;
                            }
                            else {
                                varName = varName.equals("w_add") ? "elem" : varName;
                            }
                            if (!m_function.getJavaName().startsWith("pLoad")) {
                                varName = varName.equals("w_item") ? "property" : varName;
                            }
                            varName = varName.equals("w_properties") ? "properties" : varName;
                            var.setJavaName(varName);
                            strLine = prefix
                                        + "var "
                                        + varName
                                        + " = "
                                        + parentJavaName
                                        + info.function.getJavaName()
                                        + params
                                        + comments;
                        }
                        else {
                            strLine = prefix
                                        + var.dataType
                                        + " "
                                        + var.getJavaName()
                                        + " = "
                                        + parentJavaName
                                        + info.function.getJavaName()
                                        + params
                                        + comments;
                        }
                    }
                    else {
                        if (m_translateToCairo) {
                            String varName = var.getJavaName();
                            if (var.dataType.equals("cIABMTabItem")) {
                                varName = varName.equals("w_add") ? "tab" : varName;
                            }
                            else {
                                varName = varName.equals("w_add") ? "elem" : varName;
                            }                            
                            varName = varName.equals("w_item") ? "property" : varName;
                            varName = varName.equals("w_properties") ? "properties" : varName;
                            var.setJavaName(varName);                            
                            strLine = prefix
                                        + "var "
                                        + varName
                                        + " = "
                                        + parentWithCall
                                        + info.function.getJavaName()
                                        + params
                                        + comments;
                        }
                        else {
                            strLine = prefix
                                        + var.dataType
                                        + " "
                                        + var.getJavaName()
                                        + " = "
                                        + parentWithCall
                                        + info.function.getJavaName()
                                        + params
                                        + comments;
                        }
                        m_inWith = true;
                    }
                }
                else {
                    String arrayIndex = "";
                    if (info.variable.isArray) {
                        int startArrayIndex = workLine.indexOf("(");
                        if (startArrayIndex >= 0) {
                            arrayIndex = workLine.substring(startArrayIndex).replace("(","[").replace(")","]");
                        }
                    }
                    var.setJavaName(parentWithCall + info.variable.getJavaName() + arrayIndex);
                    strLine = ""; //"// " + strLine;
                    m_inWith = true;
                }
            }
            m_collWiths.add(var);
            m_functionVariables.add(var);
            
        }
        else {
            m_withDeclaration = false;
        }
        return strLine;
    }

    private String replaceRaiseEvent(String strLine) {
        if (G.beginLike(strLine, "RaiseEvent ")) {
            int i = strLine.toLowerCase().indexOf("raiseevent ") + 11;
            String call = strLine.substring(i);
            call = call.substring(0, 1).toLowerCase() + call.substring(1);
            if (!G.endLike(call, ")"))
                call += "()";
            String className = m_javaClassName + C_INTERFACE_POSTIFX;
            strLine = "Iterator listeners = m_listeners.iterator();"
                    + newline + getTabs() 
                    + "while(listeners.hasNext()) {"
                    + newline + getTabs() 
                    + "    ((" + className + ")listeners.next())." + call + ";"
                    + newline + getTabs() 
                    + "}";
        }
        return strLine;
    }

    private String replaceNewSentence(String strLine) {
        final String C_IDENTIFIER_FIRST_CHAR = "abcdefghijklmnopqrstuvwyxz";
        boolean newFound = false;
        String[] words = G.split2(strLine, "\t (),");
        strLine = "";
        for (int i = 0; i < words.length; i++) {
            if (words[i].equalsIgnoreCase("new")) {
                words[i] = "new";
                newFound = true;
            }
            else if (newFound) {
                if (C_IDENTIFIER_FIRST_CHAR.contains(words[i].substring(0,1).toLowerCase())) {
                    words[i] += "()";
                    newFound = false;
                }
                else if (!words[i].trim().isEmpty()) {
                    newFound = false;
                }
            }
            strLine += words[i];
        }
        return strLine;
    }

    private String replaceEndWithSentence(String strLine) {
        boolean isEndWith = false;
        if (strLine.equalsIgnoreCase("end with")) {
            isEndWith = true;
        }
        if (G.beginLike(strLine, "end with ")) {
            isEndWith = true;
        }
        m_endWithDeclaration = isEndWith;
        if (isEndWith) {
            String withName = "";
            if (m_collWiths.size() > 0) {
                withName = m_collWiths.get(m_collWiths.size()-1).getJavaName();
                m_collWiths.remove(m_collWiths.size()-1);
            }
            m_inWith = m_collWiths.size() > 0;
            return ""; //"// {end with: " + withName + "}";
        }
        else
            return strLine;
    }

    private IdentifierInfo getIdentifierInfo(String identifier, String className, boolean isField) {
        // - get the object from this class (member variables)
        // if the object is not found then
        // - get the object from the database (public variables)
        //      -- first objects in this package then objects in
        //         other packages in the order set in the vbp's
        //         reference list

        // debug
        /*
        if (G.beginLike(identifier.trim(),"MSG_DOC_INFO")) {
            int i = 9999;
        }
         * 
         */
            
        IdentifierInfo info = null;
        Variable var = getVariable(identifier, className, isField);
        if (var != null) {
            info = new IdentifierInfo();
            info.isFunction = false;
            info.variable = var;
        }
        else {
            Function function = getFunction(identifier, className);
            if (function != null) {
                info = new IdentifierInfo();
                info.isFunction = true;
                info.function = function;
            
                if (parametersInCall(identifier)) {
                    m_classObject.setPackageName(function.getReturnType().packageName);
                    m_classObject.setVbName(function.getReturnType().dataType);
                    m_classObject.setJavaName("");
                    m_classObject.getClassIdFromClassName();
                    String itemDataType = m_classObject.getDataTypeOfCollectionItem();
                    if (!itemDataType.isEmpty() && identifier.startsWith("Properties")) {
                        Function fun = new Function();
                        fun.setJavaClassName(function.getReturnType().dataType);
                        fun.getReturnType().setJavaNameWithoutValidate("getProperties().item");
                        fun.getReturnType().setVbName("Item");
                        fun.getReturnType().setType(itemDataType);
                        info.function = fun;                    
                    }
                }
            }
        }
        return info;
    }
    
    private Boolean parametersInCall(String call) {
        if (call.contains("(")) {
            if (call.contains(")")) {
                int i = call.indexOf("(");
                int j = call.indexOf(")");
                if(!call.substring(i, j).trim().isEmpty()) {
                    return true;
                }
            }
        }
        return false;
    }
