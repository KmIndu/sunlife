 private String translateFunctionCall(String strLine) {

        // we will process with later
        //
        if (G.beginLike(strLine,"With ")) {
            return strLine;
        }

        // we will process raiseevent later
        //
        if (G.beginLike(strLine,"RaiseEvent ")) {
            return strLine;
        }

        if (G.beginLike(strLine,"Call ")) {
            strLine = strLine.substring(5);
        }

        // comments
        //
        if (G.beginLike(strLine,"// ")) {
            return strLine;
        }

        if (G.beginLike(strLine,"/* ")) {
            return strLine;
        }
        
        int startComment = getStartComment(strLine);
        String workLine = strLine;
        String comments = "";
        if (startComment >= 0) {
            comments =  "//" + workLine.substring(startComment);
            workLine = workLine.substring(0, startComment-1);
        }
        String[] words = getWordsFromSentence(workLine);
        if (words.length >= 2) {
            if (!words[0].equals("return")) {
                if (!words[0].equals("(") 
                        && !words[1].equals("(") 
                        && !words[2].equals("(")) {
                    if (!C_SEPARARTORS.contains("_" + words[2] + "_")) {
                        if (!isReservedWord(words[0])) {                                
                            strLine = words[0] + "(";
                            String params = "";
                            for (int i = 1; i < words.length; i++) {
                                params += words[i];
                            }
                            strLine += params.trim() + ")" + comments;
                        }
                    }
                }
                // special case when in vb we have a SUB call
                // with only one parameter sourronded by parentheses
                // like Col.Remove (Ctrl.Key)
                //
                else if (words[1].equals(" ") && words[2].equals("(")) {
                    if (!C_SEPARARTORS.contains("_" + words[2] + "_")) {
                        if (!isReservedWord(words[0])) {
                            strLine = words[0];
                            String params = "";
                            for (int i = 2; i < words.length; i++) {
                                params += words[i];
                            }
                            strLine += params.trim() + comments;
                        }
                    }
                }
            }
        }
        return strLine;
    }

    private boolean isReservedWord(String word) {
        if (m_translateToJava)
            return (C_RESERVED_WORDS.contains("_" + word.toLowerCase() + "_"));
        else {
            boolean rtn = C_RESERVED_WORDS.contains("_" + word.toLowerCase() + "_");
            if (!rtn)
                rtn = word.equals("Length");
            return rtn;
        }
    }

    private String replaceMemberVariables(String strLine) {
        boolean found = false;
        String rtn = "";
        String[] words = getWordsFromSentence(strLine);

        for (int i = 0; i < words.length; i++) {
            found = false;
            for (int j = 0; j < m_memberVariables.size(); j++) {
                /*System.out.println(m_memberVariables.get(j)
                        + C_TAB + words[i]
                        );*/
                if (words[i].equalsIgnoreCase(m_memberVariables.get(j).getJavaName())) {
                    rtn += m_memberVariables.get(j).getJavaName();
                    found = true;
                    break;
                }
            }
            if (!found) {
                rtn += words[i];
            }
        }
        return rtn;
    }

    private String replaceFunctionVariables(String strLine) {
        boolean found = false;
        String rtn = "";
        String[] words = getWordsFromSentence(strLine);

        for (int i = 0; i < words.length; i++) {
            found = false;
            for (int j = 0; j < m_functionVariables.size(); j++) {
                /*System.out.println(m_functionVariables.get(j)
                        + C_TAB + words[i]
                        );*/
                if (words[i].equalsIgnoreCase(m_functionVariables.get(j).getJavaName())) {
                    rtn += m_functionVariables.get(j).getJavaName();
                    found = true;
                    break;
                }
            }
            if (!found) {
                rtn += words[i];
            }
        }
        return rtn;
    }

    private String putParentheses(String strLine) {
        int openParentheses = 0;
        String rtn = "";
        String source = "";

        String[] words = G.split(strLine);

        for (int i = 0; i < words.length; i++) {

            if (words[i].equals("(")) {
                if (openParentheses == 0) {
                    if (!source.isEmpty()) {
                        rtn += putParenthesesAux(source);
                        source = "";
                    }
                }
                else {
                    source += words[i];
                }
                openParentheses++;
            }
            else if (words[i].equals(")")) {
                openParentheses--;
                if (openParentheses == 0) {
                    rtn += "(" + putParentheses(source) + ")";
                    source = "";
                }
                else {
                    source += words[i];
                }
            }
            else {
                source += words[i];
            }
        }
        if (!source.isEmpty()) {
            rtn += putParenthesesAux(source);
        }
        return rtn;
    }

    private String putParenthesesAux(String strLine) {
        String rtn = "";
        String source = "";
        String[] words = G.split(strLine, ",");
        for (int i = 0; i < words.length; i++) {
            if (words[i].equals(",")) {
                if (!source.isEmpty()) {
                    rtn += putParenthesesAux2(source) + ",";
                    source = "";
                }
                else
                    rtn += ",";
            }
            else {
                source += words[i];
            }
        }
        if (!source.isEmpty()) {
            rtn += putParenthesesAux2(source);
        }
        return rtn;
    }
    
    private String putParenthesesAux2(String strLine) {
        if (strLine.contains("&")) {
            String rtn = "";
            String[] words = G.split(strLine, "&");
            for (int i = 0; i < words.length; i++) {
                if (words[i].trim().isEmpty()) {
                    rtn += words[i];
                }
                else if (!"+-*/".contains(words[i].trim().substring(0, 1))) {
                    if(containsMathOperators(words[i])) {
                        if (words[i].startsWith(" "))
                            rtn += " ";
                        rtn += "(" + words[i].trim() + ")";
                        if (words[i].endsWith(" "))
                            rtn += " ";
                    }
                    else {
                        rtn += words[i];
                    }
                }
            }
            return rtn;
        }
        else
            return strLine;
    }
    private boolean containsMathOperators(String strLine) {
        strLine = removeLiterals(strLine);
        if(strLine.contains("+")) {
            return true;
        }
        else if(strLine.contains("-")) {
            return true;
        }
        else if(strLine.contains("*")) {
            return true;
        }
        else if(strLine.contains("/")) {
            return true;
        }
        else
            return false;

    }
    private String removeLiterals(String strLine) {
        boolean openLiterals = false;
        String rtn = "";
        for (int i = 0; i < strLine.length(); i++) {
            String c = strLine.substring(0, 1);
            if (c.equals("\""))
                openLiterals = !openLiterals;
            else if (!openLiterals) 
                rtn += c;
        }
        return rtn;
    }

    private String replaceAmpersand(String strLine) {
        if (strLine.contains("&")) {
            // we need to put parentheses to enforce
            // operator precedence
            //
            strLine = putParentheses(strLine);

            return replaceAmpersandAux(strLine);
        }
        else {
            return strLine;
        }
    }

    private String replaceAmpersandAux(String strLine) {
        int openParentheses = 0;
        boolean ampFound = false;
        String rtn = "";
        String source = "";
        String functionCall = "";
        String[] words = G.split(strLine);

        for (int i = 0; i < words.length; i++) {

            // all the code between parentheses is
            // saved in the source variable and then 
            // replaceAmpersandAux is called pasing 
            // source to process &
            //
            if (words[i].equals("(")) {
                openParentheses++;
            }
            else if (words[i].equals(")")) {
                openParentheses--;
                // if we faund the closing parentheses
                //
                if (openParentheses == 0) {
                    // if before the parent
                    //
                    if (ampFound) {
                        rtn += getCastToString(functionCall 
                                + "(" + replaceAmpersandAux(source) + ")");
                        ampFound = false;
                    }
                    else {
                        if (i < words.length-1) {
                            // if the next is & we have something like this:
                            // (i+2)& " row"
                            
                            // we need to cast to string source
                            //
                            if (words[i+1].equals("&")) {
                                rtn += getCastToString(functionCall 
                                        + "(" + replaceAmpersandAux(source) + ")");
                            }
                            else {
                                // if the next is & we have something like this:
                                // (i+2) & " row"
                                // we need to cast to string source
                                //
                                if (i < words.length-2) {
                                    if (words[i+2].equals("&")) {
                                        rtn += getCastToString(functionCall 
                                                + "(" + replaceAmpersandAux(source) + ")");
                                    }
                                    // we only need to call replaceAmpersandAux
                                    // to translate source
                                    //
                                    else {
                                        rtn += functionCall + "(" 
                                                + replaceAmpersandAux(source) + ")";
                                    }
                                }
                                // we only need to call replaceAmpersandAux
                                // to translate source
                                //
                                else {
                                    rtn += functionCall + "(" 
                                            + replaceAmpersandAux(source) + ")";
                                }
                            }
                        }
                        // we only need to call replaceAmpersandAux
                        // to translate source because there is no more words
                        // to translate
                        //
                        else {
                            rtn += functionCall + "(" 
                                    + replaceAmpersandAux(source) + ")";
                        }
                        //---------------------------------------------------
                         
                    }
                    source = "";
                    functionCall = "";
                }
            }
            // we need to put all the code sourronded by parantheses in source
            //
            else if (openParentheses > 0) {
                source += words[i];
            }
            else {
                // replace & with + and set the flag on
                // to process the next word
                //
                if (words[i].equals("&")) {
                    rtn += "+";
                    ampFound = true;
                }
                else {
                    if (ampFound) {
                        if (words[i].equals(" "))
                            rtn += " ";
                        else {
                            if (i+1 < words.length) {
                                if (words[i+1].equals("(")) {
                                    functionCall = words[i];
                                }
                                else {
                                    // we need to cast to string this word
                                    // because the previous was an &
                                    //
                                    rtn += getCastToString(words[i]);
                                    ampFound = false;                                
                                }
                            }
                            else {
                                // we need to cast to string this word
                                // because the previous was an &
                                //
                                rtn += getCastToString(words[i]);
                                ampFound = false;
                            }
                        }
                    }
                    else {
                        // if there is more words after this
                        //
                        if (i < words.length-1) {
                            // if the next word is an &
                            //
                            if (words[i+1].equals("&")) {
                                // we need to cast to string this word
                                //
                                rtn += getCastToString(words[i]);
                            }
                            // if the next word is an open parentheses
                            // we save this word in source to 
                            // process this when all the code sourronded
                            // by parentheses will be translated
                            //
                            else if (words[i+1].equals("(")){
                                functionCall = words[i]; 
                            }
                            else {
                                if (i < words.length-2) {
                                    // we need to cast to string this word
                                    //
                                    if (words[i+2].equals("&")) {
                                        rtn += getCastToString(words[i]);
                                    }
                                    else {
                                        rtn += words[i];
                                    }
                                }
                                else {
                                    rtn += words[i];
                                }
                            }
                        }
                        else {
                            rtn += words[i];
                        }
                    }
                }
            }
        }
        return rtn;
    }

    private String translateVbOperators(String strLine) {
        boolean literalFlag = false;
        boolean previousWasNot = false;
        boolean previousWasParentheses = false;
        boolean isFirstWord = true;
        String javaSentence = "";
        String comments = "";

        int startComment = getStartComment(strLine);
        if (startComment >= 0) {
            comments =  "//" + strLine.substring(startComment);
            strLine = strLine.substring(0, startComment-1);
        }

        String[] words = G.splitSpace(strLine);//strLine.split("\\s+");
        
        // we don't have to replace the first = in an asignment statetment
        //
        int k = 0;
        if (words.length > 2) {
            if (words[1].equals("="))
                k = 2;
        }
        
        for (int i = 0; i < words.length; i++) {
            // we have to translate "or", "and", and "not"

            for (int j = 0; j < words[i].length(); j++) {
                if (words[i].charAt(j) == '"') {
                    literalFlag = !literalFlag;
                }
            }

            if (literalFlag) {
                javaSentence += " " + words[i];
            }
            else {
                if (i > k) {
                    if (words[i].equalsIgnoreCase("and")) {
                        javaSentence += " &&";
                    }
                    else if (words[i].equalsIgnoreCase(")and")) {
                        javaSentence += ") &&";
                    }
                    else if (words[i].equalsIgnoreCase("and(")) {
                        javaSentence += " && (";
                    }
                    else if (words[i].equalsIgnoreCase("or")) {
                        javaSentence += " ||";
                    }
                    else if (words[i].equalsIgnoreCase(")or")) {
                        javaSentence += ") ||";
                    }
                    else if (words[i].equalsIgnoreCase("or(")) {
                        javaSentence += " || (";
                    }
                    else if (words[i].equalsIgnoreCase("<>")) {
                        javaSentence += " !=";
                    }
                    else if (words[i].equalsIgnoreCase("not")) {
                        javaSentence += " !";
                    }
                    else if (words[i].equals("(")) {
                        if (previousWasNot)
                            javaSentence += "(";
                        else
                            javaSentence += " (";
                    }
                    else if (words[i].equals(")")) {
                        javaSentence += ")";
                    }
                    else if (words[i].equalsIgnoreCase("=")) {
                        javaSentence += " ==";
                    }
                    else {
                        if (isFirstWord) {
                            javaSentence += words[i];
                            isFirstWord = false;
                        }
                        else if (previousWasNot || previousWasParentheses) {
                            javaSentence += words[i];
                        }
                        else {
                            javaSentence += " " + words[i];
                        }
                    }

                    // flags
                    //
                    if (words[i].equalsIgnoreCase("not")) {
                        previousWasNot = true;
                    }
                    else {
                        previousWasNot = false;
                    }

                    if (words[i].charAt(words[i].length()-1) == '(') {
                        previousWasParentheses = true;
                    }
                    else {
                        previousWasParentheses = false;
                    }
                }
                else {
                    if (isFirstWord) {
                        javaSentence += words[i];
                        isFirstWord = false;
                    }
                    else {
                        javaSentence += " " + words[i];
                    }
                }
            }
        }
        return javaSentence + comments + newline;
    }
    
    private String replaceStringComparison(String strLine, String operator) {
        boolean equalsFound = false;
        boolean innerEqualFound = false;
        int openParentheses = 0;
        String innerParentheses = "";
        String firstOperand = "";
        String secondOperand = "";
        String rtn = "";
        String[] words = getWordsFromSentence(strLine);

        // first we have to serch for the operands
        //
        for (int i = 0; i < words.length; i++) {
            if (equalsFound) {
                // if we are sourronded by parentheses
                //
                if (openParentheses > 0) {
                    if (words[i].equals(")")) {
                        openParentheses--;
                        if (openParentheses == 0) {
                            if (innerEqualFound) {
                                innerEqualFound = false;
                                innerParentheses = replaceStringComparison(
                                                        innerParentheses,
                                                        operator);
                            }
                            secondOperand += "(" + G.ltrim(innerParentheses) + ")";
                            innerParentheses = "";
                        }
                        else
                            innerParentheses += ")";
                    }
                    else {
                        if (words[i].equals("(")) {
                            openParentheses++;
                        } else if (words[i].equals(operator)) {
                            innerEqualFound = true;
                        }
                        innerParentheses += words[i];
                    }
                }
                // there isn't any open parentheses
                //
                else {
                    if (words[i].equals("(")) {
                        openParentheses = 1;
                        innerParentheses = "";
                    }
                    else if (words[i].equals("&&")) {
                        rtn += processEqualsSentence(
                                    firstOperand,
                                    secondOperand,
                                    operator) + " &&";
                        equalsFound = false;
                        firstOperand = "";
                        secondOperand = "";
                    }
                    else if (words[i].equals("||")) {
                        rtn += processEqualsSentence(
                                    firstOperand,
                                    secondOperand,
                                    operator) + " ||";
                        equalsFound = false;
                        firstOperand = "";
                        secondOperand = "";
                    }
                    else
                        secondOperand += words[i];
                }
            }
            else {
                // if we are sourronded by parentheses
                //
                if (openParentheses > 0) {
                    if (words[i].equals(")")) {
                        openParentheses--;
                        if (openParentheses == 0) {
                            if (innerEqualFound) {
                                innerEqualFound = false;
                                innerParentheses = replaceStringComparison(
                                                        innerParentheses,
                                                        operator);
                            }
                            firstOperand += "(" + G.ltrim(innerParentheses) + ")";
                            innerParentheses = "";
                        }
                        else
                            innerParentheses += ")";
                    }
                    else {
                        if (words[i].equals("(")) {
                            openParentheses++;
                        } else if (words[i].equals(operator)) {
                            innerEqualFound = true;
                        }
                        innerParentheses += words[i];
                    }
                }

                // there isn't any open parentheses
                //
                else {
                    // if we found an left (open) parentheses
                    //
                    if (words[i].equals("(")) {
                        openParentheses = 1;
                        innerParentheses = "";
                    }
                    else if (words[i].equals(operator)) {
                        equalsFound = true;
                        innerParentheses = "";
                    }
                    else if (words[i].equals("&&")) {
                        rtn += firstOperand + "&&";
                        firstOperand = "";
                    }
                    else if (words[i].equals("||")) {
                        rtn += firstOperand + "||";
                        firstOperand = "";
                    }
                    else if (words[i].equals("=")) {
                        rtn += firstOperand + "=";
                        firstOperand = "";
                    }
                    else
                        firstOperand += words[i];
                }
            }
        }

        if (!firstOperand.isEmpty()) {
            if (!secondOperand.isEmpty())
                rtn += processEqualsSentence(
                            firstOperand,
                            secondOperand,
                            operator);
            else
                rtn += firstOperand;
        }
        return rtn;
    }
    
    private String replaceStringCompareNullString(String expression) {
        return expression.replace(".equals(\"\")", ".isEmpty()");
    }

    private String replaceTypeOfSentence(String expression) {

        expression = G.ltrimTab(expression);
        
        if (containsTypeOf(expression)) {

            boolean typeOfFound = false;
            boolean firstSpaceFound = false;
            boolean secondSpaceFound = false;
            int openParentheses = 0;
            String[] words = G.split(expression);
            String params = "";
            expression = "";           

            for (int i = 0; i < words.length; i++) {
                if (typeOfFound) {
                    if (words[i].equals("(")) {
                        openParentheses++;
                        params += words[i];
                    }
                    // look for a close parentheses without an open parentheses
                    else if (words[i].equals(")")) {
                        openParentheses--;
                        params += words[i];
                    }
                    else if (openParentheses == 0) {
                        if (firstSpaceFound) {
                            if (secondSpaceFound) {
                                if (words[i].equalsIgnoreCase("is")) {
                                    if (m_translateToJava)
                                        expression += params + " instanceOf ";
                                    else
                                        expression += params + ".GetType() ==";
                                    typeOfFound = false;
                                    params = "";
                                }
                                else {
                                    params = params.trim() + words[i];
                                }
                            }
                            else if (words[i].equals(" ")) {
                                secondSpaceFound = true;
                            }
                            else {
                                params += words[i];
                            }
                        }
                        else if (words[i].equals(" ")) {
                            firstSpaceFound = true;
                        }
                        else {
                            params += words[i];
                        }
                    }
                    else {
                        params += words[i];
                    }
                }
                else {
                    if (words[i].equalsIgnoreCase("typeof")) {
                        typeOfFound = true;
                    }
                    else {
                        expression += words[i];
                    }
                }
            }
        }
        return expression.trim();
    }
    
    private String replaceMidSentence(String expression) {

        expression = G.ltrimTab(expression);

        if (containsMid(expression)) {

            boolean midFound = false;
            int openParentheses = 0;
            String[] words = G.split(expression);
            String params = "";
            expression = "";

            for (int i = 0; i < words.length; i++) {
                if (midFound) {
                    if (words[i].equals("(")) {
                        openParentheses++;
                        if (openParentheses > 1) {
                            params += words[i];
                        }
                    }
                    // look for a close parentheses without an open parentheses
                    else if (words[i].equals(")")) {
                        openParentheses--;
                        if (openParentheses == 0) {
                            if (containsMid(params)) {
                                params = replaceMidSentence(params);
                            }
                            String[] vparams = G.split(params);
                            String identifier = "";
                            String start = "";
                            String end = "";

                            int colons = 0;
                            identifier = "";
                            for (int t = 0; t < vparams.length; t++) {
                                if (vparams[t].equals(",")) {
                                    colons++;
                                }
                                else {

                                    if (colons == 0) {
                                        identifier += vparams[t];
                                    }
                                    else if (colons == 1) {
                                        start += vparams[t];
                                    }
                                    else if (colons == 2) {
                                        end += vparams[t];
                                    }
                                    else {
                                        showError("Unexpected colon found in Mid function's params: " + params);
                                    }
                                }
                            }
                            // identifier can be a complex expresion
                            // like ' "an string plus" + a_var '
                            //
                            if (G.contains(identifier, " ")) {
                                identifier = "(" + identifier + ")";
                            }
                            if (m_translateToJava)
                                expression += identifier + ".substring(" + start.trim();
                            else
                                expression += identifier + ".Substring(" + start.trim();
                            if (!end.isEmpty()) {
                                expression += ", " + end.trim() + ")";
                            }
                            else {
                                expression += ")";
                            }
                            midFound = false;
                            params = "";
                        }
                        else {
                            params = params.trim() + words[i];
                        }
                    }
                    else {
                        params += words[i];
                    }
                }
                else {
                    if (words[i].equalsIgnoreCase("mid")) {
                        midFound = true;
                    }
                    else if (words[i].equalsIgnoreCase("mid$")) {
                        midFound = true;
                    }
                    else if (G.beginLike(words[i],"mid(")) {
                        expression += replaceMidSentence(words[i]);
                    }
                    else if (G.beginLike(words[i],"mid$(")) {
                        expression += replaceMidSentence(words[i]);
                    }
                    else if (containsMid(words[i])) {
                        expression += replaceMidSentence(words[i]);
                    }
                    else {
                        expression += words[i];
                    }
                }
            }
        }
        return expression.trim();
    }

    private String replaceLeftSentence(String expression) {

        expression = G.ltrimTab(expression);

        if (containsLeft(expression)) {

            boolean leftFound = false;
            int openParentheses = 0;
            String[] words = G.split(expression);
            String params = "";
            expression = "";

            for (int i = 0; i < words.length; i++) {
                if (leftFound) {
                    if (words[i].equals("(")) {
                        openParentheses++;
                        if (openParentheses > 1) {
                            params += words[i];
                        }
                    }
                    // look for a close parentheses without an open parentheses
                    else if (words[i].equals(")")) {
                        openParentheses--;
                        if (openParentheses == 0) {
                            if (containsLeft(params)) {
                                params = replaceLeftSentence(params);
                            }
                            String[] vparams = G.split(params);
                            String identifier = "";
                            String length = "";

                            int colons = 0;
                            identifier = "";
                            for (int t = 0; t < vparams.length; t++) {
                                if (vparams[t].equals(",")) {
                                    colons++;
                                }
                                else {

                                    if (colons == 0) {
                                        identifier += vparams[t];
                                    }
                                    else if (colons == 1) {
                                        length += vparams[t];
                                    }
                                    else {
                                        showError("Unexpected colon found in Left function's params: " + params);
                                    }
                                }
                            }
                            // identifier can be a complex expresion
                            // like ' "an string plus" + a_var '
                            //
                            if (G.contains(identifier, " ")) {
                                identifier = "(" + identifier + ")";
                            }
                            if (m_translateToJava)
                                expression += identifier
                                                + ".substring(0, " + length.trim()+ ")";
                            else
                                expression += identifier
                                                + ".Substring(0, " + length.trim()+ ")";
                            leftFound = false;
                            params = "";
                        }
                        else {
                            params = params.trim() + words[i];
                        }
                    }
                    else {
                        params += words[i];
                    }
                }
                else {
                    if (words[i].equalsIgnoreCase("left")) {
                        leftFound = true;
                    }
                    else if (words[i].equalsIgnoreCase("left$")) {
                        leftFound = true;
                    }
                    else if (G.beginLike(words[i],"left(")) {
                        expression += replaceLeftSentence(words[i]);
                    }
                    else if (G.beginLike(words[i],"left$(")) {
                        expression += replaceLeftSentence(words[i]);
                    }
                    else if (containsLeft(words[i])) {
                        expression += replaceLeftSentence(words[i]);
                    }
                    else {
                        expression += words[i];
                    }
                }
            }
        }
        return expression.trim();
    }

