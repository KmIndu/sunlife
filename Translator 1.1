public String getImportSection() {
        String rtn = "";

        if (m_addDateAuxFunction || m_addParseDateAuxFunction) {
            addToImportList("import java.text.DateFormat;");
            addToImportList("import java.text.ParseException;");
            addToImportList("import java.text.SimpleDateFormat;");
            addToImportList("import java.text.Date;");
        }

        if (m_addIsNumericAuxFunction) {
            addToImportList("import java.text.ParseException;");
        }

        for (int i = 0; i < m_importCount; i++) {
            rtn += m_imports[i] + newline;
        }

        if (!rtn.isEmpty())
            rtn = newline + rtn + newline;

        return rtn;
    }

    private void addToImportList(String reference) {
        for (int i = 0; i < m_importCount; i++) {
            if (m_imports[i].equals(reference)) {
                return;
            }
        }
        m_importCount++;
        m_imports[m_importCount-1] = reference;
    }

    public String getEventListenerCollection() {
        if (m_raiseEvents) {
            String className = m_javaClassName + C_INTERFACE_POSTIFX;
            String rtn = newline + "    // event listener collection"
                            + newline + "    //" + newline
                            + "    private ArrayList<"
                            + className
                            + "> m_listeners = new ArrayList<"
                            + className
                            + ">();" + newline + newline
                            + "    public synchronized void addListener("
                            + className
                            + " l) {" + newline
                            + "        m_listeners.add(l);" + newline
                            + "    }" + newline + newline
                            + "    public synchronized void removeListener("
                            + className
                            + " l) {" + newline
                            + "        m_listeners.remove(l);" + newline
                            + "    }" + newline;
            return rtn;
        }
        else
            return "";
    }
    
    public String getClosingBracket() {
        if (m_translateToCairo) {
            return addJavaScriptFooter();
        }
        else{
            return "}";
        }            
    }

    public String getAuxFunctions() {
        String rtn = "";

        if (m_addDateAuxFunction) {
            rtn += newline + getDateAuxFunction();
        }

        if (m_addParseDateAuxFunction) {
            rtn += newline + getParseDateAuxFunction();
        }

        if (m_addIsNumericAuxFunction) {
            rtn += newline + getIsNumericAuxFunction();
        }

        if (m_addRedimAuxFunction) {
            rtn += newline + getRedimAuxFunction();
        }

        if (m_addRedimPreserveAuxFunction) {
            rtn += newline + getRedimPreserveAuxFunction();
        }

        return rtn;
    }

    public String getGImportSection() {
        String rtn = "";
        m_importCount = 0;

        if (m_addDateAuxFunctionToG || m_addParseDateAuxFunctionToG) {
            addToImportList("import java.text.DateFormat;");
            addToImportList("import java.text.ParseException;");
            addToImportList("import java.text.SimpleDateFormat;");
            addToImportList("import java.text.Date;");
        }

        if (m_addIsNumericAuxFunctionToG) {
            addToImportList("import java.text.ParseException;");
        }

        for (int i = 0; i < m_importCount; i++) {
            rtn += m_imports[i] + newline;
        }

        if (!rtn.isEmpty())
            rtn = newline + rtn + newline;

        return rtn;
    }

    public String getGClass() {
        if (m_UseGAuxFunctions) {

            String rtn = "// Class G : Auxiliary functions" 
                            + newline + "//" + newline + newline
                            + getGImportSection()
                            + "public class G {" + newline;

            if (m_addDateAuxFunctionToG) {
                rtn += newline + getDateAuxFunction();
            }

            if (m_addParseDateAuxFunctionToG) {
                rtn += newline + getParseDateAuxFunction();
            }

            if (m_addIsNumericAuxFunctionToG) {
                rtn += newline + getIsNumericAuxFunction();
            }

            if (m_addRedimAuxFunctionToG) {
                rtn += newline + getRedimAuxFunction();
            }

            if (m_addRedimPreserveAuxFunctionToG) {
                rtn += newline + getRedimPreserveAuxFunction();
            }

            rtn += newline + "}";

            return rtn;

        }
        else
            return "";

    }

    private String getDateAuxFunction() {
        return
                    "    private static Date getDateFromString(String date) {" + newline +
                    "        DateFormat df = new SimpleDateFormat(\"MM/dd/yyyy\");" + newline +
                    "        date = date.replace(\"#\",\"\");" + newline +
                    "        Date dateValue = null;" + newline +
                    "        try {" + newline +
                    "            dateValue = df.parse(date);" + newline +
                    "        } catch (ParseException ex) {/* it can not be possible*/}" + newline +
                    "        return dateValue;" + newline +
                    "    }" + newline;

    }

    private String getParseDateAuxFunction() {
        return
                    "    private static Date parseDate(String date) throws ParseException {" + newline +
                    "        DateFormat df = new SimpleDateFormat(\"MM/dd/yyyy\");" + newline +
                    "        return df.parse(date);" + newline +
                    "    }" + newline;
    }

    private String getIsNumericAuxFunction() {
        return
                    "    private static boolean isNumeric(String number) {" + newline +
                    "        try {" + newline +
                    "            Double.parseDouble(number);" + newline +
                    "            return true;" + newline +
                    "        } " + newline +
                    "        catch (ParseException ex) {" + newline +
                    "            return false;" + newline +
                    "        }" + newline +
                    "    }" + newline;
    }

    private String getRedimAuxFunction() {
        return getRedimAuxFunctionForType("String");
    }

    private String getRedimAuxFunctionForType(String type) {
        return
                    "    public static " + type + "[] redim(" + type + "[] source, int size) {" + newline +
                    "        if (size == 0) {" + newline +
                    "            return null;" + newline +
                    "        }" + newline +
                    "        else {" + newline +
                    "            return new " + type + "[size];" + newline +
                    "        }" + newline +
                    "    }" + newline;
    }

    private String getRedimPreserveAuxFunction() {
        return getRedimPreserveAuxFunctionForType("String");
    }

    private String getRedimPreserveAuxFunctionForType(String type) {
        return
                    "    public static " + type + "[] redimPreserve(" + type + "[] source, int size) {" + newline +
                    "        if (size == 0) {" + newline +
                    "            return null;" + newline +
                    "        }" + newline +
                    "        else {" + newline +
                    "            " + type + "[] tmp = new " + type + "[size];" + newline +
                    "            if (source != null) {" + newline +
                    "                for (int i = 0; i < Math.min(source.length, tmp.length); i++) {" + newline +
                    "                    tmp[i] = source[i];" + newline +
                    "                }" + newline +
                    "            }" + newline +
                    "            return tmp;" + newline +
                    "        }" + newline +
                    "    }" + newline;
    }

    private void parseLine(String strLine) {
        // two kind of sentences
            // In function
            // Declarations

        // functions
            // Function
            // Sub
            // Property

        // if the sentence is split in two or more lines
        // we need to join the lines before translate it
        //
        if (isSentenceComplete(strLine)) {

            strLine = m_strBuffer + G.ltrimTab(strLine);
            m_strBuffer = "";

            strLine = removeLineNumbers(strLine);

            if (isEmptyLine(strLine)) {
                return;
            }
            if (isVbSpecificCode(strLine)) {
                return;
            }
            if (isComment(strLine)) {
                return;
            }
            if (isDeclareApi(strLine)) {
                return;
            }
            else if (isBeginOfType(strLine)) {
                m_inType = true;
                return;
            }
            else if (isEndOfType(strLine)) {
                return;
            }
            if (m_inType) {
                return;
            }
            else if (isBeginOfEnum(strLine)) {
                m_inEnum = true;
                return;
            }
            else if (isEndOfEnum(strLine)) {
                return;
            }
            else if (m_inEnum) {
                return;
            }
            else if (isEndFunction(strLine)) {
                setNeedReturnValue();
                m_function = null;
                m_inFunction = false;
                return;
            }
            else if (m_inFunction) {
                checkRaiseEvent(strLine);
                checkNeedReturnVariable(strLine);
                return;
            }
            else {
                // first check for Function | Sub | Property
                if (isBeginOfFunction(strLine)) {
                    parseFunctionDeclaration(strLine);
                    return;
                }
                // declarations
                else {
                    parsePublicMember(strLine);
                    return;
                }
            }
        }
        // split sentences
        else {
            m_strBuffer += G.rtrim(strLine.substring(0, strLine.length()-1)) + " " ;
            return;
        }
    }

    private String translateLine(String strLine) {
        
        // debug
        
        //if (G.beginLike(strLine.trim(), "With .Add(Nothing, rs(cscPrtId).Value)")) {
        //    int i = 9999;
        //}
        
        
        // two kind of sentences
            // In function
            // Declarations

        // functions
            // Function
            // Sub
            // Property

        // if the sentence is split in two or more lines
        // we need to join the lines before translate it
        //
        if (isSentenceComplete(strLine)) {

            strLine = m_strBuffer + G.ltrimTab(strLine);
            m_strBuffer = "";

            strLine = removeLineNumbers(strLine);

            if (isEmptyLine(strLine)) {
                return strLine + newline;
            }
            if (isVbSpecificCode(strLine)) {
                return "//" + strLine + newline;
            }
            if (isComment(strLine)) {
                return getTabs() + commentLine(strLine);
            }
            if (isDeclareApi(strLine)) {
                return declareApiLine(strLine);
            }
            if (m_inType) {
                addToType(strLine);
                return "";
            }
            else if (isBeginOfType(strLine)) {
                addToType(strLine);
                return "//*TODO:** type is translated as a new class at the end of the file " + strLine + newline;
            }
            else if (isBeginOfEnum(strLine)) {
                addToEnum(strLine);
                return "//*TODO:** enum is translated as a new class at the end of the file " + strLine + newline;
            }
            else if (m_inEnum) {
                addToEnum(strLine);
                return "";
            }
            else if (m_inFunction) {
                checkEndBlock(strLine);
                String line = translateLineInFunction(strLine);
                String rtn = "";
                if (!line.isEmpty()) {
                    String tabs = getTabs();
                    rtn = tabs + line;                
                }
                checkBeginBlock(strLine);
                return rtn;
            }
            else {
                // first check for Function | Sub | Property
                if (isBeginOfFunction(strLine)) {
                    checkEndBlock(strLine);
                    String rtn = getTabs() + translateLineInFunction(strLine);
                    checkBeginBlock(strLine);
                    return rtn;
                }
                // declarations
                else {
                    checkEndBlock(strLine);
                    String rtn = getTabs() + translateLineInDeclaration(strLine);
                    checkBeginBlock(strLine);
                    return rtn;
                }
            }
        }
        // split sentences
        else {
            m_strBuffer += strLine.substring(0, strLine.length()-1).trim() + " ";
            return "";
        }
    }

    private boolean isSentenceComplete(String strLine) {
        strLine = G.ltrimTab(strLine);
        if (strLine.isEmpty())
            return true;
        else if (getStartComment(strLine) >= 0)
            return true;
        else if (strLine.length() < 2)
            return true;
        else
            return !(strLine.substring(strLine.length()-2).equals(" _"));
    }

    private int getStartComment(String strLine) {
        boolean literalFlag = false;
        for (int i = 0; i < strLine.length(); i++) {
            if (strLine.charAt(i) == '"') {
                literalFlag = !literalFlag;
            }
            else if (strLine.charAt(i) == '\'') {
                if (!literalFlag) {
                    return i;
                }
            }
        }
        return -1;
    }

    private boolean isEmptyLine(String strLine) {
        strLine = G.ltrimTab(strLine);
        return strLine.isEmpty();
    }

    private boolean isVbSpecificCode(String strLine) {
        strLine = G.ltrimTab(strLine).toLowerCase();
        if (strLine.isEmpty())
            return false;
        if (strLine.equals("option explicit"))
            return true;
        else
            return false;
    }

    private boolean isComment(String strLine) {
        strLine = G.ltrimTab(strLine);
        if (strLine.isEmpty())
            return false;
        else
            return strLine.charAt(0) == '\'';
    }

    private String commentLine(String strLine) {
        return G.ltrimTab(strLine.replaceFirst("'", "//")) + newline;
    }

    private boolean isDeclareApi(String strLine) {
        strLine = G.ltrimTab(strLine);
        if (strLine.isEmpty()) {
            return false;
        }
        else {
            if (strLine.length() >= 15) {
                if (strLine.substring(0, 15).equalsIgnoreCase("public declare ")) {
                    return true;
                }
                else if (strLine.length() >= 16) {
                    return strLine.substring(0, 16).equalsIgnoreCase("private declare ");
                }
                else {
                    return false;
                }
            }
            else {
                return false;
            }
        }
    }
