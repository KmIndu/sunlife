// Case
        //
        else if (G.beginLike(strLine, "Case ")) {
            m_tabCount++;
        }
        // Public Function
        //
        else if (G.beginLike(strLine, "Public Function ")) {
            m_tabCount++;
        }
        // Private Function
        //
        else if (G.beginLike(strLine, "Private Function ")) {
            m_tabCount++;
        }
        // Public Sub
        //
        else if (G.beginLike(strLine, "Public Sub ")) {
            m_tabCount++;
        }
        // Private Sub
        //
        else if (G.beginLike(strLine, "Private Sub ")) {
            m_tabCount++;
        }
        // Function
        //
        else if (G.beginLike(strLine, "Function ")) {
            m_tabCount++;
        }
        // Sub
        //
        else if (G.beginLike(strLine, "Sub ")) {
            m_tabCount++;
        }
        // Public Property
        //
        else if (G.beginLike(strLine, "Public Property ")) {
            m_tabCount++;
        }
        // Private Property
        //
        else if (G.beginLike(strLine, "Private Property ")) {
            m_tabCount++;
        }
        // Property
        //
        else if (G.beginLike(strLine, "Property ")) {
            m_tabCount++;
        }
        // Friend Function
        //
        else if (G.beginLike(strLine, "Friend Function ")) {
            m_tabCount++;
        }
        // Friend Sub
        //
        else if (G.beginLike(strLine, "Friend Sub ")) {
            m_tabCount++;
        }
        // Friend Property
        //
        else if (G.beginLike(strLine, "Friend Property ")) {
            m_tabCount++;
        }
        // On error
        //
        else if (G.beginLike(strLine, "On Error ")) {
            if (m_translateToCairo) {
                if (!G.beginLike(strLine.trim(), "On Error Resume Next")) {
                    m_tabCount++;
                    m_onErrorFound = true;                    
                }
            }
            else {
                m_tabCount++;
                m_onErrorFound = true;
            }
        }
    }

    private void checkEndBlock(String strLine) {
        strLine = G.ltrimTab(strLine);
        
        int startComment = getStartComment(strLine);
        if (startComment >= 0) {
            strLine = strLine.substring(0, startComment-1);
        }
        
        if (strLine.trim().equalsIgnoreCase("End If")) {
            m_tabCount--;
        }
        // ElseIf
        //
        else if (G.beginLike(strLine, "ElseIf ")) {
            //if (G.endLike(strLine, " Then")) {
            //    m_tabCount--;
            //}
            //if (!m_wasSingleLineIf) m_tabCount--;
            m_tabCount--;
        }
        // Else
        //
        else if (G.beginLike(strLine, "Else ")) {
            //if (!m_wasSingleLineIf) m_tabCount--;
            m_tabCount--;
        }
        // Else
        //
        else if (strLine.trim().equalsIgnoreCase("Else")) {
            //if (!m_wasSingleLineIf) m_tabCount--;
            m_tabCount--;
        }
        // End Select
        //
        else if (strLine.trim().equalsIgnoreCase("End Select")) {
            m_tabCount-=2;
        }
        // Case
        //
        else if (G.beginLike(strLine, "Case ")) {
            m_tabCount--;
        }
        // End With
        //
        //else if (strLine.trim().equalsIgnoreCase("End With")) {
        //    m_tabCount--;
        //}
        // Loop
        //
        else if (G.beginLike(strLine, "Loop ")) {
            m_tabCount--;
        }
        else if (strLine.trim().equalsIgnoreCase("Loop")) {
            m_tabCount--;
        }
        // Wend
        //
        else if (strLine.trim().equalsIgnoreCase("Wend")) {
            m_tabCount--;
        }
        // Next
        //
        else if (G.beginLike(strLine, "Next ")) {
            m_tabCount--;
        }
        // Next
        //
        else if (strLine.trim().equalsIgnoreCase("Next")) {
            m_tabCount--;
        }
        // End Function
        //
        else if (strLine.trim().equalsIgnoreCase("End Function")) {
            m_tabCount--;
            if (m_onErrorFound)
                m_tabCount--;
        }
        // End Sub
        //
        else if (strLine.trim().equalsIgnoreCase("End Sub")) {
            m_tabCount--;
            if (m_onErrorFound)
                m_tabCount--;
        }
        // End Property
        //
        else if (strLine.trim().equalsIgnoreCase("End Property")) {
            m_tabCount--;
            if (m_onErrorFound)
                m_tabCount--;
        }
        // Label Error
        //
        else if (isOnErrorLabelSentence(strLine)) {
            m_tabCount--;
            m_onCatchBlock = true;
        }
        // End On Error
        //
        else if (isOnErrorSentence(strLine)) {
            if (m_onErrorFound)
                m_tabCount--;
        }

        if (m_tabCount < 1) {
            m_tabCount = 1;
        }
    }

    private Boolean isEndFunction(String strLine) {
        strLine = G.ltrimTab(strLine);

        int startComment = getStartComment(strLine);
        if (startComment >= 0) {
            strLine = strLine.substring(0, startComment-1);
        }
        boolean isEnd = false;
        // En Function
        //
        if (strLine.trim().equalsIgnoreCase("End Function")) {
            isEnd = true;
        }
        // End Sub
        //
        else if (strLine.trim().equalsIgnoreCase("End Sub")) {
            isEnd = true;
        }
        // End Property
        //
        else if (strLine.trim().equalsIgnoreCase("End Property")) {
            isEnd = true;
        }
        return isEnd;
    }

    private String getTabs() {
        return G.rep(' ', m_tabCount * 2);
    }

    private String removeLineNumbers(String strLine) {
        boolean isNumber = true;
        strLine = G.ltrimTab(strLine);
        String[] words = G.splitSpace(strLine);//strLine.split("\\s+");

        if (words.length > 0) {
            for (int i = 0; i < words[0].length(); i++) {
                if(!C_NUMBERS.contains(String.valueOf(words[0].charAt(i)))) {
                    isNumber = false;
                    break;
                }
            }
            if (isNumber) {
                return strLine.replaceFirst(words[0], "");
            }
            else {
                return strLine;
            }
        }
        else {
            return strLine;
        }
    }

    private boolean isStringIdentifier(String identifier) {
        return isXTypeIdentifier(identifier, "String");
    }
    private boolean isNumericIdentifier(String identifier) {
        return isXTypeIdentifier(identifier, "@numeric");
    }
    private boolean isXTypeIdentifier(String identifier, String type) {
        // first we evaluate constants expressions
        //
        if (type.equals("String")) {
            if (identifier.startsWith("\"")) {
                identifier = removeLiterals(identifier);
                if (identifier.length() == 0)
                    return true;
            }
        }
        if (type.equals("@numeric")) {
            if ("-".equals(identifier.substring(0, 1))) {
                if (identifier.length() < 2) {
                    return false;
                }
                else if ("1234567890".contains(identifier.substring(2, 3))) {
                    return true;
                }
            }
            else {
                if ("1234567890".contains(identifier.substring(0, 1))) {
                    return true;
                }
            }
        }

        // if is not a constant we look for the type of the variable or
        // function
        //
        IdentifierInfo info = null;
        String varType = "";
        String parent = "";
        String[] words = G.split2(identifier, "\t/*-+ .()");
        identifier = "";
        String[] parents = new String[30]; // why 30? who nows :P, 30 should be enough :)
        int openParentheses = 0;

        for (int i = 0; i < words.length; i++) {
            if (!(",.()\"'".contains(words[i]))) {
                info = getIdentifierInfo(words[i], parent, false);
                if (info == null)
                    varType = "";
                else if (info.isFunction) {
                    varType = info.function.getReturnType().dataType;
                }
                else {
                    varType = info.variable.dataType;
                }
                parent = varType;
            }
            else if (words[i].equals("(")) {
                parents[openParentheses] = parent;
                parent = "";
                openParentheses++;
            }
            else if (words[i].equals(")")) {
                openParentheses--;
                parent = parents[openParentheses];
            }
            else if (words[i].equals(" ")) {
                parent = "";
            }
            
        }
        if (type.equals("@numeric")) {
            return C_NUMERIC_DATA_TYPES.contains(varType.toLowerCase());
        }
        else
            return varType.toLowerCase().equals(varType.toLowerCase());
    }

    private void showError(String msg) {
        msg = "module: " + m_vbClassName + newline + msg;
        msg = "function: " + m_vbFunctionName + newline + msg;
        //G.showInfo(msg);
    }

    // ADODB
    //
    private String replaceADODBSentence(String strLine) {
        Preference pref = PreferenceObject.getPreference(G.C_AUX_ADO_REPLACE_ID);
        if (pref != null) {
            if (!pref.getValue().equals("0")) {
                strLine = replaceADODBConnection(strLine);
                strLine = replaceADODBRecordSet(strLine);
                strLine = replaceADODBFields(strLine);
                strLine = replaceADODBField(strLine);
                //strLine = translateADODBBofAndEof(strLine);
            }
        }
        return strLine;
    }

    private String replaceADODBConnection(String strLine) {
        return strLine;
    }
    private String replaceADODBRecordSet(String strLine) {
        return strLine;
    }
    private String replaceADODBFields(String strLine) {
        return strLine;
    }
    private String replaceADODBField(String strLine) {
        return strLine;
    }
    private boolean isADODBType(String dataType) {
        if (dataType.equalsIgnoreCase("ADODB.Connection")) {
            return true;
        }
        else if (dataType.equalsIgnoreCase("Connection")) {
            return true;
        }
        else if (dataType.equalsIgnoreCase("ADODB.RecordSet")) {
            return true;
        }
        else if (dataType.equalsIgnoreCase("RecordSet")) {
            return true;
        }
        else if (dataType.equalsIgnoreCase("ADODB.Fields")) {
            return true;
        }
        else if (dataType.equalsIgnoreCase("Fields")) {
            return true;
        }
        else if (dataType.equalsIgnoreCase("ADODB.Field")) {
            return true;
        }
        else if (dataType.equalsIgnoreCase("Field")) {
            return true;
        }
        else {
            return false;
        }
    }
    private String translateADODBType(String dataType) {
        if (dataType.equalsIgnoreCase("ADODB.Connection")) {
            addToImportList("import java.sql.Connection;");
            return "Connection";
        }
        else if (dataType.equalsIgnoreCase("Connection")) {
            addToImportList("import java.sql.Connection;");
            return "Connection";
        }
        else if (dataType.equalsIgnoreCase("ADODB.RecordSet")) {
            return "DBRecordSet";
        }
        else if (dataType.equalsIgnoreCase("RecordSet")) {
            return "DBRecordSet";
        }
        else if (dataType.equalsIgnoreCase("ADODB.Fields")) {
            addToImportList("import org.apache.commons.beanutils.DynaBean;");
            return "DBFields";
        }
        else if (dataType.equalsIgnoreCase("Fields")) {
            addToImportList("import org.apache.commons.beanutils.DynaBean;");
            return "DBFields";
        }
        else if (dataType.equalsIgnoreCase("ADODB.Field")) {
            return "DBField";
        }
        else if (dataType.equalsIgnoreCase("Field")) {
            return "DBField";
        }
        else {
            return dataType;
        }
    }
    private void createADODBClasses() {
        // Connection
        m_classObject.setPackageName("ADODB");
        m_classObject.setVbName("Connection");
        m_classObject.setJavaName("DBConnection");
        m_classObject.getClassIdFromClassName();
        m_classObject.saveClass();
        
        // RecordSet
        m_classObject.setPackageName("ADODB");
        m_classObject.setVbName("RecordSet");
        m_classObject.setJavaName("DBRecordSet");
        m_classObject.getClassIdFromClassName();
        m_classObject.saveClass();

        saveFunction("BOF", "isBOF", "boolean");
        saveFunction("EOF", "isEOF", "boolean");

        // Fields
        m_classObject.setPackageName("ADODB");
        m_classObject.setVbName("Fields");
        m_classObject.setJavaName("DBFields");
        m_classObject.getClassIdFromClassName();
        m_classObject.saveClass();

        // Field
        m_classObject.setPackageName("ADODB");
        m_classObject.setVbName("Field");
        m_classObject.setJavaName("DBField");
        m_classObject.getClassIdFromClassName();
        m_classObject.saveClass();
        
        m_classObject.setId(0);
    }
    
    // Visual Basic Standar Objects
    
    private void createVBClasses() {
        // Collection
        m_classObject.setPackageName("VBA");
        m_classObject.setVbName("Collection");
        //m_classObject.setJavaName("ArrayList");
        m_classObject.setJavaName("LinkedMap");
        m_classObject.getClassIdFromClassName();
        m_classObject.saveClass();

        saveFunction("count", "size", "int");
        saveFunction("item", "get", getObjectTypeName());
        saveFunction("remove", "remove", "void");

        m_classObject.setPackageName("VBA");
        m_classObject.setVbName("VBA");
        m_classObject.setJavaName("VBA");
        m_classObject.getClassIdFromClassName();
        m_classObject.saveClass();

        m_functionObject.setId(0);
        saveVariable("Err", "ex", getObjectTypeName(), false, true);
        
        m_classObject.setId(0);
    }
    private boolean isVBStandarObject(String dataType) {
        if (dataType.equalsIgnoreCase("Collection")) {
            return true;
        }
        else {
            return false;
        }
    }
    private String translateVBStandarObject(String dataType) {
        if (dataType.equalsIgnoreCase("Collection")) {
            //addToImportList("import java.util.ArrayList;");
            addToImportList("import org.apache.commons.collections.map.LinkedMap;");
            return "LinkedMap";
        }
        else {
            return dataType;
        }
    }
    private String getObjectTypeName() {
        if (m_translateToJava)
            return "Object";
        else
            return "object";
    }

    private void initInCairoFlags() {
        m_inCairoValidate = false;
        m_inCairoValidateItems = false;
        m_inCairoIsEmptyRow = false;
        m_inCairoSave = false;
        m_inCairoSaveItems = false;
        m_inCairoShowDoc = false;
        m_inCairoTerminate = false;
        m_inCairoDestroy = false;
        m_inCairoMessageEx = false;
        m_inCairoLoad = false;
        m_inCairoPLoad = false;
        m_inCairoLoadCollection = false;
        m_refreshCollection = "";
        m_inCairoDelete = false;
        m_inCairoEdit = false;
        m_inCairoEditNew = false;
        m_inCairoDiscardChanges = false;
        m_inCairoCopy = false;
        m_inPropertyChange = false;
        m_propertyChangeIsNotEmpty = false;
        m_isComplexSave = false;
        m_complexSaveCall = "";
    }
    
    private void updateInCairoFlags(String name) {
        if (name.equals("cIABMClient_Validate")) {
            m_inCairoValidate = true;
        }
        else if (name.equals("cIABMClient_Save")) {
            m_inCairoSave = true;
        }
        else if (name.equals("cIABMClient_ShowDocDigital")) {
            m_inCairoShowDoc = true;
        }
        else if (name.equals("class_Terminate")) {
            m_inCairoDestroy = true;
        }
        else if (name.equals("cIABMClient_Terminate")) {
            m_inCairoTerminate = true;
        }
        else if (name.equals("cIABMClient_MessageEx")) {
            m_inCairoMessageEx = true;
        }
        else if (name.equals("load")) {
            m_inCairoLoad = true;
        }
        else if (name.equals("loadCollection")) {
            m_inCairoLoadCollection = true;
        }
        else if (name.equals("cIEditGeneric_Delete")) {
            m_inCairoDelete = true;
        }
        else if (name.equals("cIEditGeneric_Edit")) {
            m_inCairoEdit = true;
        }
        else if (name.equals("cIABMClient_EditNew")) {
            m_inCairoEditNew = true;
        }
        else if (name.equals("cIABMClient_DiscardChanges")) {
            m_inCairoDiscardChanges = true;
        }
        else if (name.equals("cIABMClient_PropertyChange")) {
            m_inPropertyChange = true;
        }
        else if (name.equals("cIABMClient_Copy")) {
            m_inCairoCopy = true;
        }
        else if (name.contains("pSaveItems")) {
            m_inCairoSaveItems = true;
        }
        else if (name.contains("pValidateRow")) {
            m_inCairoValidateItems = true;
        }        
        else if (name.contains("pIsEmptyRow")) {
            m_inCairoIsEmptyRow = true;
        }        
        else if (name.contains("pLoad")) {
            m_inCairoPLoad = true;
        }        
    }
    
    private String translateLineInCairoFunction(String strLine, String originalLine) {
        if (m_inCairoValidate) {
            return translateLineInCairoValidate(strLine);
        }
        if (m_inCairoValidateItems) {
            return translateLineInCairoValidateItems(strLine);
        }
        if (m_inCairoIsEmptyRow) {
            return translateLineInCairoIsEmptyRow(strLine);
        }
        else if (m_inCairoShowDoc) {
            return translateLineInCairoShowDoc(strLine);
        }
        else if (m_inCairoDestroy) {
            return translateLineInCairoDestroy(strLine);
        }
        else if (m_inCairoTerminate) {
            return translateLineInCairoTerminate(strLine, originalLine);
        }
        else if (m_inCairoMessageEx) {
            return translateLineInCairoMessageEx(strLine);
        }
        else if (m_inCairoLoad) {
            return translateLineInCairoLoad(strLine);
        }
        else if (m_inCairoPLoad) {
            return translateLineInCairoPLoad(strLine);
        }
        else if (m_inCairoLoadCollection) {
            writeControllerClassData(strLine);
            writeControllerFormData(strLine);
            writeControllerWriteData(strLine);
            writeCreateUpdateParamList(strLine);
            writeModelCaseClass(strLine);
            return translateLineInCairoLoadCollection(strLine, originalLine);
        }
        else if (m_inCairoDelete) {
            return translateLineInCairoDelete(strLine);
        }
        else if (m_inCairoEdit) {
            return translateLineInCairoEdit(strLine);
        }
        else if (m_inCairoEditNew) {
            return translateLineInCairoEditNew(strLine);
        }
        else if (m_inCairoSave) {
            return translateLineInCairoSave(strLine);
        }
        else if (m_inCairoSaveItems) {
            return translateLineInCairoSaveItems(strLine);
        }
        else if (m_inCairoDiscardChanges) {
            return translateLineInCairoDiscarChanges(strLine);
        }
        else if (m_inPropertyChange) {
            return translateLineInCairoPropertyChange(strLine, originalLine);
        }
        else if (m_inCairoCopy) {
            return translateLineInCairoCopy(strLine);
        }
        else {
            return strLine;
        }
    }
    
    private String getCairoVariableName(String name) {
        if (m_translateToCairo || m_parseToCairo) {
            if (name.trim().equals("K_NOMBRE"))
                return "K_NAME";
            if (name.trim().equals("K_CODIGO"))
                return "K_CODE";
            if (name.trim().equals("K_ACTIVO"))
                return "K_ACTIVE";
            if (name.trim().equals("m_nombre"))
                return "m_name";
            if (name.trim().equals("m_codigo"))
                return "m_code";
            if (name.trim().equals("m_activo"))
                return "m_active";
            if (name.trim().equals("m_objTree"))
                return "m_listController";
            if (name.trim().toLowerCase().startsWith("csc")) {
                name = replaceIdentifierCamel(name);
                if (G.endLike(name.toUpperCase(), "NOMBRE"))
                    name = name.toUpperCase().replace("NOMBRE", "NAME");
                else if (G.endLike(name.toUpperCase(), "CODIGO"))
                    name = name.toUpperCase().replace("CODIGO", "CODE");
                return name;
            }
            return name;
        }
        else {
            return name;
        }
    }
    
    String deleteReturnLine = "{\n          return Cairo.Promises.resolvedPromise(false);\n        }";
    
    private String translateLineInCairoDelete(String strLine) {
        return "";
    }
    
    private String translateLineInCairoEdit(String strLine) {
        String trimmedLine = strLine.trim();
        if (G.beginLike(trimmedLine, "if (!load(id)) { return _rtn; }")) {
            trimmedLine = getTabs() + "p = load(id).then(\n" + getTabs() + " function(success) {\n" + getTabs() + "    if(success) {\n";
            m_tabCount += 3;
            return trimmedLine;
        }
        else if (G.beginLike(strLine.trim(), "return _rtn;")) {
            m_tabCount -= 1;
            trimmedLine = getTabs() + "}\n" 
                        + getTabs() + "return success;\n";
            m_tabCount -= 2;
            trimmedLine += getTabs() + "});\n";
            return trimmedLine;
        }
        else if (G.beginLike(trimmedLine, "return _rtn;")) {
            return "";
        }        
        else {
            return strLine
                    .replace("var _rtn = null;", "var p = Cairo.Promises.resolvedPromise(false);")
                    .replace("if (!loadCollection()) { return _rtn; }", "if(!loadCollection()) { return false; }")
                    .replace("_rtn = m_id != Cairo.Constants.NO_ID;", "success = m_id != Cairo.Constants.NO_ID;")
                    .replace("_rtn = true;", "success = true;")
                    .replaceAll("_rtn", "p");
        }
    }

    private String translateLineInCairoEditNew(String strLine) {
        return strLine
                .replaceAll("self.edit\\(Cairo.Constants.NO_ID\\);", "return self.edit(Cairo.Constants.NO_ID);")
                .replace("self.terminate();", "updateList();\n")
                .replace("return self.edit(Cairo.Constants.NO_ID);", "m_listController.updateEditorKey(self, Cairo.Constants.NO_ID);\n\n        return load(Cairo.Constants.NO_ID).then(\n          function(ignored) {\n            return refreshCollection();\n          }\n        );");
    }
    
    private String translateLineInCairoDiscarChanges(String strLine) {
        return strLine.replace("loadCollection();", "return Cairo.Promises.resolvedPromise(refreshCollection());");
    }
    
    private String translateLineInCairoPropertyChange(String strLine, String originalLine) {
        if (originalLine.equals("End Function")) {
            if (m_propertyChangeIsNotEmpty == false) {
                return "        return Cairo.Promises.resolvedPromise(false);\n" + strLine;
            }
        }
        else if (!(strLine.equals("      self.propertyChange = function(key) {\n") 
                || strLine.equals("\n"))) {
            m_propertyChangeIsNotEmpty = true;
        }
        return strLine;
    }
    
    private String translateLineInCairoCopy(String strLine) {
        return strLine
                .replace("self.terminate();", "updateList();\n")
                .replace("m_isNew = true;", "m_isNew = true;\n\n        m_listController.updateEditorKey(self, Cairo.Constants.NO_ID);");
    }
    
    private boolean m_isComplexSave = false;
    private String m_complexSaveCall = "";
    
    private String translateLineInCairoSave(String strLine) {
        
        if (strLine.contains("commitTrans")) {
            int debug = 0;
        }        
        
        String trimmedLine = strLine.trim();
        if (G.beginLike(trimmedLine, "var register = null;") ||
                G.beginLike(trimmedLine, "var fields = null;") ||
                G.beginLike(trimmedLine, "var property = null;") ||
                G.beginLike(trimmedLine, "//Error al grabar ")) {
            return "";
        }
        else if (G.beginLike(trimmedLine, "if (!Cairo.Database.saveEx(register, , Cairo.General.Constants.")) {
            if (m_isComplexSave) {
                trimmedLine = trimmedLine.substring(62).replace(") { return false; }", "");
                trimmedLine = trimmedLine.replace(") { return _rtn; }", "");
                trimmedLine = trimmedLine.replace("C_ABMClientSave", "\n            Cairo.Constants.CLIENT_SAVE_FUNCTION,\n            ");
                trimmedLine = trimmedLine.replace(", C_MODULE, ", "C_MODULE,\n            ");
                m_complexSaveCall = getTabs() + "return Cairo.Database.saveTransaction(\n            register,\n            false,\n            Cairo.General.Constants" + trimmedLine + ".then(\n\n"
                        + getTabs() + "  function(result) {\n"
                        + getTabs() + "    if(result.success) {";
                return getTabs() + "// save items";                
            }
            else {
                trimmedLine = trimmedLine.substring(62).replace(") { return false; }", "");
                trimmedLine = trimmedLine.replace(") { return _rtn; }", "");
                trimmedLine = trimmedLine.replace("C_ABMClientSave", "\n            Cairo.Constants.CLIENT_SAVE_FUNCTION,\n            ");
                trimmedLine = trimmedLine.replace(", C_MODULE, ", "C_MODULE,\n            ");
                trimmedLine = getTabs() + "return Cairo.Database.saveEx(\n            register,\n            false,\n            Cairo.General.Constants" + trimmedLine + ".then(\n\n"
                        + getTabs() + "  function(result) {\n"
                        + getTabs() + "    if(result.success) {";
                m_tabCount += 4;
                return trimmedLine;
            }
        }
        else if (G.beginLike(trimmedLine, "return load(register.getID());") 
                || G.beginLike(trimmedLine, "_rtn = load(register.getID());")) {

            m_tabCount -= 2;
            trimmedLine = getTabs() + "}\n" 
                        + getTabs() + "else {\n" 
                        + getTabs() + "  return false;\n" 
                        + getTabs() + "}\n";
            trimmedLine = "              return load(result.data.getId()).then(\n" 
                    + "                function (success) {\n"
                    + "                  if(success) {\n"
                    + "                    updateList();\n"
                    + "                    m_listController.updateEditorKey(self, m_id);\n"
                    + "                  };\n"
                    + "                  m_isNew = false;\n"
                    + "                  return success;\n"
                    + "                }\n"
                    + "              );\n"                    
                    + trimmedLine;
            m_tabCount -= 2;
            trimmedLine += getTabs() + "});\n";
            return trimmedLine;
        }
        else if (G.beginLike(trimmedLine, "if (!register.beginTrans(Cairo.Database)) { return _rtn; }")) {
            m_isComplexSave = true;
            return getTabs() + "register.prepareTransaction();";
        }
        else if (G.beginLike(trimmedLine, "if (!register.commitTrans()) {")) {
            m_tabCount += 4;
            return m_complexSaveCall;
        }
        else if (trimmedLine.contains("pSaveItems")) {
            return strLine.replace("()", "(register)").replace("// **TODO:** goto found: GoTo SaveError; }", " return false; }");
        }
        else {
            return strLine
                    .replaceAll("register = new cRegister\\(\\);", "var register = new Cairo.Database.Register();")
                    .replaceAll("fields = register.getFields\\(\\);", "var fields = register.getFields();")
                    .replaceAll("property = m_dialog.getProperties\\(\\).item\\(_i\\);", "var property = m_dialog.getProperties().item(_i);")
                    .replaceAll("fields.add2\\(", "fields.add(")
                    .replaceAll("//Error al grabar ", "\n" + getTabs() + "// Error saving ")
                    .replace("if (m_copy) {", "var apiPath = Cairo.Database.getAPIVersion();\n        register.setPath(apiPath + \"general/" 
                                + m_javaClassName.substring(1).toLowerCase() 
                                + "\");\n\n        if(m_copy) {")
                    .replace("if(!m_genericEdit.Save(m_dialog, register)) { return _rtn; }", "if(!m_genericEdit.save(m_dialog, register)) { return false; }")
                    .replace("// **TODO:** goto found: GoTo SaveError; }", " return false; }");
        }
    }
    
    private String m_itemsDeletedList = "";
    
    private String translateLineInCairoSaveItems(String strLine) {
        
        if (strLine.contains("commitTrans")) {
            int debug = 0;
        }        
        
        String trimmedLine = strLine.trim();
        if (G.beginLike(trimmedLine, "var fields = null;") ||
                G.beginLike(trimmedLine, "var property = null;") ||
                G.beginLike(trimmedLine, "sqlstmt = \"delete ") ||
                G.beginLike(trimmedLine, "var sqlstmt = null;") ||
                G.beginLike(trimmedLine, "//Error al grabar ")) {
            return "";
        }
        else if (G.beginLike(trimmedLine, "var pSaveItems")) {
            return strLine.replace("()", "(mainTransaction)");
        }
        else if (G.beginLike(trimmedLine, "if (!Cairo.Database.save(register, ,")) {
            return getTabs() + "transaction.addRegister(register);\n";
        }
        else if (G.beginLike(trimmedLine, "var register = null;")) {
            return getTabs() + "var transaction = new Cairo.Database.Transaction();\n";
        }
        else if (G.beginLike(trimmedLine, "return true;")) {            
            return getTabs() + "mainTransaction.addTransaction(transaction);\n\n" + getTabs() + "return true;\n";
        }
        else if (trimmedLine.contains("cUtil.removeLastColon(m_itemsDeleted")) {
            m_itemsDeletedList = trimmedLine.substring(0, trimmedLine.indexOf("="));
            return "";
        }
        else if (trimmedLine.contains("if (!Cairo.Database.execute(sqlstmt, ") && !m_itemsDeletedList.isEmpty()) {
            trimmedLine = getTabs() + "transaction.setDeletedList(" + m_itemsDeletedList + ")\n";
            m_itemsDeletedList = "";
            return trimmedLine;
        }
        else {
            return strLine
                    .replaceAll("register = new cRegister\\(\\);", "var register = new Cairo.Database.Register();") 
                    .replaceAll("fields = register.getFields\\(\\);", "var fields = register.getFields();")
                    .replaceAll("property = m_dialog.getProperties\\(\\).item\\(_i\\);", "var property = m_dialog.getProperties().item(_i);")
                    .replaceAll("fields.add2\\(", "fields.add(")
                    .replaceAll("//Error al grabar ", "\n" + getTabs() + "// Error saving ")
                    .replace("if (m_copy) {", "var apiPath = Cairo.Database.getAPIVersion();\n        register.setPath(apiPath + \"general/" 
                                + m_javaClassName.substring(1).toLowerCase() 
                                + "\");\n\n        if(m_copy) {")
                    .replace("if(!m_genericEdit.Save(m_dialog, register)) { return _rtn; }", "if(!m_genericEdit.save(m_dialog, register)) { return false; }")
                    .replace("// **TODO:** goto found: GoTo SaveError; }", " return false; }");
        }
    }
    
    private String translateLineInCairoLoadCollection(String strLine, String originalLine) {
        if (originalLine.equals("End Function")) {
            
            m_refreshCollection = "\n" 
                    + "      var refreshCollection = function() {\n\n"
                    + "        m_dialog.setTitle(m_name);\n\n"
                    + "        var properties = m_dialog.getProperties();\n"
                    + m_refreshCollection
                    + "\n        return m_dialog.showValues(properties);\n"
                    + "      };\n";
            
            return strLine + m_refreshCollection.replaceAll("Integer.parseInt\\(", "Cairo.Util.boolToInt(");
        }
        else {
            if (G.beginLike(strLine.trim(), "var elem = properties.add(null")) {
                m_refreshCollection += "\n" + strLine.replace(".add(null, ", ".item(");
            } else if (G.beginLike(strLine.trim(), "elem.setValue(")) {
                m_refreshCollection += strLine;
            } else if (G.beginLike(strLine.trim(), "elem.setSelectId(")) {
                m_refreshCollection += strLine;
            } 
            if (G.beginLike(strLine.trim(), "if (!pLoad")) {
                return getTabs() + "setGrid" + getPLoadName(strLine, "(") + "(c);\n" + strLine;
            }
            else if (G.beginLike(strLine.trim(), "Const(")) {
                return strLine
                        .replace("Const(", "var ")
                        .replace("==", "=")
                        .replace(")", "")                        
                        ;
            }
            else
                return strLine.replace("Integer.parseInt(", "Cairo.Util.boolToInt(");
        }
    }
    
    private String getPLoadName(String strLine, String sep) {
        int i = strLine.indexOf("pLoad") + 5;
        int j = strLine.indexOf(sep, i);
        return strLine.substring(i, j).trim();
    }
    
    private String translateLineInCairoLoad(String strLine) {
        String trimmedLine = strLine.trim();
        if (G.beginLike(trimmedLine, "sqlstmt") ||
                G.beginLike(trimmedLine, "var sqlstmt = null;") ||
                G.beginLike(trimmedLine, "var rs = null;")) {
            return "";
        }
        else if (G.beginLike(trimmedLine, "if (!Cairo.Database.openRs(sqlstmt, rs,")) {
            String rtn = getTabs()
                    + "var apiPath = Cairo.Database.getAPIVersion();\n"
                    + getTabs()
                    + "return Cairo.Database.getData(\"load[\" + apiPath + \"general/" + m_javaClassName.substring(1).toLowerCase() + "]\", id).then(\n"
                    + getTabs() + C_TAB + "function(response) {\n";
            m_tabCount += 2;
            return rtn;
        }
        else if (G.beginLike(trimmedLine, "return true;")) {
            m_tabCount -= 2;
            return getTabs() + "  return true;\n" + getTabs() + "});\n";
        }
        else if (G.beginLike(trimmedLine, "if (rs.isEOF()) {")) {
            m_tabCount--;
            String rtn = getTabs() + "if(response.success !== true) { return false; }\n\n" + getTabs() + "if(response.data.id === Cairo.Constants.NO_ID) {\n";
            m_tabCount++;
            return rtn;
        }
        else if (G.beginLike(trimmedLine, "if (!rs.isEOF()) {")) {
            m_tabCount--;
            String rtn = getTabs() + "if(response.success !== true) { return false; }\n\n" + getTabs() + "if(response.data.id !== Cairo.Constants.NO_ID) {\n";
            m_tabCount++;
            return rtn;
        }
        else {
            return strLine.replaceAll("rs.getFields\\(\\)", "response.data");
        }
    }
    
    private String m_pLoadName = "";
    
    private String translateLineInCairoPLoad(String strLine) {
        String trimmedLine = strLine.trim();
        if (G.beginLike(trimmedLine, "sqlstmt") ||
                G.beginLike(trimmedLine, "var sqlstmt = null;") ||
                G.beginLike(trimmedLine, "rs.MoveNext;") ||
                G.beginLike(trimmedLine, "var rs = null;")) {
            return "";
        }
        else if (G.beginLike(trimmedLine, "var pLoad")) {
            m_pLoadName = getPLoadName(trimmedLine, "=");
            m_pLoadName = unCapitalize(m_pLoadName);
            return "      var setGrid" + capitalize(m_pLoadName) + " = function(property) {\n";
        }
        else if (G.beginLike(trimmedLine, "if (!Cairo.Database.openRs(sqlstmt, rs,")) {
            return "";
        }        
        else if (G.beginLike(trimmedLine, "if (rs.isEOF()) {")) {
            m_tabCount--;
            String rtn = getTabs() + "if(response.success !== true) { return false; }\n\n" + getTabs() + "if(response.data.id === Cairo.Constants.NO_ID) {\n";
            m_tabCount++;
            return rtn;
        }
        else if (G.beginLike(trimmedLine, "while (!rs.isEOF()) {")) {
            return getTabs() + "for(var _i = 0; _i < m_data." + m_pLoadName + ".length; _i += 1) {\n";
        }
        else if (G.beginLike(trimmedLine, "w_rows.clear();")) {
            
            return strLine + getTabs() + "return true;\n" + "      };\n\n"
                    + "      var pLoad" + capitalize(m_pLoadName) + " = function() {\n\n"
                    ;
        }
        else {
            return strLine
                    .replaceAll("rs.getFields\\(\\)", "m_data." + m_pLoadName + "[_i]")
                    .replaceAll("propiedad", "property")
                    ;
        }
    }
    
    private String translateLineInCairoShowDoc(String strLine) {
        String[] lines = {
            "// **TODO:** goto found: GoTo ExitProc;",
            "// **TODO:** label found: ExitProc:;",
            "var doc = null;"
        };
        String trimmedLine = strLine.trim();
        for (int i = 0; i < lines.length; i++) {
            if (trimmedLine.equals(lines[i]) ) {
                return "";
            }        
        }
        return strLine
                .replaceAll("// \\*\\*TODO\\:\\*\\* on error resume next found !!!\n", "")
                .replace("doc = new cDocDigital();", "var doc = new Cairo.DocDigital();");
    }
    
    private String translateLineInCairoDestroy(String strLine) {
        String[] lines = {
            "// **TODO:** on error resume next found !!!"
        };
        String trimmedLine = strLine.trim();
        for (int i = 0; i < lines.length; i++) {
            if (trimmedLine.equals(lines[i]) ) {
                return "";
            }        
        }
        return strLine;
    }
    
