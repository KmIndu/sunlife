private String replaceRightSentence(String expression) {

        expression = G.ltrimTab(expression);

        if (containsRight(expression)) {

            boolean rightFound = false;
            int openParentheses = 0;
            String[] words = G.split(expression);
            String params = "";
            expression = "";

            for (int i = 0; i < words.length; i++) {
                if (rightFound) {
                    if (words[i].equals("(")) {
                        openParentheses++;
                        if (openParentheses > 1) {
                            params += words[i];
                        }
                    }
                    // look for a close parentheses without an open parentheses
                    else if (words[i].equals(")")) {
                        openParentheses--;
                        if (openParentheses == 0) {
                            if (containsRight(params)) {
                                params = replaceRightSentence(params);
                            }
                            String[] vparams = G.split(params);
                            String identifier = "";
                            String lenght = "";

                            int colons = 0;
                            identifier = "";
                            for (int t = 0; t < vparams.length; t++) {
                                if (vparams[t].equals(",")) {
                                    colons++;
                                }
                                else {

                                    if (colons == 0) {
                                        identifier += vparams[t];
                                    }
                                    else if (colons == 1) {
                                        lenght += vparams[t];
                                    }
                                    else {
                                        showError("Unexpected colon found in Right function's params: " + params);
                                    }
                                }
                            }
                            // identifier can be a complex expresion
                            // like ' "an string plus" + a_var '
                            //
                            if (G.contains(identifier, " ")) {
                                identifier = "(" + identifier + ")";
                            }
                            if (m_translateToJava)
                                expression += identifier
                                                + ".substring(" + identifier
                                                + ".length() - " + lenght.trim() + ")";
                            else
                                expression += identifier
                                                + ".Substring(" + identifier
                                                + ".Length - " + lenght.trim() + ")";
                            rightFound = false;
                            params = "";
                        }
                        else {
                            params = params.trim() + words[i];
                        }
                    }
                    else {
                        params += words[i];
                    }
                }
                else {
                    if (words[i].equalsIgnoreCase("right")) {
                        rightFound = true;
                    }
                    else if (words[i].equalsIgnoreCase("right$")) {
                        rightFound = true;
                    }
                    else if (G.beginLike(words[i],"right(")) {
                        expression += replaceRightSentence(words[i]);
                    }
                    else if (G.beginLike(words[i],"right$(")) {
                        expression += replaceRightSentence(words[i]);
                    }
                    else if (containsLeft(words[i])) {
                        expression += replaceRightSentence(words[i]);
                    }
                    else {
                        expression += words[i];
                    }
                }
            }
        }
        return expression.trim();
    }

    private String replaceLCaseSentence(String expression) {

        expression = G.ltrimTab(expression);

        if (containsLCase(expression)) {

            boolean lcaseFound = false;
            int openParentheses = 0;
            String[] words = G.split(expression);
            String params = "";
            expression = "";
            lcaseFound = false;

            for (int i = 0; i < words.length; i++) {
                if (lcaseFound) {
                    if (words[i].equals("(")) {
                        openParentheses++;
                        if (openParentheses > 1) {
                            params += words[i];
                        }
                    }
                    // look for a close parentheses without an open parentheses
                    else if (words[i].equals(")")) {
                        openParentheses--;
                        if (openParentheses == 0) {
                            if (containsLCase(params)) {
                                params = replaceLCaseSentence(params);
                            }
                            String[] vparams = G.split(params);
                            String identifier = "";

                            int colons = 0;
                            identifier = "";
                            for (int t = 0; t < vparams.length; t++) {
                                if (vparams[t].equals(",")) {
                                    colons++;
                                }
                                else {

                                    if (colons == 0) {
                                        identifier += vparams[t];
                                    }
                                    else {
                                        showError("Unexpected colon found in LCase function's params: " + params);
                                    }
                                }
                            }
                            // identifier can be a complex expresion
                            // like ' "an string plus" + a_var '
                            //
                            if (G.contains(identifier, " ")) {
                                identifier = "(" + identifier + ")";
                            }
                            if (m_translateToJava)
                                expression += identifier
                                                + ".toLowerCase()";
                            else
                                expression += identifier
                                                + ".ToLower()";                                
                            lcaseFound = false;
                            params = "";
                        }
                        else {
                            params = params.trim() + words[i];
                        }
                    }
                    else {
                        params += words[i];
                    }
                }
                else {
                    if (words[i].equalsIgnoreCase("lcase")) {
                        lcaseFound = true;
                    }
                    else if (words[i].equalsIgnoreCase("lcase$")) {
                        lcaseFound = true;
                    }
                    else if (G.beginLike(words[i],"lcase(")) {
                        expression += replaceLCaseSentence(words[i]);
                    }
                    else if (G.beginLike(words[i],"lcase$(")) {
                        expression += replaceLCaseSentence(words[i]);
                    }
                    else if (containsLCase(words[i])) {
                        expression += replaceLCaseSentence(words[i]);
                    }
                    else {
                        expression += words[i];
                    }
                }
            }
        }
        return expression.trim();
    }

    private String replaceUCaseSentence(String expression) {

        expression = G.ltrimTab(expression);

        if (containsUCase(expression)) {

            boolean ucaseFound = false;
            int openParentheses = 0;
            String[] words = G.split(expression);
            String params = "";
            expression = "";

            for (int i = 0; i < words.length; i++) {
                if (ucaseFound) {
                    if (words[i].equals("(")) {
                        openParentheses++;
                        if (openParentheses > 1) {
                            params += words[i];
                        }
                    }
                    // look for a close parentheses without an open parentheses
                    else if (words[i].equals(")")) {
                        openParentheses--;
                        if (openParentheses == 0) {
                            if (containsUCase(params)) {
                                params = replaceUCaseSentence(params);
                            }
                            String[] vparams = G.split(params);
                            String identifier = "";

                            int colons = 0;
                            identifier = "";
                            for (int t = 0; t < vparams.length; t++) {
                                if (vparams[t].equals(",")) {
                                    colons++;
                                }
                                else {

                                    if (colons == 0) {
                                        identifier += vparams[t];
                                    }
                                    else {
                                        showError("Unexpected colon found in UCase function's params: " + params);
                                    }
                                }
                            }
                            // identifier can be a complex expresion
                            // like ' "an string plus" + a_var '
                            //
                            if (G.contains(identifier, " ")) {
                                identifier = "(" + identifier + ")";
                            }
                            if (m_translateToJava)
                                expression += identifier
                                                + ".toUpperCase()";
                            else
                                expression += identifier
                                                + ".ToUpper()";
                            ucaseFound = false;
                            params = "";
                        }
                        else {
                            params = params.trim() + words[i];
                        }
                    }
                    else {
                        params += words[i];
                    }
                }
                else {
                    if (words[i].equalsIgnoreCase("ucase")) {
                        ucaseFound = true;
                    }
                    else if (words[i].equalsIgnoreCase("ucase$")) {
                        ucaseFound = true;
                    }
                    else if (G.beginLike(words[i],"ucase(")) {
                        expression += replaceUCaseSentence(words[i]);
                    }
                    else if (G.beginLike(words[i],"ucase$(")) {
                        expression += replaceUCaseSentence(words[i]);
                    }
                    else if (containsUCase(words[i])) {
                        expression += replaceUCaseSentence(words[i]);
                    }
                    else {
                        expression += words[i];
                    }
                }
            }
        }
        return expression.trim();
    }

    private String replaceLenSentence(String expression) {

        expression = G.ltrimTab(expression);

        if (containsLen(expression)) {

            boolean lenFound = false;
            int openParentheses = 0;
            String[] words = G.split(expression);
            String params = "";
            expression = "";

            for (int i = 0; i < words.length; i++) {
                if (lenFound) {
                    if (words[i].equals("(")) {
                        openParentheses++;
                        if (openParentheses > 1) {
                            params += words[i];
                        }
                    }
                    // look for a close parentheses without an open parentheses
                    else if (words[i].equals(")")) {
                        openParentheses--;
                        if (openParentheses == 0) {
                            if (containsLen(params)) {
                                params = replaceLenSentence(params);
                            }
                            String[] vparams = G.split(params);
                            String identifier = "";

                            int colons = 0;
                            identifier = "";
                            for (int t = 0; t < vparams.length; t++) {
                                if (vparams[t].equals(",")) {
                                    colons++;
                                }
                                else {

                                    if (colons == 0) {
                                        identifier += vparams[t];
                                    }
                                    else {
                                        showError("Unexpected colon found in Len function's params: " + params);
                                    }
                                }
                            }
                            // identifier can be a complex expresion
                            // like ' "an string plus" + a_var '
                            //
                            if (G.contains(identifier, " ")) {
                                identifier = "(" + identifier + ")";
                            }
                            if (m_translateToJava)
                                expression += identifier + ".length()";
                            else
                                expression += identifier + ".Length";
                            lenFound = false;
                            params = "";
                        }
                        else {
                            params = params.trim() + words[i];
                        }
                    }
                    else {
                        params += words[i];
                    }
                }
                else {
                    if (words[i].equalsIgnoreCase("len")) {
                        lenFound = true;
                    }
                    else if (G.beginLike(words[i],"len(")) {
                        expression += replaceLenSentence(words[i]);
                    }
                    else if (words[i].toLowerCase().contains(" len(")) {
                        expression += replaceLenSentence(words[i]);
                    }
                    else if (words[i].toLowerCase().contains("(len(")) {
                        expression += replaceLenSentence(words[i]);
                    }
                    else {
                        expression += words[i];
                    }
                }
            }
        }
        return expression.trim();
    }

    private String replaceInStrSentence(String expression) {

        expression = G.ltrimTab(expression);

        if (containsInStr(expression)) {

            boolean inStrFound = false;
            int openParentheses = 0;
            String[] words = G.split(expression);
            String params = "";
            expression = "";

            for (int i = 0; i < words.length; i++) {
                if (inStrFound) {
                    if (words[i].equals("(")) {
                        openParentheses++;
                        if (openParentheses > 1) {
                            params += words[i];
                        }
                    }
                    // look for a close parentheses without an open parentheses
                    else if (words[i].equals(")")) {
                        openParentheses--;
                        if (openParentheses == 0) {
                            if (containsInStr(params)) {
                                params = replaceInStrSentence(params);
                            }
                            String[] vparams = G.split(params);

                            String start = "";
                            String source = "";
                            String toSearch = "";
                            String compareType = "";

                            String param1 = "";
                            String param2 = "";
                            String param3 = "";
                            String param4 = "";

                            int colons = 0;
                            source = "";
                            for (int t = 0; t < vparams.length; t++) {
                                if (vparams[t].equals(",")) {
                                    colons++;
                                }
                                else {

                                    if (colons == 0) {
                                        param1 += vparams[t];
                                    }
                                    else if (colons == 1) {
                                        param2 += vparams[t];
                                    }
                                    else if (colons == 2) {
                                        param3 += vparams[t];
                                    }
                                    else if (colons == 3) {
                                        param4 += vparams[t];
                                    }
                                    else {
                                        showError("Unexpected colon found in InStr function's params: " + params);
                                    }
                                }
                            }
                            // there are 4 param combinations
                            // 1 if we have 4 params there are: start, source, toSearch, compareType
                            // 2 if we have 3 params it could be:
                            //        2.a if param1 is numeric: start, source, toSearch
                            //        2.b if params isn't numeric: source, toSearch, compareType
                            // 3 if we have 2 params there are: source, toSearch
                            // 4 if we have less than 2 params there is an error :P
                            //

                            // 4 if we have less than 2 params there is an error :P
                            //
                            param1 = param1.trim();
                            param2 = param2.trim();
                            param3 = param3.trim();
                            param4 = param4.trim();
                            if (param2.isEmpty()) {
                                G.showInfo("Wrong number of params in InStr function call. At least there must be two params: " + params);
                            }
                            else {
                                // 1 if we have 4 params there are: start, source, toSearch, compareType
                                //
                                if (!param4.isEmpty()) {
                                    start = param1;
                                    source = param2;
                                    toSearch = param3;
                                    compareType = param4;
                                    if (compareType.equals("0")
                                            || compareType.equals("vbBinaryCompare")) {
                                        expression += getSource(source)
                                                        + ".indexOf(" + toSearch
                                                        + ", " + start.trim() + ")";
                                    }
                                    else { // 1 or vbTextCompare
                                        if (isStringIdentifier(toSearch)) {
                                            if (m_translateToJava)
                                                expression += getSource(source)
                                                            + ".toLowerCase().indexOf("
                                                            + toSearch + ".toLowerCase(), "
                                                            + start.trim() + ")";
                                            else
                                                expression += getSource(source)
                                                            + ".ToLower().IndexOf("
                                                            + toSearch + ".ToLower(), "
                                                            + start.trim() + ")";                                                
                                        }
                                        else {
                                            if (m_translateToJava)
                                                expression += getSource(source)
                                                            + ".toLowerCase().indexOf(String.valueOf("
                                                            + toSearch + ").toLowerCase(), "
                                                            + start.trim() + ")";
                                            else
                                                expression += getSource(source)
                                                            + ".ToLower().IndexOf(("
                                                            + toSearch + ").ToString().ToLower(), "
                                                            + start.trim() + ")";
                                        }
                                    }
                                }
                                // 2 if we have 3 params it could be:
                                //        2.a if param1 is numeric: start, source, toSearch
                                //        2.b if params isn't numeric: source, toSearch, compareType
                                //
                                else if(!param3.isEmpty()) {
                                    // 2.a if param1 is numeric: start, source, toSearch
                                    //
                                    if (isNumericIdentifier(param1)) {
                                        start = param1;
                                        source = param2;
                                        toSearch = param3;
                                        expression += getSource(source)
                                                    + ".indexOf("
                                                    + toSearch + ", "
                                                    + start.trim() + ")";
                                    }
                                    else {
                                        source = param1;
                                        toSearch = param2;
                                        compareType = param3;
                                        if (compareType.equals("0")
                                                || compareType.equals("vbBinaryCompare")) {
                                            expression += getSource(source)
                                                            + ".indexOf(" + toSearch + ")";
                                        }
                                        else { // 1 or vbTextCompare
                                            if (isStringIdentifier(toSearch)) {
                                                if (m_translateToJava)
                                                    expression += getSource(source)
                                                                + ".toLowerCase().indexOf("
                                                                + toSearch + ".toLowerCase())";
                                                else
                                                    expression += getSource(source)
                                                                + ".ToLower().IndexOf("
                                                                + toSearch + ".ToLower())";                                                    
                                            }
                                            else {
                                                if (m_translateToJava)
                                                    expression += getSource(source)
                                                                + ".toLowerCase().indexOf(String.valueOf("
                                                                + toSearch + ").toLowerCase())";
                                                else
                                                    expression += getSource(source)
                                                                + ".ToLower().IndexOf(("
                                                                + toSearch + ").ToString().ToLower())";
                                            }
                                        }
                                    }
                                }
                                // 3 if we have 2 params there are: source, toSearch
                                //
                                else {
                                    source = param1;
                                    toSearch = param2;
                                    expression += getSource(source)
                                                + ".indexOf("
                                                + toSearch + ")";
                                }
                            }
                            inStrFound = false;
                            params = "";
                        }
                        else {
                            params = params.trim() + words[i];
                        }
                    }
                    else {
                        params += words[i];
                    }
                }
                else {
                    if (words[i].equalsIgnoreCase("instr")) {
                        inStrFound = true;
                    }
                    else if (G.beginLike(words[i],"instr(")) {
                        expression += replaceInStrSentence(words[i]);
                    }
                    else if (containsInStr(words[i])) {
                        expression += replaceInStrSentence(words[i]);
                    }
                    else {
                        expression += words[i];
                    }
                }
            }
        }
        return expression.trim();
    }
    
    private String getSource(String source) {
        if (isComplexExpression(source))
            return "(" + source + ")";
        else
            return source;
    }

    private String replaceReplaceSentence(String expression) {

        expression = G.ltrimTab(expression);

        if (containsReplace(expression)) {

            boolean replaceFound = false;
            int openParentheses = 0;
            String[] words = G.split(expression);
            String params = "";
            expression = "";

            for (int i = 0; i < words.length; i++) {
                if (replaceFound) {
                    if (words[i].equals("(")) {
                        openParentheses++;
                        if (openParentheses > 1) {
                            params += words[i];
                        }
                    }
                    // look for a close parentheses without an open parentheses
                    else if (words[i].equals(")")) {
                        openParentheses--;
                        if (openParentheses == 0) {
                            if (containsReplace(params)) {
                                params = replaceReplaceSentence(params);
                            }
                            String[] vparams = G.split(params);
                            String identifier = "";
                            String toSearch = "";
                            String newValue = "";

                            int colons = 0;
                            identifier = "";
                            for (int t = 0; t < vparams.length; t++) {
                                if (vparams[t].equals(",")) {
                                    colons++;
                                }
                                else {

                                    if (colons == 0) {
                                        identifier += vparams[t];
                                    }
                                    else if (colons == 1) {
                                        toSearch += vparams[t];
                                    }
                                    else if (colons == 2) {
                                        newValue += vparams[t];
                                    }
                                    else {
                                        showError("Unexpected colon found in Replace function's params: " + params);
                                    }
                                }
                            }
                            if (toSearch.isEmpty())
                                showError("Missing parameter in Replace function");
                            if (newValue.isEmpty())
                                showError("Missing parameter in Replace function");
                            // identifier can be a complex expresion
                            // like ' "an string plus" + a_var '
                            //
                            if (G.contains(identifier, " ")) {
                                identifier = "(" + identifier + ")";
                            }
                            if (m_translateToJava)
                                expression += identifier 
                                                + ".replace(" + toSearch.trim()
                                                + ", " + newValue.trim() + ")";
                            else
                                expression += identifier 
                                                + ".Replace(" + toSearch.trim()
                                                + ", " + newValue.trim() + ")";
                            replaceFound = false;
                            params = "";
                        }
                        else {
                            params = params.trim() + words[i];
                        }
                    }
                    else {
                        params += words[i];
                    }
                }
                else {
                    if (words[i].equalsIgnoreCase("replace")) {
                        replaceFound = true;
                    }
                    else if (words[i].equalsIgnoreCase("replace$")) {
                        replaceFound = true;
                    }
                    else if (G.beginLike(words[i],"replace(")) {
                        expression += replaceReplaceSentence(words[i]);
                    }
                    else if (G.beginLike(words[i],"replace$(")) {
                        expression += replaceReplaceSentence(words[i]);
                    }
                    else if (containsReplace(words[i])) {
                        expression += replaceReplaceSentence(words[i]);
                    }
                    else {
                        expression += words[i];
                    }
                }
            }
        }
        return expression.trim();
    }

    private String replaceIifSentence(String expression) {

        expression = G.ltrimTab(expression);

        if (containsIif(expression)) {

            boolean iifFound = false;
            int openParentheses = 0;
            String[] words = G.split(expression);
            String params = "";
            expression = "";

            for (int i = 0; i < words.length; i++) {
                if (iifFound) {
                    if (words[i].equals("(")) {
                        openParentheses++;
                        if (openParentheses > 1) {
                            params += words[i];
                        }
                    }
                    // look for a close parentheses without an open parentheses
                    else if (words[i].equals(")")) {
                        openParentheses--;
                        if (openParentheses == 0) {
                            if (containsIif(params)) {
                                params = replaceIifSentence(params);
                            }
                            String[] vparams = G.split(params);
                            String identifier = "";
                            String trueValue = "";
                            String falseValue = "";

                            int colons = 0;
                            identifier = "";
                            for (int t = 0; t < vparams.length; t++) {
                                if (vparams[t].equals(",")) {
                                    colons++;
                                }
                                else {

                                    if (colons == 0) {
                                        identifier += vparams[t];
                                    }
                                    else if (colons == 1) {
                                        trueValue += vparams[t];
                                    }
                                    else if (colons == 2) {
                                        falseValue += vparams[t];
                                    }
                                    else {
                                        showError("Unexpected colon found in IIf function's params: " + params);
                                    }
                                }
                            }
                            if (trueValue.isEmpty()) {
                                showError("trueValue was missing in IIf function's params : " + params);
                            }
                            if (falseValue.isEmpty()) {
                                showError("falseValue was missing in IIf function's params : " + params);
                            }
                            // identifier can be a complex expresion
                            // like ' "an string plus" + a_var '
                            //
                            if (G.contains(identifier, " ")) {
                                identifier = "(" + identifier + ")";
                            }
                            expression += identifier + " ? " 
                                            + trueValue.trim() 
                                            +" : " 
                                            + falseValue.trim() + ")";
                            iifFound = false;
                            params = "";
                        }
                        else {
                            params = params.trim() + words[i];
                        }
                    }
                    else {
                        params += words[i];
                    }
                }
                else {
                    if (words[i].equalsIgnoreCase("iif")) {
                        iifFound = true;
                    }
                    else if (G.beginLike(words[i],"iif(")) {
                        expression += replaceIifSentence(words[i]);
                    }
                    else if (containsIif(words[i])) {
                        expression += replaceIifSentence(words[i]);
                    }
                    else {
                        expression += words[i];
                    }
                }
            }
        }
        return expression.trim();
    }
    
    private String replaceTrimSentence(String expression) {

        expression = G.ltrimTab(expression);

        if (containsTrim(expression)) {

            boolean trimFound = false;
            int openParentheses = 0;
            String[] words = G.split(expression);
            String params = "";
            expression = "";

            for (int i = 0; i < words.length; i++) {
                if (trimFound) {
                    if (words[i].equals("(")) {
                        openParentheses++;
                        if (openParentheses > 1) {
                            params += words[i];
                        }
                    }
                    // look for a close parentheses without an open parentheses
                    else if (words[i].equals(")")) {
                        openParentheses--;
                        if (openParentheses == 0) {
                            if (containsTrim(params)) {
                                params = replaceTrimSentence(params);
                            }
                            String[] vparams = G.split(params);
                            String identifier = "";

                            int colons = 0;
                            identifier = "";
                            for (int t = 0; t < vparams.length; t++) {
                                if (vparams[t].equals(",")) {
                                    colons++;
                                }
                                else {

                                    if (colons == 0) {
                                        identifier += vparams[t];
                                    }
                                    else {
                                        showError("Unexpected colon found in Trim function's params: " + params);
                                    }
                                }
                            }
                            // identifier can be a complex expresion
                            // like ' "an string plus" + a_var '
                            //
                            if (G.contains(identifier, " ")) {
                                identifier = "(" + identifier + ")";
                            }
                            if (m_translateToJava)
                                expression += identifier + ".trim()";
                            else
                                expression += identifier + ".Trim()";
                            trimFound = false;
                            params = "";
                        }
                        else {
                            params = params.trim() + words[i];
                        }
                    }
                    else {
                        params += words[i];
                    }
                }
                else {
                    if (words[i].equalsIgnoreCase("trim")) {
                        trimFound = true;
                    }
                    else if (words[i].equalsIgnoreCase("trim$")) {
                        trimFound = true;
                    }
                    else if (G.beginLike(words[i],"trim(")) {
                        expression += replaceTrimSentence(words[i]);
                    }
                    else if (G.beginLike(words[i],"trim$(")) {
                        expression += replaceTrimSentence(words[i]);
                    }
                    else if (containsMid(words[i])) {
                        expression += replaceTrimSentence(words[i]);
                    }
                    else {
                        expression += words[i];
                    }
                    
                }
            }
        }
        return expression.trim();
    }

    private String replaceIsNumericSentence(String expression) {
        if (containsFunction(expression, "IsNumeric")) {
            if (m_AddAuxFunctionsToClass) {
                m_addIsNumericAuxFunction = true;
                return replaceOneParamFunction(expression, "IsNumeric", "isNumeric");
            }
            // when preference are setting to use G class or CSUtils
            // it is translated using G.{auxfunction}
            //
            else {
                m_addIsNumericAuxFunctionToG = m_UseGAuxFunctions;
                return replaceOneParamFunction(expression, "IsNumeric", "G.isNumeric");
            }
        }
        else
            return expression;
    }

    private String replaceCDblSentence(String expression) {
        if (containsFunction(expression, "CDbl")) {
            return replaceOneParamFunction(expression, "CDbl", "Double.parseDouble");
        }
        else
            return expression;
    }

    private String replaceCIntSentence(String expression) {
        if (containsFunction(expression, "CInt")) {
            return replaceOneParamFunction(expression, "CInt", "Integer.parseInt");
        }
        else
            return expression;
    }

    private String replaceCLngSentence(String expression) {
        if (containsFunction(expression, "CLng")) {
            return replaceOneParamFunction(expression, "CLng", "Long.parseLong");
        }
        else
            return expression;
    }

    private String replaceCSngSentence(String expression) {
        if (containsFunction(expression, "CSng")) {
            return replaceOneParamFunction(expression, "CSng", "Double.parseDouble");
        }
        else
            return expression;
    }

    private String replaceCCurSentence(String expression) {
        if (containsFunction(expression, "CCur")) {
            return replaceOneParamFunction(expression, "CCur", "Double.parseDouble");
        }
        else
            return expression;
    }

    private String replaceCDateSentence(String expression) {
        if (containsFunction(expression, "CDate")) {
            if (m_AddAuxFunctionsToClass) {
                m_addParseDateAuxFunction = true;
                return replaceOneParamFunction(expression, "CDate", "parseDate");
            }
            // when preference are setting to use G class or CSUtils
            // it is translated using G.{auxfunction}
            //
            else {
                m_addParseDateAuxFunctionToG = m_UseGAuxFunctions;
                return replaceOneParamFunction(expression, "CDate", "G.parseDate");
            }
        }
        else
            return expression;
    }
