String vbIdentifier = identifier;
        identifier = getCairoVariableName(identifier);
        identifier = identifier.toUpperCase();        

        Variable var = new Variable();
        var.setVbName(vbIdentifier);
        var.setJavaConstantName(identifier);
        var.setType(dataType);
        m_memberVariables.add(var);

        saveVariable(vbIdentifier, identifier, dataType);

        if (m_translateToJava) {

            return "public static final " + dataType + " " + identifier + " = "
                    + constValue + ";" + misc + newline;
        }
        else {

            String rtn = "public const " + dataType + " " + identifier + " = "
                    + constValue + ";" + misc + newline;
            
            if (m_translateToCairo) {
                if (G.beginLike(rtn, "public const String CSC")) {
                    rtn = identifier.substring(3) + ": "
                        + constValue + "," + misc + newline;
                }
                else if (G.beginLike(rtn, "public const String CST")) {
                    rtn = identifier.substring(3) + ": "
                        + constValue + "," + misc + newline;
                }
            }        
            
            return rtn;
        }
    }

    private String translatePrivateMember(String strLine) {
        // form is
            // dim variable_name as data_type
        strLine = strLine.trim();
        String[] words = G.splitSpace(strLine);//strLine.split("\\s+");
        String dataType = "";
        String identifier = "";
        String vbIdentifier = "";
        String misc = "";
        boolean isEventGenerator = false;

        if (words.length > 1) {
            vbIdentifier = words[1];

            // with events eg:
            //      private withevents my_obj_with_events as CObjetWithEvents ' some comments
            //      0       1           2                 3        4          >= 5
            //
            if (vbIdentifier.equalsIgnoreCase("WithEvents")) {
                vbIdentifier = words[2];
                identifier = getIdentifier(vbIdentifier);
                if (words.length > 4) {
                    dataType = words[4];
                }
                for (int i = 5; i < words.length; i++) {
                    misc += " " + words[i] ;
                }
                isEventGenerator = true;
            }
            else {
                identifier = getIdentifier(vbIdentifier);
                if (words.length > 3) {
                    dataType = words[3];
                }
                for (int i = 4; i < words.length; i++) {
                    misc += " " + words[i] ;
                }
            }
        }
        boolean isArray = false;
        if (!identifier.isEmpty()) {
            isArray = identifier.endsWith("()");
            if (isArray) {
                identifier = identifier.substring(0, identifier.length() - 2);
            }
            
            identifier = getCairoVariableName(identifier);
            
            Variable var = new Variable();
            var.setVbName(vbIdentifier);
            var.setJavaName(identifier);
            var.setType(dataType);
            var.isArray = isArray;
            var.isEventGenerator = isEventGenerator;
            if (isEventGenerator) {
                addToEventListeners(vbIdentifier,
                                    var.getJavaName(),
                                    dataType,
                                    getEventMacroName(var.getJavaName()));
            }
            m_memberVariables.add(var);
        }
        if (dataType.isEmpty()) {
            dataType = getObjectTypeName();
        }
        dataType = getDataType(dataType);

        saveVariable(vbIdentifier, identifier, dataType);

        String modifiers = "";
        if (m_isBasFile)
            modifiers = "static ";
        
        if (m_translateToCairo) {
            return "var " + identifier + getInitialValueForType(dataType) + ";" + misc + newline;
        }
        else {
            if (isArray)
                return "private " + modifiers + dataType + "[] " + identifier + getInitialValueForType(dataType) + ";" + misc + newline;
            else
                return "private " + modifiers + dataType + " " + identifier + getInitialValueForType(dataType) + ";" + misc + newline;
        }
    }

    private String translatePublicMember(String strLine) {
        // form is
        // dim variable_name as data_type
        strLine = strLine.trim();
        String[] words = G.splitSpace(strLine);//strLine.split("\\s+");
        String dataType = "";
        String identifier = "";
        String vbIdentifier = "";
        String misc = "";
        boolean isEventGenerator = false;

        if (words.length > 1) {
            vbIdentifier = words[1];
            // with events eg:
            //      private withevents my_obj_with_events as CObjetWithEvents ' some comments
            //      0       1           2                 3        4          >= 5
            //
            if (vbIdentifier.equalsIgnoreCase("WithEvents")) {
                vbIdentifier = words[2];
                identifier = getIdentifier(vbIdentifier);
                if (words.length > 4) {
                    dataType = words[4];
                }
                for (int i = 5; i < words.length; i++) {
                    misc += " " + words[i] ;
                }
                isEventGenerator = true;
            }
            else {
                identifier = getIdentifier(vbIdentifier);
                if (words.length > 3) {
                    dataType = words[3];
                }
                for (int i = 4; i < words.length; i++) {
                    misc += " " + words[i] ;
                }
            }
        }
        if (!identifier.isEmpty()) {
            
            identifier = getCairoVariableName(identifier);
            
            Variable var = new Variable();
            var.setVbName(vbIdentifier);
            var.setJavaName(identifier);
            var.setType(dataType);
            var.isEventGenerator = isEventGenerator;
            if (isEventGenerator) {
                addToEventListeners(vbIdentifier,
                                    var.getJavaName(),
                                    dataType,
                                    getEventMacroName(var.getJavaName()));
            }
            m_memberVariables.add(var);
        }
        if (dataType.isEmpty()) {
            dataType = getObjectTypeName();
        }
        dataType = getDataType(dataType);

        saveVariable(vbIdentifier, identifier, dataType, false, true);

        boolean isArray = identifier.endsWith("()");
        if (isArray) {
            identifier = identifier.substring(0, identifier.length() - 2);
        }
        
        identifier = getCairoVariableName(identifier);
        
        Variable var = new Variable();
        var.setVbName(vbIdentifier);
        var.setJavaName(identifier);
        var.packageName = m_packageName;
        var.setType(dataType);
        var.isPublic = true;
        var.isArray = isArray;
        m_publicVariables.add(var);

        String modifiers = "";
        if (m_isBasFile)
            modifiers = "static ";
        
        if (m_translateToCairo) {
            return "var " + identifier + getInitialValueForType(dataType) + ";" + misc + newline;
        }
        else {
            if (isArray)
                return "public " + modifiers + dataType + "[] " + identifier + getInitialValueForType(dataType) + ";" + misc + newline;
            else
                return "public " + modifiers + dataType + " " + identifier + getInitialValueForType(dataType) + ";" + misc + newline;
        }
    }

    private String getInitialValueForType(String dataType) {
        String iniValue = getDefaultForReturnType(dataType);
        if (!iniValue.isEmpty())
            iniValue = " = " + iniValue;
        return iniValue;
    }

    private String getIdentifier(String word) {
        String identifier = "";
        if (word.length() > 2 ) {
            if (word.substring(0,2).equals("m_")) {
                identifier = word.substring(0,3).toLowerCase();
                if (word.length() > 3 ) {
                    identifier += word.substring(3);
                }
            }
            else{
                identifier = word;
            }
        }
        else {
            identifier = word;
        }
        return identifier;
    }

    // we need three elements in custom events
    //  -- event class
    //  -- event listener interface
    //  -- event generator
    //
    // a) when the class which we are translating has public events
    // (private events doesn't have sense) we have to create the
    // event listener interface with a method for every public event and
    // a class which implements the event listener interface as and adapter
    // class (to free the listener to implement all the methods of the interface).
    // the listeners will extend the adapter class as an inner anonymous class.
    // the interface name will be named as the class plus the
    // postfix EventI eg: for a class named in vb6 code as cReport the interface
    // will be CReportEventI (remeber that every class will be capitalized)
    // and the adapter will be CReportEventA
    //
    // b) when the class which we are translating is the event listener
    // it has to declare an anonymous inner classes which extend
    // the adapter class (which implement the event listener
    // interface) for every variable which raises events.
    //
    // c) in visual basic 6 you need to instantiate the member variable
    // which generate events with an explicit assignment like
    //
    //      set m_event_generator = new ClassEventGenerator
    // or
    //      set m_event_generator = already_instantiated_event_generator
    //
    // we have to add after that point a call to the addListener method of the
    // event generator object.
    //
    // the problem is that we are translating in one read of the content
    // line by line from up to down and so at the point of this asignment
    // line we can't be sure that we know every event our class is
    // intrested to listen to. for this reason we need to reach the end
    // of the file to be sure we know all the code related to events of 
    // a "with events variable".
    //
    // to fix it we will add a macro to be replace after translating the class
    // with the definition of the anonymous inner class for every "with events
    // variable". this macro will be:
    //          __ADD_TO_LISTENER_name_of_the_generator_variable__
    //
    //  eg: if the generetor is m_report the macro will be
    //
    //          __ADD_TO_LISTENER_m_report__
    //
    private void addToEventListeners(String eventGeneratorVb,
            String eventGeneratorJava,
            String className,
            String eventMacro) {
        EventListener eventListener = new EventListener();
        eventListener.setGeneratorVb(eventGeneratorVb);
        eventListener.setGeneratorJava(eventGeneratorJava);
        eventListener.setAdapter(className + C_ADAPTER_POSTIFX);
        eventListener.setEventMacro(eventMacro);
        m_eventListeners.add(eventListener);
    }

    private String getEventMacroName(String variable) {
        return "__ADD_TO_LISTENER_" + variable + "__";
    }

    private String translateDim(String strLine) {
        // form is
            // dim variable_name as data_type
        strLine = strLine.trim();
        String[] words = G.splitSpace(strLine);//strLine.split("\\s+");
        String dataType = "";
        String vbIdentifier = "";
        String identifier = "";
        String misc = "";

        if (words.length > 1) {
            vbIdentifier = words[1];
            identifier = getVariableName(words[1]);
            if (words.length > 3) {
                dataType = words[3];
            }
            for (int i = 4; i < words.length; i++) {
                misc += " " + words[i] ;
            }
        }
        if (dataType.isEmpty()) {
            dataType = getObjectTypeName();
        }
        dataType = getDataType(dataType);

        if (m_translateToCairo) {
            identifier = translateVarNameToCairo(identifier);
        }
        
        identifier = getCairoVariableName(identifier);
        
        Variable var = new Variable();
        var.setJavaName(identifier);
        var.setVbName(vbIdentifier);
        var.setType(dataType);
        m_functionVariables.add(var);

        if (identifier.contains("(")) {
            words = G.split(identifier);
            if (words.length > 3) {
                dataType += "[" + words[2] + "]";
            }
            else {
                dataType += "[]";
            }
            dataType = m_translateToCairo ? "var" : dataType;
            return dataType + " " + identifier + " = null;" + misc + newline;
        }
        else {
            dataType = m_translateToCairo ? "var" : dataType;
            return dataType + " " + identifier + " = "
                    + getZeroValueForDataType(dataType) + ";" + misc + newline;
        }
    }

    private String removeExtraSpaces(String strLine) {
        String rtn = "";
        boolean previousWasAChar = false;
        for (int i = 0; i < strLine.length(); i++) {
            if (strLine.charAt(i) == ' ') {
                if (!previousWasAChar) {
                    rtn += " ";
                    previousWasAChar = true;
                }
            }
            else {
                rtn += strLine.charAt(i);
                previousWasAChar = false;
            }
        }
        return rtn;
    }

    public void initDbObjects() {
        m_classObject = new ClassObject();
        m_functionObject = new FunctionObject();
        m_variableObject = new VariableObject();
        m_typeClassObject = new ClassObject();
        m_enumClassObject = new ClassObject();
        createADODBClasses();
        createVBClasses();
    }

    public void initTranslator(String name) {
        m_isVbSource = false;
        m_codeHasStarted = false;
        m_attributeBlockHasStarted = false;
        m_inFunction = false;
        m_inEnum = false;
        m_inWith = false;
        m_withDeclaration = false;
        m_endWithDeclaration = false;
        m_type = "";
        m_vbClassName = "";
        m_javaClassName = "";
        m_collTypes.removeAll(m_collTypes);
        m_collEnums.removeAll(m_collEnums);
        m_collWiths.removeAll(m_collWiths);
        m_eventListeners.removeAll(m_eventListeners);
        m_memberVariables.removeAll(m_memberVariables);
        m_functionVariables.removeAll(m_functionVariables);
        m_raiseEvents = false;
        m_privateFunctions = new ArrayList<Function>();
        m_publicFunctions = new ArrayList<Function>();
        m_publicVariables = new ArrayList<Variable>();
        m_raiseEventFunctions = new ArrayList<String>();
        m_types = new ArrayList<Type>();
        m_tabCount = 0;
        m_listenerInterface = "";
        m_adapterClass = "";
        m_addDateAuxFunction = false;
        m_addParseDateAuxFunction = false;
        m_addIsNumericAuxFunction = false;
        m_addRedimAuxFunction = false;
        m_addRedimPreserveAuxFunction = false;
        m_returnValue = "";
        m_imports = new String[100];
        m_importCount = 0;
        m_setReturnValueFound = false;
        m_needReturnVariable = false;
        m_function = null;
        m_isBasFile = false;
        m_onErrorFound = false;
        m_onErrorLabel = "";
        m_onCatchBlock = false;
        m_scalaCode = "";
        
        // scala
        //
        m_discardProperty = false;
        m_discardedProperties = "";
        
        m_caseClassDataFields = "";
        m_caseClassPrefix = "";
        m_formData = "";
        m_writeData = "";
        m_createUpdateParamList = "";
        
        m_caseClassFields = "";
        m_caseClassNoFKFields = "";
        m_caseClassArgumentsFull = "";
        m_caseClassArgumentsApplyFull = "";
        m_caseClassArgumentsNoFK = "";
        m_caseClassEmptyArguments = "";
        
        m_camelField = "";
        
        m_parserMap = "";
        m_parserColumns = "";
        m_parserColumns2 = "";
        m_saveFieldList = "";
        
        initInCairoFlags();

        if (name.contains(".")) {
            if (name.length() > 0) {
                String ext = name.substring(name.length()-3).toLowerCase();
                if ( ext.equals("bas") || ext.equals("cls") || ext.equals("frm") ) {
                    m_isVbSource = true;
                }
                m_isBasFile = ext.equals("bas");
            }
        }
    }

    private void saveTypeClassInDB(String className) {
        int i = className.indexOf("'");
        if (i > 0) {
            className = className.substring(0, i - 1).trim();
        }
        i = className.indexOf(" ");
        if (i > 0) {
            className = className.substring(0, i - 1).trim();
        }        
        m_typeClassObject.setPackageName(m_packageName);
        m_typeClassObject.setVbName(className);
        m_typeClassObject.setJavaName(className);
        m_typeClassObject.getClassIdFromClassName();
        m_typeClassObject.saveClass();
    }

    private void saveEnumClassInDB(String className, boolean isPublic) {
        int i = className.indexOf("'");
        if (i > 0) {
            className = className.substring(0, i - 1).trim();
        }
        i = className.indexOf(" ");
        if (i > 0) {
            className = className.substring(0, i - 1).trim();
        }
        m_enumClassObject.setPackageName(m_packageName);
        m_enumClassObject.setVbName(className);
        m_enumClassObject.setJavaName(className);
        m_enumClassObject.getClassIdFromClassName();
        if (isPublic) {
            m_enumClassObject.setIsPublicEnum(true);
            m_enumClassObject.setEnumParentClass("");
        }
        else {
            m_enumClassObject.setIsPublicEnum(false);
            m_enumClassObject.setEnumParentClass(m_javaClassName);
        }
        m_enumClassObject.saveClass();
    }

    private void addToType(String strLine) {
        String className = "";
        strLine = G.ltrim(strLine);
        int startComment = getStartComment(strLine);
        String comments = "";
        if (startComment >= 0) {
            comments =  "//" + strLine.substring(startComment);
            strLine = strLine.substring(0, startComment-1);
        }

        if (strLine.length() > 5) {
            if (strLine.substring(0,5).toLowerCase().equals("type ")) {
                Type type = new Type();
                type.vbName = strLine.substring(5);
                className = type.vbName;
                type.javaName = className;
                type.getVbCode().append(strLine);
                m_types.add(type);
                m_type += "private class " + className + " {" + comments + newline;
                saveTypeClassInDB(className);
                return;
            }
        }

        if (strLine.length() > 12) {
            if (strLine.substring(0,12).toLowerCase().equals("public type ")) {
                Type type = new Type();
                type.isPublic = true;
                type.vbName = strLine.substring(12);
                className = type.vbName;
                type.javaName = className;
                type.getVbCode().append(strLine);
                m_types.add(type);
                m_type += "public class " + className + " {" + comments + newline;
                saveTypeClassInDB(className);
                return;
            }
        }

        if (strLine.length() > 13) {
            if (strLine.substring(0,13).toLowerCase().equals("private type ")) {
                Type type = new Type();
                type.vbName = strLine.substring(13);
                className = type.vbName;
                type.javaName = className;
                type.getVbCode().append(strLine);
                m_types.add(type);
                m_type += "private class " + className + " {" + comments + newline;
                saveTypeClassInDB(className);
                return;
            }
        }

        if (G.beginLike(strLine, "end type")) {
            m_inType = false;
            m_type += "}" + comments + newline + newline;
            m_collTypes.add(m_type);
            Type type = m_types.get(m_types.size()-1);
            type.getVbCode().append(strLine);
            type.getJavaCode().append(m_type);
            m_type = "";
            if (type.isPublic)
                m_caller.addPublicType(type);
        }
        else {
            String dataType = "";
            String identifier = "";

            Type type = m_types.get(m_types.size()-1);
            type.getVbCode().append(strLine);

            strLine = strLine.trim();
            String[] words = G.splitSpace(strLine);//strLine.split("\\s+");

            if (words.length > 0) {

                // check to see if it is an array
                //
                if (words[0].contains("(")) {

                    String size = words[0].substring(words[0].indexOf("(")+1);
                    if (size.equals(")")) {
                        dataType = getObjectTypeName() + "[]";
                    }
                    else {
                        if (words.length >= 3) {
                            if (words[1].equalsIgnoreCase("to")) {

                                int lowBound = Integer.parseInt(size);
                                size = words[2].substring(0,words[2].length()-1);
                                String upperBound = size;
                                if (lowBound == 1) {
                                    size = upperBound;
                                }
                                else {
                                    size = upperBound + " - " + ((Integer)(lowBound-1)).toString();
                                }

                                // complete sentence eg: type_member(low_bound to upper_bound) as data_type
                                //                       |                   | |  |          | |  |
                                //                       1                     2  3            4  5
                                //
                                if (words.length >= 5) {
                                    if (words[4].charAt(0) =='\'') {
                                        dataType = getObjectTypeName() + "[" + size + "]";
                                    }
                                    else {
                                        dataType = words[4] + "[" + size + "]";
                                    }
                                }
                                else {
                                    dataType = getObjectTypeName() + "[" + size + "]";
                                }
                            }
                            else {
                                size = words[0].substring(words[0].indexOf("(")+1);
                                size = size.substring(0, size.length()-1);
                                dataType = words[2] + "[" + size + "]";
                            }
                        }
                        // variant array like: type_member(dimension)
                        //
                        else {
                            size = words[0].substring(words[0].indexOf("(")+1);
                            size = size.substring(0, size.length()-1);
                            dataType = words[2] + "[" + size + "]";
                        }
                    }
                    identifier = words[0].substring(0, words[0].indexOf("("));
                }
                else {
                    // complete sentence eg: type_member as data_type
                    //
                    if (words.length >= 3) {

                        if (words[1].charAt(0) =='\'') {
                            dataType = getObjectTypeName();
                        }
                        else {
                            if (words[2].charAt(0) =='\'') {
                                dataType = getObjectTypeName();
                            }
                            else {
                                dataType = words[2];
                            }
                        }
                    }
                    // implicit sentence eg: type_member {no declaration of type}
                    //
                    else {
                        dataType = getObjectTypeName();
                    }
                    identifier = words[0];
                }

                String vbIdentifier = identifier;
                if (!identifier.isEmpty()) {
                    if (identifier.length() > 2)
                        identifier = identifier.substring(0, 1).toLowerCase() + identifier.substring(1);
                    else
                        identifier = identifier.substring(0, 1).toLowerCase();
                }

                saveVariableInType(vbIdentifier, identifier, dataType);

                identifier = getCairoVariableName(identifier);
                
                Variable var = new Variable();
                var.setVbName(vbIdentifier);
                var.setJavaName(identifier);
                var.setType(dataType);
                var.isPublic = true;
                type.getMembersVariables().add(var);

                m_type += "    public " + dataType + ' ' + identifier + ";" + comments + newline;
            } 
            else {
                m_type += strLine;
            }
        }
    }

    private void addToEnum(String strLine) {
        strLine = G.ltrim(strLine);

        if (strLine.length() > 5) {
            if (strLine.substring(0, 5).toLowerCase().equals("enum ")) {
                String enumClass = strLine.substring(5);
                saveEnumClassInDB(enumClass, m_isBasFile);
                if (m_translateToJava)
                    m_enum += "private class " + enumClass + " {" + newline;
                else
                    m_enum += "private enum " + enumClass + " {" + newline;
                return;
            }
        }

        if (strLine.length() > 12) {
            if (strLine.substring(0, 12).toLowerCase().equals("public enum ")) {
                String enumClass = strLine.substring(12);
                saveEnumClassInDB(enumClass, true);
                if (m_translateToJava)
                    m_enum += "public class " + enumClass + " {" + newline;
                else
                    m_enum += "public enum " + enumClass + " {" + newline;
                return;
            }
        }

        if (strLine.length() > 13) {
            if (strLine.substring(0, 13).toLowerCase().equals("private enum ")) {
                String enumClass = strLine.substring(13);
                saveEnumClassInDB(enumClass, false);
                if (m_translateToJava)
                    m_enum += "private class " + enumClass + " {" + newline;
                else
                    m_enum += "private enum " + enumClass + " {" + newline;
                return;
            }
        }

        if (G.beginLike(strLine,"end enum")) {
            m_inEnum = false;
            int lastColon = 0;
            for (int i = 0; i < m_enum.length(); i++) {
                if (m_enum.charAt(i) == ',') {
                    lastColon = i;
                }
                else if (m_enum.charAt(i) == '\'') {
                    break;
                }
            }
            if (lastColon > 0) {
                m_enum = m_enum.substring(0,lastColon) + m_enum.substring(lastColon+1);
            }
            m_enum += "}" + newline + newline;
            m_collEnums.add(m_enum);
            m_enum = "";
        }
        else {
            String constValue = "";
            String identifier = "";
            String misc = "";

            strLine = strLine.trim();
            String[] words = G.splitSpace(strLine);//strLine.split("\\s+");

            if (words.length > 0) {

                identifier = words[0];
                
                // complete sentence eg: enum_member = enum_value
                //
                if (words.length >= 3) {
                    if (words[1].charAt(0) == '=') {
                        constValue = words[2];
                    }
                }
                // implicit sentence eg: enum_member {no declaration of value}
                //
                else {
                    int lenIdentifier = identifier.length();
                    if (strLine.length() > lenIdentifier) {
                        misc = "//" + strLine.substring(lenIdentifier);
                    }
                }

                if (constValue.isEmpty()) {
                    if (m_translateToJava)
                        m_enum += "    public static final int " + identifier.toUpperCase() 
                                + ";" + misc + newline;
                    else
                        m_enum += "    " + identifier.toUpperCase() 
                                + "," + misc + newline;
                }
                else {
                    if (constValue.length() > 2) {
                        if (constValue.substring(0, 2).equalsIgnoreCase("&h")) {
                            constValue = "0x" + constValue.substring(2);
                        }
                    }
                    if (m_translateToJava)
                        m_enum += "    public static final int " + identifier.toUpperCase() + " = "
                                + constValue + ";" + misc + newline;
                    else
                        m_enum += "    " + identifier.toUpperCase() + " = "
                                + constValue + "," + misc + newline;
                }
                saveVariableInEnum(identifier, identifier.toUpperCase(), "int");
            }
            else {
                m_enum += strLine;
            }
        }
    }

    public String getSubClasses() {
        String subClasses = "";
        for (int i = 0; i < m_collTypes.size(); i++) {
            subClasses += m_collTypes.get(i) + newline;
        }
        for (int i = 0; i < m_collEnums.size(); i++) {
            subClasses += m_collEnums.get(i) + newline;
        }
        return subClasses;
    }
    
    public String getScalaFiles() {
        return 
                "// Controller \n\n"
                + getControllerFile()
                + "\n\n// Model\n\n"
                + getModelFile()
                + "\n\n// Router\n\n"
                + getRouter()
                + "\n\n\n\n/*" + m_discardedProperties + "*/\n";
    }

    public void addEventListenerInterface() {
        if (!m_listenerInterface.isEmpty())
            m_caller.addClass(m_javaClassName + C_INTERFACE_POSTIFX,
                    "public interface "
                    + m_javaClassName
                    + C_INTERFACE_POSTIFX + " {"
                    + newline
                    + m_listenerInterface
                    + "}");
    }

    public void addEventListenerAdapter() {
        if (!m_listenerInterface.isEmpty())
            m_caller.addClass(m_javaClassName + C_ADAPTER_POSTIFX,
                    "public class "
                    + m_javaClassName
                    + C_ADAPTER_POSTIFX + " implements "
                    + m_javaClassName
                    + C_INTERFACE_POSTIFX + " {"
                    + newline
                    + m_adapterClass
                    + "}");
    }

    public void implementListeners(StringBuilder code) {
        
        Iterator itrListener = m_eventListeners.iterator();
        while(itrListener.hasNext()) {
            EventListener listener = (EventListener)itrListener.next();
            String innerClass = listener.getAnonymousInnerClass();
            String callToAddListener = listener.getGeneratorJava() + ".addListener("
                                        + innerClass + ")";
            int i = code.indexOf(listener.getEventMacro());
            if (i > 0) {
                int j = i + listener.getEventMacro().length();
                code.replace(i, j, callToAddListener);
            }
        }
    }

    private void checkBeginBlock(String strLine) {
        m_wasSingleLineIf = false;
        strLine = G.ltrimTab(strLine);

        if (m_onCatchBlock) {
            m_tabCount++;
            m_onCatchBlock = false;
        }
        // If
        //
        else if (G.beginLike(strLine, "If ")) {
            int startComment = getStartComment(strLine);
            if (startComment >= 0) {
                strLine = strLine.substring(0, startComment-1);
            }
            strLine = strLine.trim();
            if (G.endLike(strLine, " Then")) {
                m_tabCount++;
                m_wasSingleLineIf = false;
            }
            else {
                m_wasSingleLineIf = true;
            }
        }
        // Else If
        //
        else if (G.beginLike(strLine, "ElseIf ")) {
            int startComment = getStartComment(strLine);
            if (startComment >= 0) {
                strLine = strLine.substring(0, startComment-1);
            }
            strLine = strLine.trim();
            if (G.endLike(strLine, " Then")) {
                m_tabCount++;
                m_wasSingleLineIf = false;
            }
            else {
                m_wasSingleLineIf = true;
            }
        }
        // Else
        //
        else if (G.beginLike(strLine, "Else ")) {
            int startComment = getStartComment(strLine);
            if (startComment >= 0) {
                strLine = strLine.substring(0, startComment-1);
            }
            strLine = strLine.trim();
            if (strLine.trim().equalsIgnoreCase("Else")) {
                m_tabCount++;
                m_wasSingleLineIf = false;
            }
            else {
                m_wasSingleLineIf = true;
            }
        }
        // Else
        //
        else if (strLine.trim().equalsIgnoreCase("Else")) {
            m_tabCount++;
        }
        // For
        //
        else if (G.beginLike(strLine, "For ")) {
            m_tabCount++;
        }
        // While
        //
        else if (G.beginLike(strLine, "While ")) {
            m_tabCount++;
        }
        // Do
        //
        else if (G.beginLike(strLine, "Do ")) {
            m_tabCount++;
        }
        // With
        //
        //else if (G.beginLike(strLine, "With ")) {
        //    m_tabCount++;
        //}
        // Select Case
        //
        else if (G.beginLike(strLine, "Select Case ")) {
            m_tabCount+=2;
        }
