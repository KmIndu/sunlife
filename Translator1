/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package buggymastercode;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

/**
 *
 * @author jalvarez
 */
public class Translator {

    static private final String newline = "\n";
    static private final String C_TAB = "  ";
    static private final String outerTabHandler = "                  ";
    static private final String innerTabHandler = outerTabHandler + "  ";
    static private final String C_NUMBERS = "-+0123456789";
    static private final String C_SEPARARTORS = "_._=_&&_||_+_-_*_/_==_!=_<_>_<=_>=_";
    static private final String C_SYMBOLS = " +-()*/,";
    static private final String C_RESERVED_WORDS =
        "_and_as_byval_byref_case_class_dim_elseif_else_end_each_for_friend_"
     + "_function_global_goto_if_in_is_next_not_of_or_on error_on resume_print_"
     + "_private_public_raise_select_sub_type_while_wend_char_date_double_integer_"
     + "_long_object_short_string_variant_#if_#end_exit_redim_on_me_";

    static private final String C_INTERFACE_POSTIFX = "EventI";
    static private final String C_ADAPTER_POSTIFX = "EventA";

    static private final String C_NUMERIC_DATA_TYPES = "||int||integer||double||single||currency||short||long||";

    private boolean m_isVbSource = false;
    private boolean m_codeHasStarted = false;
    private boolean m_attributeBlockHasStarted = false;
    private boolean m_inFunction = false;
    private boolean m_inEnum = false;
    private boolean m_inWith = false;
    private boolean m_inType = false;
    private boolean m_withDeclaration = false;
    private boolean m_endWithDeclaration = false;
    private boolean m_emptyLine = false;
    private String m_returnValue = ""; // default value for function return

    private String[] m_iterators = {"","_i","_j","_k","_t","_w","_z"};
    private int m_iteratorIndex = 0;
    private String[] m_imports = null;
    private int m_importCount = 0;
    
    private boolean m_translateToJava = true;
    private boolean m_translateToCairo = false;
    private boolean m_parseToCairo = false;
    private boolean m_inRemoveFunction = false;
    private boolean m_lastLineWasEmpty = false;

    // member variables of the class which we are translating
    //
    private ArrayList<Variable> m_memberVariables = new ArrayList<Variable>();
    // parameters and local variables of the function which we are translating
    //
    private ArrayList<Variable> m_functionVariables = new ArrayList<Variable>();
    // public functions, subs and properties of the class which we are 
    // translating
    //
    private ArrayList<Function> m_publicFunctions = null;
    // private functions, subs and properties of the class which we are
    // translating
    //
    private ArrayList<Function> m_privateFunctions = null;
    // this is used to build the dictionary of public variables of every
    // class in this project. this collection is used to found identifiers
    // in the code which references to public member of objects of other
    // classes.
    // public variables are accessed by the dot operator and assigned using the
    // equal sign (=) eg: "m_objmember.publicVariable = 1;" on the other
    // hand public properties are translated as setters and getters and the
    // assignment doesn't use the equals sign but the setter method.
    //
    private ArrayList<Variable> m_publicVariables = null;
    // files (frm, bas, cls) in this vbp
    //
    private ArrayList<SourceFile> m_collFiles = new ArrayList<SourceFile>();
    private ArrayList<Variable> m_collWiths = new ArrayList<Variable>();
    private ArrayList<Type> m_types = new ArrayList<Type>();
    // classes in java (String, Date, etc.)
    //
    private ArrayList<SourceFile> m_collJavaClassess = new ArrayList<SourceFile>();

    // the current type which we are translaing
    //
    private String m_type = "";
    // the collection of every type public and private declared
    // in the class which we are translating
    //
    private ArrayList<String> m_collTypes = new ArrayList<String>();
    // the current enum which we are translating
    //
    private String m_enum = "";
    // the collection of every enum public and private declared
    // in the class which we are translating
    //
    private ArrayList<String> m_collEnums = new ArrayList<String>();

    // member variables which can raise events
    //
    private ArrayList<EventListener> m_eventListeners = new ArrayList<EventListener>();
    // the resulting interface declaration of add every public event declaration
    // in the class which we are translating
    //
    private String m_listenerInterface = "";
    // the resulting class declaration of add every public event declaration
    // in the class which we are translating with a null implementation
    // of every method
    //
    private String m_adapterClass = "";
    // this flag tell us if we need add a collection variable to
    // hold the listeners and two methods to add and remove objets
    // in the collection
    //
    private boolean m_raiseEvents = false;
    // this collection is filled when we parse the class and
    // used by translate function declaration to determine if
    // the function has to be syncrhonized
    //
    private ArrayList<String> m_raiseEventFunctions = new ArrayList<String>();

    private boolean m_wasSingleLineIf = false;
    private String m_strBuffer = "";
    private int m_tabCount = 0;
    // the vb name of the function we are parsing or translating
    //
    private String m_vbFunctionName = "";
    private String m_vbClassName = "";
    private String m_javaClassName = "";
    private boolean m_isFirstCase = false;
    private boolean m_previousWasReturn = false;
    // flag to add auxiliary function to support vb date expecific
    // functionality
    //
    private boolean m_addDateAuxFunction = false;
    private boolean m_addDateAuxFunctionToG = false;
    // flag to add auxiliary function to support vb CDate function
    //
    private boolean m_addParseDateAuxFunction = false;
    private boolean m_addParseDateAuxFunctionToG = false;
    // flag to add auxiliary function to support vb IsNumeric function
    //
    private boolean m_addIsNumericAuxFunction = false;
    private boolean m_addIsNumericAuxFunctionToG = false;
    // flag to add auxiliary function to support vb redim and redim preserve
    //
    private boolean m_addRedimAuxFunction = false;
    private boolean m_addRedimAuxFunctionToG = false;
    private boolean m_addRedimPreserveAuxFunction = false;
    private boolean m_addRedimPreserveAuxFunctionToG = false;
    //
    private String m_packageName = "";
    // packages refence by this visual basic project in the order it appears in
    // vbp file
    //
    private String[] m_references = null;

    private ClassObject m_classObject;
    private FunctionObject m_functionObject;
    private VariableObject m_variableObject;

    private TranslatorWorker m_caller = null;

    private ClassObject m_typeClassObject;
    private ClassObject m_enumClassObject;

    private boolean m_AddAuxFunctionsToClass = false;
    private boolean m_UseGAuxFunctions = false;
    private boolean m_UseCSUtils = false;

    // used to define if the function need a variable rtn to
    // hold the return value
    //
    private boolean m_setReturnValueFound = false;
    private boolean m_needReturnVariable = false;
    private Function m_function = null;

    private boolean m_isBasFile = false;

    // to translate On Error
    //
    private boolean m_onErrorFound = false;
    private String m_onErrorLabel = "";
    private boolean m_onCatchBlock = false;
    private boolean m_catchBlockIsOpen = false;
    
    private boolean m_inCairoValidate = false;
    private boolean m_inCairoValidateItems = false;
    private boolean m_inCairoIsEmptyRow = false;
    private boolean m_inCairoSave = false;
    private boolean m_inCairoSaveItems = false;
    private boolean m_inCairoShowDoc = false;
    private boolean m_inCairoTerminate = false;
    private boolean m_inCairoDestroy = false;
    private boolean m_inCairoMessageEx = false;
    private boolean m_inCairoLoad = false;
    private boolean m_inCairoPLoad = false;
    private boolean m_inCairoLoadCollection = false;    
    private String m_refreshCollection = "";
    private boolean m_inCairoDelete = false;
    private boolean m_inCairoEdit = false;
    private boolean m_inCairoEditNew = false;
    private boolean m_inCairoDiscardChanges = false;
    private boolean m_inCairoCopy = false;
    private boolean m_inPropertyChange = false;
    private boolean m_propertyChangeIsNotEmpty = false;
    
    private String m_scalaCode = "";
    
    private String[] m_cairoNames = {  
        "cIABMClient_EditNew", "editNew", 
        "getCIABMClient_Aplication", "getApplication",
        "getCIABMClient_CanAddDocDigital", "editDocumentsEnabled",
        "getCIABMClient_CanCopy", "copyEnabled",
        "getCIABMClient_CanNew", "addEnabled",
        "cIABMClient_ShowDocDigital", "showDocDigital",
        "cIABMClient_MessageEx", "messageEx",
        "cIABMClient_DiscardChanges", "discardChanges",
        "cIABMClient_ListAdHock", "_REMOVE_",
        "cIABMClientGrid_ColumnCancelEdit", "_REMOVE_",
        "cIABMClient_Load", "_REMOVE_",
        "cIABMClient_PropertyChange", "propertyChange",
        "cIABMClient_Save", "save",
        "cIABMClient_Terminate", "terminate",
        "cIABMClient_Copy", "copy",
        "getCIABMClient_Title", "getTitle",
        "cIABMClient_Validate", "validate",
        "getCIEditGeneric_ObjAbm", "getDialog",
        "setCIEditGeneric_TreeId", "setTreeId",
        "getCIEditGeneric_TreeId", "getTreeId",
        "cIEditGeneric_GridAdd", "_REMOVE_",
        "cIEditGeneric_GridEdit", "_REMOVE_",
        "cIEditGeneric_GridRemove", "_REMOVE_",
        "cIEditGeneric_ShowList", "list",
        "setCIEditGeneric_ObjAbm", "setDialog",
        "getCIEditGeneric_Editing", "isEditing",
        "cIEditGeneric_Delete", "delete",
        "cIEditGeneric_Search", "_REMOVE_",
        "cIEditGeneric_Edit", "edit",
        "cIEditGeneric_PrintObj", "_REMOVE_",
        "setCIEditGeneric_ObjTree", "setTree",
        "cIEditGeneric_PropertyChange", "_REMOVE_",
        "setCIEditGeneric_BranchId", "setBranchId",
        "getCIEditGeneric_BranchId", "getBranchId",
        "cIEditGeneric_TabClick", "_REMOVE_",
        "cIEditGeneric_Preview", "_REMOVE_",
        "cIMenuClient_Initialize", "_REMOVE_",
        "cIMenuClient_ProcessMenu", "_REMOVE_",
        "class_Terminate", "destroy",
        "class_Initialize", "initialize",
        "iProperty", "property"};
    
    private String[] m_cairoVarNames = {
        "iProperty", "property",
        "clave", "key"
    };
    

    public Translator() {
        
        m_collJavaClassess = new ArrayList<SourceFile>();
        SourceFile source = null;
        Function fun = null;

        // String
        //
        source = new SourceFile();
        source.setJavaName("String");
        source.setPublicFunctions(new ArrayList<Function>());

            // substring
            //
            fun = new Function();
            if (m_translateToJava)
                fun.getReturnType().setJavaName("substring");
            else
                fun.getReturnType().setJavaName("Substring");
            fun.getReturnType().setType("String");
            source.getPublicFunctions().add(fun);

            // toLowerCase
            //
            fun = new Function();
            if (m_translateToJava)
                fun.getReturnType().setJavaName("toLowerCase");
            else
                fun.getReturnType().setJavaName("ToLower");
            fun.getReturnType().setType("String");
            source.getPublicFunctions().add(fun);

            // toUpperCase
            //
            fun = new Function();
            if (m_translateToJava)
                fun.getReturnType().setJavaName("toUpperCase");
            else
                fun.getReturnType().setJavaName("ToUpper");
            fun.getReturnType().setType("String");
            source.getPublicFunctions().add(fun);

            // trim
            //
            fun = new Function();
            if (m_translateToJava)
                fun.getReturnType().setJavaName("trim");
            else
                fun.getReturnType().setJavaName("Trim");
            fun.getReturnType().setType("String");
            source.getPublicFunctions().add(fun);
        
        m_collJavaClassess.add(source);

        Preference pref = PreferenceObject.getPreference(G.C_AUX_FUN_ID);
        if (pref != null) {
            if (pref.getValue().equals(G.C_AUX_FUN_IN_CLASS_SOURCE))
                m_AddAuxFunctionsToClass = true;
            else if (pref.getValue().equals(G.C_AUX_FUN_IN_G_CLASS))
                m_UseGAuxFunctions = true;
            else if (pref.getValue().equals(G.C_AUX_FUN_IN_CS_LIBRARY))
                m_UseCSUtils = true;
        }
    }
    
    public void setCaller(TranslatorWorker caller) {
        m_caller = caller;
    }

    public void setPackage(String packageName) {
        m_packageName = packageName;
    }

    public void setReferences(String[] references) {
        m_references = references;
    }

    public void setSourceFiles(ArrayList<SourceFile> sourceFiles) {
        m_collFiles = sourceFiles;
    }
    
    public void setTranslateToJava(boolean value) {
        m_translateToJava = value;
    }
    
    public void setTranslateToCairo(boolean value) {
        m_translateToCairo = value;
    }
    
    public void setParseToCairo(boolean value) {
        m_parseToCairo = value;
    }

    public boolean isVbSource() {
        return m_isVbSource;
    }

    public String getVbClassName() {
        return m_vbClassName;
    }

    public String getJavaClassName() {
        return m_javaClassName;
    }

    public ArrayList<Function> getPublicFunctions() {
        return m_publicFunctions;
    }

    public ArrayList<Function> getPrivateFunctions() {
        return m_privateFunctions;
    }

    public ArrayList<Variable> getPublicVariables() {
        return m_publicVariables;
    }

    public boolean deletePackage(String packageName) {
        String sqlstmt = "delete from tvariable where cl_id in "
                            + "(select cl_id from tclass where cl_packagename = "
                            + Db.getString(packageName) + ")";
        if (Db.db.execute(sqlstmt)) {

            sqlstmt = "delete from tfunction where cl_id in "
                                + "(select cl_id from tclass where cl_packagename = "
                                + Db.getString(packageName) + ")";
            if (Db.db.execute(sqlstmt)) {

                sqlstmt = "delete from tclass where cl_packagename = "
                            + Db.getString(packageName);
                if (Db.db.execute(sqlstmt)) {
                    return true;
                }
                else {
                    return false;
                }
            }
            else {
                return false;
            }
        }
        else {
            return false;
        }
    }

    public ArrayList<String> getRaiseEventFunctions() {
        return m_raiseEventFunctions;
    }

    public void setRaiseEventFunctions(ArrayList<String> functions) {
        m_raiseEventFunctions = functions;
    }

    public void parse(String strLine) {
        if (m_isVbSource) {
            if (m_codeHasStarted) {
                parseLine(strLine);
            }
            else {
                if (strLine.contains("Attribute VB_Name = \"")) {
                    m_attributeBlockHasStarted = true;
                    m_vbClassName = strLine.substring(21, strLine.length()-1);
                    m_javaClassName = m_vbClassName;
                    
                    // debug
                    /*
                    if (m_vbClassName.equalsIgnoreCase("mGlobal")) {
                        int i = 9999;
                    }
                     /* 
                     */
                    // debug
                }
                else {
                    if (m_attributeBlockHasStarted) {
                        if (strLine.length() < 9) {
                            m_codeHasStarted = true;
                            parseLine(strLine);
                        }
                        else {
                            if (!strLine.substring(0,9).equals("Attribute")) {
                                m_codeHasStarted = true;
                                parseLine(strLine);
                            }
                        }
                    }
                    else {
                        if (strLine.length() >= 9) {
                            if (strLine.substring(0,9).equals("Attribute")) {
                                m_attributeBlockHasStarted = true;
                            }
                        }
                    }
                }
            }
        }
    }

    public String translate(String strLine) {
        String rtn = "";
        if (m_isVbSource) {
            if (m_codeHasStarted) {
                rtn = translateLine(strLine);
            }
            else {
                if (strLine.contains("Attribute VB_Name = \"")) {
                    m_attributeBlockHasStarted = true;
                    String className = strLine.substring(21, strLine.length()-1);
                    m_vbClassName = className;
                    m_javaClassName = m_vbClassName;
                    m_classObject.setPackageName(m_packageName);
                    m_classObject.setVbName(m_vbClassName);
                    m_classObject.setJavaName(m_javaClassName);
                    m_classObject.getClassIdFromClassName();
                    m_classObject.saveClass();
                    m_tabCount++;
                    
                    if (m_translateToCairo) {
                        rtn = addJavaScriptHeader();
                    }
                    else {
                        rtn = "public class " + className + " {" + newline + newline;
                    }                    
                }
                else {
                    if (m_attributeBlockHasStarted) {
                        if (strLine.length() < 9) {
                            m_codeHasStarted = true;
                            rtn = translateLine(strLine);
                        }
                        else {
                            if (!strLine.substring(0,9).equals("Attribute")) {
                                m_codeHasStarted = true;
                                rtn = translateLine(strLine);
                            }
                            else
                                rtn = "";
                        }
                    }
                    else {
                        if (strLine.length() < 9) {
                            rtn = "";
                        }
                        else {
                            if (strLine.substring(0,9).equals("Attribute")) {
                                m_attributeBlockHasStarted = true;
                            }
                            rtn = "";
                        }
                    }
                }
            }
        }
        if (rtn.contains("return ")) {
            m_previousWasReturn = true;
        }
        else if (rtn.contains("return;")) {
            m_previousWasReturn = true;
        }
        else if (!rtn.trim().isEmpty()) {
            m_previousWasReturn = false;
        }
        if (m_emptyLine) {
            m_emptyLine = false;
            rtn = "";
        }
        if (m_translateToCairo) {
            rtn = removeCairoLines(rtn);
            rtn = replaceCairoNames(rtn);
            rtn = removeCairoLinesAfterReplace(rtn);
            rtn = translateLineInCairoFunction(rtn, strLine);
            rtn = applyLastReplace(rtn);
            if (G.ltrim(rtn).equals("\n")) {
                if (m_lastLineWasEmpty) {
                    rtn = "";
                }
                else {
                    m_lastLineWasEmpty = true;
                }
            }
            else if (!rtn.trim().isEmpty()) {
                m_lastLineWasEmpty = false;
            }
        }
        if (m_inRemoveFunction) {
            rtn = "";
        }        
        return rtn;
    }

    public String getImportSection() {
        String rtn = "";

        if (m_addDateAuxFunction || m_addParseDateAuxFunction) {
            addToImportList("import java.text.DateFormat;");
            addToImportList("import java.text.ParseException;");
            addToImportList("import java.text.SimpleDateFormat;");
            addToImportList("import java.text.Date;");
        }

        if (m_addIsNumericAuxFunction) {
            addToImportList("import java.text.ParseException;");
        }

        for (int i = 0; i < m_importCount; i++) {
            rtn += m_imports[i] + newline;
        }

        if (!rtn.isEmpty())
            rtn = newline + rtn + newline;

        return rtn;
    }

    private void addToImportList(String reference) {
        for (int i = 0; i < m_importCount; i++) {
            if (m_imports[i].equals(reference)) {
                return;
            }
        }
        m_importCount++;
        m_imports[m_importCount-1] = reference;
    }

    public String getEventListenerCollection() {
        if (m_raiseEvents) {
            String className = m_javaClassName + C_INTERFACE_POSTIFX;
            String rtn = newline + "    // event listener collection"
                            + newline + "    //" + newline
                            + "    private ArrayList<"
                            + className
                            + "> m_listeners = new ArrayList<"
                            + className
                            + ">();" + newline + newline
                            + "    public synchronized void addListener("
                            + className
                            + " l) {" + newline
                            + "        m_listeners.add(l);" + newline
                            + "    }" + newline + newline
                            + "    public synchronized void removeListener("
                            + className
                            + " l) {" + newline
                            + "        m_listeners.remove(l);" + newline
                            + "    }" + newline;
            return rtn;
        }
        else
            return "";
    }
    
    public String getClosingBracket() {
        if (m_translateToCairo) {
            return addJavaScriptFooter();
        }
        else{
            return "}";
        }            
    }

    public String getAuxFunctions() {
        String rtn = "";

        if (m_addDateAuxFunction) {
            rtn += newline + getDateAuxFunction();
        }

        if (m_addParseDateAuxFunction) {
            rtn += newline + getParseDateAuxFunction();
        }

        if (m_addIsNumericAuxFunction) {
            rtn += newline + getIsNumericAuxFunction();
        }

        if (m_addRedimAuxFunction) {
            rtn += newline + getRedimAuxFunction();
        }

        if (m_addRedimPreserveAuxFunction) {
            rtn += newline + getRedimPreserveAuxFunction();
        }

        return rtn;
    }

    public String getGImportSection() {
        String rtn = "";
        m_importCount = 0;

        if (m_addDateAuxFunctionToG || m_addParseDateAuxFunctionToG) {
            addToImportList("import java.text.DateFormat;");
            addToImportList("import java.text.ParseException;");
            addToImportList("import java.text.SimpleDateFormat;");
            addToImportList("import java.text.Date;");
        }

        if (m_addIsNumericAuxFunctionToG) {
            addToImportList("import java.text.ParseException;");
        }

        for (int i = 0; i < m_importCount; i++) {
            rtn += m_imports[i] + newline;
        }

        if (!rtn.isEmpty())
            rtn = newline + rtn + newline;

        return rtn;
    }

    public String getGClass() {
        if (m_UseGAuxFunctions) {

            String rtn = "// Class G : Auxiliary functions" 
                            + newline + "//" + newline + newline
                            + getGImportSection()
                            + "public class G {" + newline;

            if (m_addDateAuxFunctionToG) {
                rtn += newline + getDateAuxFunction();
            }

            if (m_addParseDateAuxFunctionToG) {
                rtn += newline + getParseDateAuxFunction();
            }

            if (m_addIsNumericAuxFunctionToG) {
                rtn += newline + getIsNumericAuxFunction();
            }

            if (m_addRedimAuxFunctionToG) {
                rtn += newline + getRedimAuxFunction();
            }

            if (m_addRedimPreserveAuxFunctionToG) {
                rtn += newline + getRedimPreserveAuxFunction();
            }

            rtn += newline + "}";

            return rtn;

        }
        else
            return "";

    }

    private String getDateAuxFunction() {
        return
                    "    private static Date getDateFromString(String date) {" + newline +
                    "        DateFormat df = new SimpleDateFormat(\"MM/dd/yyyy\");" + newline +
                    "        date = date.replace(\"#\",\"\");" + newline +
                    "        Date dateValue = null;" + newline +
                    "        try {" + newline +
                    "            dateValue = df.parse(date);" + newline +
                    "        } catch (ParseException ex) {/* it can not be possible*/}" + newline +
                    "        return dateValue;" + newline +
                    "    }" + newline;

    }

    private String getParseDateAuxFunction() {
        return
                    "    private static Date parseDate(String date) throws ParseException {" + newline +
                    "        DateFormat df = new SimpleDateFormat(\"MM/dd/yyyy\");" + newline +
                    "        return df.parse(date);" + newline +
                    "    }" + newline;
    }

    private String getIsNumericAuxFunction() {
        return
                    "    private static boolean isNumeric(String number) {" + newline +
                    "        try {" + newline +
                    "            Double.parseDouble(number);" + newline +
                    "            return true;" + newline +
                    "        } " + newline +
                    "        catch (ParseException ex) {" + newline +
                    "            return false;" + newline +
                    "        }" + newline +
                    "    }" + newline;
    }

    private String getRedimAuxFunction() {
        return getRedimAuxFunctionForType("String");
    }

    private String getRedimAuxFunctionForType(String type) {
        return
                    "    public static " + type + "[] redim(" + type + "[] source, int size) {" + newline +
                    "        if (size == 0) {" + newline +
                    "            return null;" + newline +
                    "        }" + newline +
                    "        else {" + newline +
                    "            return new " + type + "[size];" + newline +
                    "        }" + newline +
                    "    }" + newline;
    }

    private String getRedimPreserveAuxFunction() {
        return getRedimPreserveAuxFunctionForType("String");
    }

    private String getRedimPreserveAuxFunctionForType(String type) {
        return
                    "    public static " + type + "[] redimPreserve(" + type + "[] source, int size) {" + newline +
                    "        if (size == 0) {" + newline +
                    "            return null;" + newline +
                    "        }" + newline +
                    "        else {" + newline +
                    "            " + type + "[] tmp = new " + type + "[size];" + newline +
                    "            if (source != null) {" + newline +
                    "                for (int i = 0; i < Math.min(source.length, tmp.length); i++) {" + newline +
                    "                    tmp[i] = source[i];" + newline +
                    "                }" + newline +
                    "            }" + newline +
                    "            return tmp;" + newline +
                    "        }" + newline +
                    "    }" + newline;
    }

    private void parseLine(String strLine) {
        // two kind of sentences
            // In function
            // Declarations

        // functions
            // Function
            // Sub
            // Property

        // if the sentence is split in two or more lines
        // we need to join the lines before translate it
        //
        if (isSentenceComplete(strLine)) {

            strLine = m_strBuffer + G.ltrimTab(strLine);
            m_strBuffer = "";

            strLine = removeLineNumbers(strLine);

            if (isEmptyLine(strLine)) {
                return;
            }
            if (isVbSpecificCode(strLine)) {
                return;
            }
            if (isComment(strLine)) {
                return;
            }
            if (isDeclareApi(strLine)) {
                return;
            }
            else if (isBeginOfType(strLine)) {
                m_inType = true;
                return;
            }
            else if (isEndOfType(strLine)) {
                return;
            }
            if (m_inType) {
                return;
            }
            else if (isBeginOfEnum(strLine)) {
                m_inEnum = true;
                return;
            }
            else if (isEndOfEnum(strLine)) {
                return;
            }
            else if (m_inEnum) {
                return;
            }
            else if (isEndFunction(strLine)) {
                setNeedReturnValue();
                m_function = null;
                m_inFunction = false;
                return;
            }
            else if (m_inFunction) {
                checkRaiseEvent(strLine);
                checkNeedReturnVariable(strLine);
                return;
            }
            else {
                // first check for Function | Sub | Property
                if (isBeginOfFunction(strLine)) {
                    parseFunctionDeclaration(strLine);
                    return;
                }
                // declarations
                else {
                    parsePublicMember(strLine);
                    return;
                }
            }
        }
        // split sentences
        else {
            m_strBuffer += G.rtrim(strLine.substring(0, strLine.length()-1)) + " " ;
            return;
        }
    }

    private String translateLine(String strLine) {
        
        // debug
        
        //if (G.beginLike(strLine.trim(), "With .Add(Nothing, rs(cscPrtId).Value)")) {
        //    int i = 9999;
        //}
        
        
        // two kind of sentences
            // In function
            // Declarations

        // functions
            // Function
            // Sub
            // Property

        // if the sentence is split in two or more lines
        // we need to join the lines before translate it
        //
        if (isSentenceComplete(strLine)) {

            strLine = m_strBuffer + G.ltrimTab(strLine);
            m_strBuffer = "";

            strLine = removeLineNumbers(strLine);

            if (isEmptyLine(strLine)) {
                return strLine + newline;
            }
            if (isVbSpecificCode(strLine)) {
                return "//" + strLine + newline;
            }
            if (isComment(strLine)) {
                return getTabs() + commentLine(strLine);
            }
            if (isDeclareApi(strLine)) {
                return declareApiLine(strLine);
            }
            if (m_inType) {
                addToType(strLine);
                return "";
            }
            else if (isBeginOfType(strLine)) {
                addToType(strLine);
                return "//*TODO:** type is translated as a new class at the end of the file " + strLine + newline;
            }
            else if (isBeginOfEnum(strLine)) {
                addToEnum(strLine);
                return "//*TODO:** enum is translated as a new class at the end of the file " + strLine + newline;
            }
            else if (m_inEnum) {
                addToEnum(strLine);
                return "";
            }
            else if (m_inFunction) {
                checkEndBlock(strLine);
                String line = translateLineInFunction(strLine);
                String rtn = "";
                if (!line.isEmpty()) {
                    String tabs = getTabs();
                    rtn = tabs + line;                
                }
                checkBeginBlock(strLine);
                return rtn;
            }
            else {
                // first check for Function | Sub | Property
                if (isBeginOfFunction(strLine)) {
                    checkEndBlock(strLine);
                    String rtn = getTabs() + translateLineInFunction(strLine);
                    checkBeginBlock(strLine);
                    return rtn;
                }
                // declarations
                else {
                    checkEndBlock(strLine);
                    String rtn = getTabs() + translateLineInDeclaration(strLine);
                    checkBeginBlock(strLine);
                    return rtn;
                }
            }
        }
        // split sentences
        else {
            m_strBuffer += strLine.substring(0, strLine.length()-1).trim() + " ";
            return "";
        }
    }

    private boolean isSentenceComplete(String strLine) {
        strLine = G.ltrimTab(strLine);
        if (strLine.isEmpty())
            return true;
        else if (getStartComment(strLine) >= 0)
            return true;
        else if (strLine.length() < 2)
            return true;
        else
            return !(strLine.substring(strLine.length()-2).equals(" _"));
    }

    private int getStartComment(String strLine) {
        boolean literalFlag = false;
        for (int i = 0; i < strLine.length(); i++) {
            if (strLine.charAt(i) == '"') {
                literalFlag = !literalFlag;
            }
            else if (strLine.charAt(i) == '\'') {
                if (!literalFlag) {
                    return i;
                }
            }
        }
        return -1;
    }

    private boolean isEmptyLine(String strLine) {
        strLine = G.ltrimTab(strLine);
        return strLine.isEmpty();
    }

    private boolean isVbSpecificCode(String strLine) {
        strLine = G.ltrimTab(strLine).toLowerCase();
        if (strLine.isEmpty())
            return false;
        if (strLine.equals("option explicit"))
            return true;
        else
            return false;
    }

    private boolean isComment(String strLine) {
        strLine = G.ltrimTab(strLine);
        if (strLine.isEmpty())
            return false;
        else
            return strLine.charAt(0) == '\'';
    }

    private String commentLine(String strLine) {
        return G.ltrimTab(strLine.replaceFirst("'", "//")) + newline;
    }

    private boolean isDeclareApi(String strLine) {
        strLine = G.ltrimTab(strLine);
        if (strLine.isEmpty()) {
            return false;
        }
        else {
            if (strLine.length() >= 15) {
                if (strLine.substring(0, 15).equalsIgnoreCase("public declare ")) {
                    return true;
                }
                else if (strLine.length() >= 16) {
                    return strLine.substring(0, 16).equalsIgnoreCase("private declare ");
                }
                else {
                    return false;
                }
            }
            else {
                return false;
            }
        }
    }














    

    
   
    

    
       
        
        
    
    
    private String getFormType(String dataType) {
        if (dataType.equals("String"))
            return "text";
        else if (dataType.equals("Boolean"))
            return "boolean";
        else 
            return "number";
    }
       
    private String getControllerFile() {        
        m_caseClassDataFields = chop(m_caseClassDataFields, 2);
        
        String className = m_javaClassName.substring(1);
        String pluralClassName = cairoTreeListControllerGetIdentifierPluralName(className);
        String lowerPluralClassName = pluralClassName.toLowerCase();
        String capitalizedPluralClassName = capitalize(pluralClassName);
        String lowerCaseClassName = cairoTreeListControllerGetIdentifierName(className);
        String capitalizedClassName = capitalize(lowerCaseClassName);
        
        String pkColumnName = m_caseClassPrefix + "ID";
        
        m_formData = "      \"id\" -> optional(number),\n" + chop(m_formData, 2) + "\n";        
        m_writeData = ("      \"id\" -> Json.toJson(xxxz.id),\n" + "      C." + pkColumnName + " -> Json.toJson(xxxz.id),\n" + chop(m_writeData, 2)).replaceAll("xxxz", lowerCaseClassName) + "\n";
        m_createUpdateParamList = chop(m_createUpdateParamList, 2).replaceAll("xxxz", lowerCaseClassName);

        return "package controllers.logged.modules.general\n\n"
                + m_controllerImports
                + "\n\n"
                + m_controllerClassData.replace("CASE-CLASS-FIELDS", m_caseClassDataFields).replaceAll("Xxxz", capitalizedClassName)
                + "\n\n"
                + m_controllerObject
                    .replaceAll("Xxxzs", capitalizedPluralClassName)
                    .replaceAll("xxxzs", lowerPluralClassName)
                    .replaceAll("Xxxz", capitalizedClassName)
                    .replaceAll("xxxz", lowerCaseClassName)
                    .replaceAll("XXXZs", pluralClassName.toUpperCase())
                    .replaceAll("XXXZ", lowerCaseClassName.toUpperCase())
                    .replaceAll("\\[FORM-DATA\\]", m_formData)
                    .replaceAll("\\[WRITES-DATA\\]", m_writeData)
                    .replaceAll("\\[UPDATE-PARAM-LIST\\]", m_createUpdateParamList)
                    .replaceAll("\\[CREATE-PARAM-LIST\\]", m_createUpdateParamList)
                ;    
    }
    
    private String chop(String text, int characters) {
        if (text.length() <= characters)
            return "";
        else 
            return text.substring(0, text.length() - characters);
    }
    
    private String toCamel(String text) {
        String rtn = "";
        boolean lastWasUnderscore = false;
        for (int i = 0; i < text.length(); i++) {
            String c = text.substring(i, i+1);
            if (c.equals("_")) {
                lastWasUnderscore = true;
            }
            else {
                if (lastWasUnderscore) {
                    rtn += c.toUpperCase();
                    lastWasUnderscore = false;
                }                
                else {
                    rtn += c.toLowerCase();
                }
            }
        }
        return rtn;
    }
    
    /*
     
     * MODEL
     
     */    
    
    private static final String m_modelImports = 
            "import java.sql.{Connection, CallableStatement, ResultSet, Types, SQLException}\n"
          + "import anorm.SqlParser._\n"
          + "import anorm._\n"
          + "import services.DateUtil\n"
          + "import services.db.DB\n"
          + "import models.cairo.system.database.{DBHelper, Register, Field, FieldType, SaveResult}\n"
          + "import play.api.Play.current\n"
          + "import models.domain.CompanyUser\n"
          + "import java.util.Date\n"
          + "import play.api.Logger\n"
          + "import play.api.libs.json._\n"
          + "import scala.util.control.NonFatal\n";
    
    private String m_modelCaseClass = 
            "case class Xxxz(\n              id: Int,\n"
          + "CASE-CLASS-FIELDS-FULL,\n"
          + "              createdAt: Date,\n"
          + "              updatedAt: Date,\n"
          + "              updatedBy: Int) {\n\n"
          + "  def this(\n      id: Int,\nCASE-CLASS-FIELDS-NO-FK-NAMES) = {\n\n"
          + "    this(\n      id,\nCASE-CLASS-ARGUMENTS-FULL,\n"
          + "      DateUtil.currentTime,\n      DateUtil.currentTime,\n      DBHelper.NoId)\n"
          + "  }\n\n"  
          + "  def this(\nCASE-CLASS-FIELDS-NO-FK-NAMES) = {\n\n"
          + "    this(\n      DBHelper.NoId,\nCASE-CLASS-ARGUMENTS-NO-FK)\n\n"
          + "  }\n\n"
          + "}";
    
    private String m_modelObject = 
                "object Xxxz {\n\n"

            + "  lazy val emptyXxxz = Xxxz(\nCASE-CLASS-EMPTY-ARGUMENTS)\n\n"

            + "  def apply(\n      id: Int,\nCASE-CLASS-FIELDS-NO-FK-NAMES) = {\n\n"
            + "    new Xxxz(\n      id,\nCASE-CLASS-ARGUMENTS-APPLY-FULL)\n"
            + "  }\n\n"
            + "  def apply(\nCASE-CLASS-FIELDS-NO-FK-NAMES) = {\n\n"
            + "    new Xxxz(\nCASE-CLASS-ARGUMENTS-NO-FK)\n"
            + "  }\n\n"

            + "  private val xxxzParser: RowParser[Xxxz] = {\n"
            + "      SqlParser.get[Int](C.PK_COLUMN) ~\n"
            + "[PARSER-MAP]"
            + "      SqlParser.get[Date](DBHelper.CREATED_AT) ~\n"
            + "      SqlParser.get[Date](DBHelper.UPDATED_AT) ~\n"
            + "      SqlParser.get[Int](DBHelper.UPDATED_BY) map {\n"
            
            /* [PARSER-MAP]:
             
            + "      SqlParser.get[String](C.PRO_NAME) ~\n"
            + "      SqlParser.get[String](C.PRO_CODE) ~\n"
            + "      SqlParser.get[String](C.PRO_DESCRIP) ~\n"
            + "      SqlParser.get[Int](DBHelper.ACTIVE) ~\n"
            + "      SqlParser.get[Int](C.PA_ID) ~\n"
            + "      SqlParser.get[String](C.PA_NAME)
             
             */
            
            
            + "      case\n              id ~\n[PARSER~COLUMNS] ~\n              createdAt ~\n              updatedAt ~\n              updatedBy =>\n"
            
            /* [PARSER~COLUMNS]:             
             
             name ~ code ~ descrip ~ active ~ paId ~ paName
             
             */            
            
            + "        Xxxz(\n              id,\n[PARSER-COLUMNS],\n              createdAt,\n              updatedAt,\n              updatedBy)\n"
            
            /* [PARSER-COLUMNS]:
            
             name, code, descrip, (if(active != 0) true else false), paId, paName
            
            */
            
            + "    }\n"
            + "  }\n\n"

            + "  def create(user: CompanyUser, xxxz: Xxxz): Xxxz = {\n"
            + "    save(user, xxxz, true)\n"
            + "  }\n\n"

            + "  def update(user: CompanyUser, xxxz: Xxxz): Xxxz = {\n"
            + "    save(user, xxxz, false)\n"
            + "  }\n\n"

            + "  private def save(user: CompanyUser, xxxz: Xxxz, isNew: Boolean): Xxxz = {\n"
            + "    def getFields = {\n"
            + "      List(\n"
            + "[SAVE-FIELD-LIST]\n"
            + "      )\n"
            + "    }\n"
            
            /* [SAVE-FIELD-LIST]
             
            + "        Field(C.PRO_NAME, xxxz.name, FieldType.text),\n"
            + "        Field(C.PRO_CODE, xxxz.code, FieldType.text),\n"
            + "        Field(C.PRO_DESCRIP, xxxz.descrip, FieldType.text),\n"
            + "        Field(DBHelper.ACTIVE, (if(xxxz.active) 1 else 0), FieldType.boolean),\n"
            + "        Field(C.PA_ID, xxxz.paId, FieldType.id)\n"             
             
             */
            
            
            + "    def throwException = {\n"
            + "      throw new RuntimeException(s\"Error when saving ${C.XXXZ}\")\n"
            + "    }\n\n"

            + "    DBHelper.saveEx(\n"
            + "      user,\n"
            + "      Register(\n"
            + "        C.XXXZ,\n"
            + "        C.PK_COLUMN,\n"
            + "        xxxz.id,\n"
            + "        false,\n"
            + "        true,\n"
            + "        true,\n"
            + "        getFields),\n"
            + "      isNew,\n"
            + "      C.CODE_COLUMN\n"
            + "    ) match {\n"
            + "      case SaveResult(true, id) => load(user, id).getOrElse(throwException)\n"
            + "      case SaveResult(false, id) => throwException\n"
            + "    }\n"
            + "  }\n\n"

            + "  def load(user: CompanyUser, id: Int): Option[Xxxz] = {\n"
            + "    loadWhere(user, s\"${C.PK_COLUMN} = {id}\", 'id -> id)\n"
            + "  }\n\n"

            + "  def loadWhere(user: CompanyUser, where: String, args : scala.Tuple2[scala.Any, anorm.ParameterValue[_]]*) = {\n"
            + "    DB.withConnection(user.database.database) { implicit connection =>\n"
            + "      SQL(s\"SELECT t1.*, t2.${C.FK_NAME} FROM ${C.XXXZ} t1 INNER JOIN ${C.???} t2 ON t1.${C.FK_ID} = t2.${C.FK_ID} WHERE $where\")\n"
            + "        .on(args: _*)\n"
            + "        .as(xxxzParser.singleOpt)\n"
            + "    }\n"
            + "  }\n\n"

            + "  def delete(user: CompanyUser, id: Int) = {\n"
            + "    DB.withConnection(user.database.database) { implicit connection =>\n"
            + "      try {\n"
            + "        SQL(s\"DELETE FROM ${C.XXXZ} WHERE ${C.PK_COLUMN} = {id}\")\n"
            + "        .on('id -> id)\n"
            + "        .executeUpdate\n"
            + "      } catch {\n"
            + "        case NonFatal(e) => {\n"
            + "          Logger.error(s\"can't delete a ${C.XXXZ}. ${C.PK_COLUMN} id: $id. Error ${e.toString}\")\n"
            + "          throw e\n"
            + "        }\n"
            + "      }\n"
            + "    }\n"
            + "  }\n\n"

            + "  def get(user: CompanyUser, id: Int): Xxxz = {\n"
            + "    load(user, id) match {\n"
            + "      case Some(p) => p\n"
            + "      case None => emptyXxxz\n"
            + "    }\n"
            + "  }\n"
            + "}\n";           
    
    private String m_caseClassFields = "";
    private String m_caseClassNoFKFields = "";

    private String m_caseClassArgumentsFull = "";    
    private String m_caseClassArgumentsApplyFull = "";    
    private String m_caseClassArgumentsNoFK = "";
    private String m_caseClassEmptyArguments = "";
    private String m_parserMap = "";
    private String m_parserColumns = "";
    private String m_parserColumns2 = "";
    private String m_saveFieldList = "";
    private String m_parserMapLastField = "";
    private String m_camelField = "";
    
    private String m_caseClassLastField = "";
    
    private void writeModelCaseClass(String strLine) {
      if (strLine.contains("var elem = properties.add(null, Cairo.General.Constants.")) {
          m_caseClassLastField = strLine.trim().replace("var elem = properties.add(null, Cairo.General.Constants.", "");
          m_caseClassLastField = m_caseClassLastField.substring(0, m_caseClassLastField.indexOf(")"));
          
          m_parserMapLastField = m_caseClassLastField;
          
          if (m_caseClassPrefix.isEmpty()) {
              m_caseClassPrefix = m_caseClassLastField.substring(0, m_caseClassLastField.indexOf("_") + 1);
          }
          
          if (m_caseClassLastField.startsWith(m_caseClassPrefix)) {
            m_caseClassLastField = m_caseClassLastField.substring(m_caseClassPrefix.length());
          }
          
          m_camelField = toCamel(m_caseClassLastField);
          
          m_caseClassFields += "              " + m_camelField + ": ";
          m_caseClassNoFKFields += "      " + m_camelField + ": ";
          
          m_caseClassArgumentsFull += "      " + m_camelField + ",\n";
          m_caseClassArgumentsApplyFull += "      " + m_camelField + ",\n";
          m_caseClassArgumentsNoFK += "      " + m_camelField + ",\n";
          
          m_parserColumns += "              " + m_camelField + " ~\n";
          m_parserColumns2 += "              " + m_camelField + ",\n";
                  
      }
      else if(strLine.contains("setValue") && ! m_discardProperty) {
          String expression = strLine.substring(strLine.indexOf("(") + 1, strLine.indexOf(")"));
          if (expression.equals("m_active === true ? 1 : 0")) {
              m_caseClassFields += "              active: Boolean,\n";
              m_caseClassNoFKFields += "      active: Boolean,\n";
              m_caseClassArgumentsFull += "      active,\n";
              m_caseClassArgumentsApplyFull += "      active,\n";
              m_caseClassArgumentsNoFK += "      active,\n";
              m_caseClassEmptyArguments += "    false,\n";
              m_parserMap += "      SqlParser.get[Int](DBHelper.ACTIVE) ~\n";
              m_parserColumns += "              active ~\n";
              m_parserColumns2 += "              (if(active != 0) true else false),\n";
              m_saveFieldList += "        Field(DBHelper.ACTIVE, (if(xxxz.active) 1 else 0), FieldType.boolean),\n";
              
          }
          else {
            IdentifierInfo info = getIdentifierInfo(getVariableFromExpression(expression)); 
            if (info != null) {
                String dataType = info.variable != null ? info.variable.dataType : info.function.getReturnType().dataType;
                String scalaType = getScalaType(dataType);
                if (! m_setIdFound) {
                  m_caseClassNoFKFields += scalaType + ",\n";
                  m_caseClassFields += scalaType + ",\n";
                }
                m_caseClassEmptyArguments += "    " + getZeroValueForDataType(dataType) + ",\n";
                m_parserMap += "      SqlParser.get[" + scalaType + "](C." + m_parserMapLastField + ") ~\n";            
                m_saveFieldList += "        Field(C." + m_parserMapLastField + ", xxxz." + m_camelField + ", FieldType." + getFormType(dataType) + "),\n";            
            }
            else {
                int debug = 1;
            }
          }
      }      
      else if(strLine.contains("setSelectId")) {
          int t = m_caseClassLastField.indexOf("_");
          if(t >= 0) {
            String fkName = m_caseClassLastField.substring(0, t).toLowerCase() + "Name";

            if (m_caseClassNoFKFields.contains("ibcId:")) {
                int debug = 1;
            }

            m_caseClassFields = updateLastFieldType(m_caseClassFields, "Int");
            m_caseClassNoFKFields = updateLastFieldType(m_caseClassNoFKFields, "Int");
            int len = (m_caseClassEmptyArguments.endsWith(" 0,\n")) ? 3 : (m_caseClassEmptyArguments.endsWith(" null,\n")) ? 6 : 4;

            m_caseClassEmptyArguments = chop(m_caseClassEmptyArguments, len) + "DBHelper.NoId,\n";
            m_caseClassFields += "              " + fkName + ": String,\n";
            m_caseClassArgumentsFull += "      \"\",\n";
            m_parserMap = updateLastParserType(m_parserMap, "Int");
            m_parserMap += "      SqlParser.get[String](C." + m_caseClassLastField.substring(0, m_caseClassLastField.indexOf("_")).toUpperCase() + "_NAME" + ") ~\n";
            m_parserColumns += "              " + fkName + " ~\n";
            m_parserColumns2 += "              " + fkName + ",\n";

            m_saveFieldList = updateLastSaveListType(m_saveFieldList, "id");
          }
      }
    }
    
    private String updateLastParserType(String list, String dataType) {
        for (int i = list.length()-1; i > 0; i--) {
            if (list.charAt(i) == '[') {
                list = list.substring(0, i + 1) + dataType + "](C." + m_parserMapLastField + ") ~\n";
                break;
            }
        }
        return list;
    }

    private String updateLastSaveListType(String list, String dataType) {
        for (int i = list.length()-3; i > 0; i--) {
            if (list.charAt(i) == ',') {
                list = list.substring(0, i + 1) + " FieldType." + dataType + "),\n";
                break;
            }
        }
        return list;
    }    
    
    private String getModelFile() {
               
        String className = m_javaClassName.substring(1);
        String pluralClassName = cairoTreeListControllerGetIdentifierPluralName(className);
        String lowerPluralClassName = pluralClassName.toLowerCase();
        String capitalizedPluralClassName = capitalize(pluralClassName);
        String lowerCaseClassName = cairoTreeListControllerGetIdentifierName(className);
        String capitalizedClassName = capitalize(lowerCaseClassName);
        
        String pkColumnName = m_caseClassPrefix + "ID";
        String codeColumnName = m_caseClassPrefix + "CODE";
        
        m_caseClassFields = chop(m_caseClassFields, 2);
        m_caseClassNoFKFields = chop(m_caseClassNoFKFields, 2);
        m_caseClassArgumentsFull = chop(m_caseClassArgumentsFull, 2);
        m_caseClassArgumentsApplyFull = chop(m_caseClassArgumentsApplyFull, 2);
        m_caseClassArgumentsNoFK = chop(m_caseClassArgumentsNoFK, 2);        
        
        return "package models.cairo.modules.general\n\n"
                + m_modelImports
                + "\n"
                + m_modelCaseClass
                        .replace("CASE-CLASS-FIELDS-FULL", m_caseClassFields)
                        .replace("CASE-CLASS-FIELDS-NO-FK-NAMES", m_caseClassNoFKFields)
                        .replace("CASE-CLASS-ARGUMENTS-FULL", m_caseClassArgumentsFull)
                        .replace("CASE-CLASS-ARGUMENTS-NO-FK", m_caseClassArgumentsNoFK)
                        .replaceAll("Xxxz", capitalizedClassName)
                + "\n\n"
                + m_modelObject
                    .replace("CASE-CLASS-FIELDS-FULL", m_caseClassFields)
                    .replace("CASE-CLASS-FIELDS-NO-FK-NAMES", m_caseClassNoFKFields)
                    .replace("CASE-CLASS-ARGUMENTS-APPLY-FULL", m_caseClassArgumentsApplyFull)
                    .replace("CASE-CLASS-ARGUMENTS-NO-FK", m_caseClassArgumentsNoFK)
                    .replace("CASE-CLASS-EMPTY-ARGUMENTS", chop(m_caseClassEmptyArguments, 2))
                    .replaceAll("PK_COLUMN", pkColumnName)
                    .replaceAll("CODE_COLUMN", codeColumnName)
                    .replaceAll("\\[PARSER-MAP\\]", m_parserMap)
                    .replaceAll("\\[PARSER~COLUMNS\\]", chop(m_parserColumns, 2))
                    .replaceAll("\\[PARSER-COLUMNS\\]", chop(m_parserColumns2, 2))
                    .replaceAll("\\[SAVE-FIELD-LIST\\]", chop(m_saveFieldList, 2))
                    .replaceAll("Xxxzs", capitalizedPluralClassName)
                    .replaceAll("xxxzs", lowerPluralClassName)
                    .replaceAll("Xxxz", capitalizedClassName)
                    .replaceAll("xxxz", lowerCaseClassName)
                    .replaceAll("XXXZs", pluralClassName.toUpperCase())
                    .replaceAll("XXXZ", lowerCaseClassName.toUpperCase())
                ;
        
        ////////////////////////////////////////////////////////////////////////
        

        
/*        
        
        m_formData = "      \"id\" -> optional(number),\n" + chop(m_formData, 2) + "\n";        
        m_writeData = ("      \"id\" -> Json.toJson(xxxz.id),\n" + chop(m_writeData, 2)).replaceAll("xxxz", lowerCaseClassName) + "\n";
        m_createUpdateParamList = chop(m_createUpdateParamList, 2).replaceAll("xxxz", lowerCaseClassName);

        return m_controllerImports
                + "\n\n"
                + m_controllerClassData.replace("CASE-CLASS-FIELDS", m_caseClassDataFields).replaceAll("Xxxz", capitalizedClassName)
                + "\n\n"
                + m_controllerObject
                    .replaceAll("Xxxzs", capitalizedPluralClassName)
                    .replaceAll("xxxzs", lowerPluralClassName)
                    .replaceAll("Xxxz", capitalizedClassName)
                    .replaceAll("xxxz", lowerCaseClassName)
                    .replaceAll("XXXZs", pluralClassName.toUpperCase())
                    .replaceAll("XXXZ", lowerCaseClassName.toUpperCase())
                    .replaceAll("\\[FORM-DATA\\]", m_formData)
                    .replaceAll("\\[WRITES-DATA\\]", m_writeData)
                    .replaceAll("\\[UPDATE-PARAM-LIST\\]", m_createUpdateParamList)
                    .replaceAll("\\[CREATE-PARAM-LIST\\]", m_createUpdateParamList)
                ; 
                */ 
    }
    
    private String getScalaType(String dataType) {
        return dataType.equals("Integer") ? "Int" : dataType;
    }
    
    private String m_router = 
        "GET     /api/v1/general/xxxz/:id              controllers.logged.modules.general.Xxxzs.get(id: Int)\n"
      + "POST    /api/v1/general/xxxz                  controllers.logged.modules.general.Xxxzs.create\n"
      + "PUT     /api/v1/general/xxxz/:id              controllers.logged.modules.general.Xxxzs.update(id: Int)\n"
      + "DELETE  /api/v1/general/xxxz/:id              controllers.logged.modules.general.Xxxzs.delete(id: Int)\n";
            
    private String getRouter() {
        String className = m_javaClassName.substring(1);
        String path = className.toLowerCase();
        String controllerName = capitalize(cairoTreeListControllerGetIdentifierPluralName(className));
        return m_router
              .replaceAll("xxxz", path)
              .replaceAll("Xxxzs", controllerName);              
    }
    
    
    /*
     
     SCALA functions
     * 
     * CONTROLLER
     * 
     * imports:
     * 
        import controllers._
        import play.api.mvc._
        import play.api.data._
        import play.api.data.Forms._
        import actions._
        import play.api.Logger
        import play.api.libs.json._
        import models.cairo.modules.general._
        import models.cairo.system.security.CairoSecurity
        import models.cairo.system.database.DBHelper
     *
     * case class XXXZData (only columns in the table. for FK do not include names)
     * 
     * object XXXZs extends Controller with ProvidesUser
     * 
     * XXXZForm:    only columns in the table
     * 
     * XXXZWrites:  all fields in XXXZ model (include FK's name) take this from load
     * 
     * get: very easy: just call model.load
     * 
     * create: very easy: just call model.create
     * 
     * delete: very easy: just call model.delete
     * 
     * MODEL
     * 
     * imports:
     * 
        import java.sql.{Connection, CallableStatement, ResultSet, Types, SQLException}
        import anorm.SqlParser._
        import anorm._
        import services.DateUtil
        import services.db.DB
        import models.cairo.system.database.{DBHelper, Register, Field, FieldType, SaveResult}
        import play.api.Play.current
        import models.domain.CompanyUser
        import java.util.Date
        import play.api.Logger
        import play.api.libs.json._
        import scala.util.control.NonFatal
     * 
     * case class XXXZ
     *  three constructors:
     *      - default constructor: all fields including names of FK
     *      - constructor which doesn't takes names of FK
     *      - constructor which doesn't takes names of FK neither PK
     * 
     * object XXXZ
     * 
     *  an emptyXXXZ
     * 
     *  two apply methods to implement the two aditional constructors
     * 
     *  rowParser
     * 
     *  create and update (very easy: only assign parameter: Type like provincia: Provincia and return type like ): Provincia, then call save(user, parameter, true/false))
     * 
     *  save  - easy: just define a list with Field(colName, value, type. this has to be done when parsin save just use the case K_xxx to create the list
     *                define an exception with a generic message
     *                call DBHelper.saveEx
     *                match the result
     * 
     *  load - easy: just set the idColumnName and call loadWhere
     * 
     *  loadWhere - very easy: just set the parser, the select should be written manually don't translate the select just copy the original select from load into
     *                         this function to help the manual editing
     * 
     *  delete - very easy: just set the name of the table and PK if the delete uses an SP or is more complex it will be translated manually
     * 
     *  get - just call load and if None return emptyXXXZ
     * 
     * ROUTER
     * 
     * # general
            GET     /api/v1/general/XXXZ/:id              controllers.logged.modules.general.XXXZs.get(id: Int)
            POST    /api/v1/general/XXXZ                  controllers.logged.modules.general.XXXZs.create
            PUT     /api/v1/general/XXXZ/:id              controllers.logged.modules.general.XXXZs.update(id: Int)
            DELETE  /api/v1/general/XXXZ/:id              controllers.logged.modules.general.XXXZs.delete(id: Int)
     * 
     * 
     
     */
    
}

class IdentifierInfo {
    boolean isFunction = false;
    Function function = null;
    Variable variable = null;
}

/*
 And
 As
 Call
 Do
 Exit
 False
 True
 For
 Function
 GoTo
 If
 Loop
 Me
 Next
 Not
 Nothing
 Option
 Or
 Private
 Public
 Resume
 Step
 Sub
 Then
 Until
 While
 If..Else..ElseIf..Then
 */

/*
 * TODO_DONE: file mError.bas line 72 {s = Replace(s, "$" & i + 1, X(i))}
 *       the code is translated as
 *              {s = Replace(s, "$" + ((Integer) i).toString() + 1, X(i));}
 *       it is wrong because i + 1 must to be evaluated first and then has to apply
 *       the cast to Integer:
 *              {s = Replace(s, "$" + ((Integer) (i + 1)).toString(), X(i));}
 */

/*
 *
 * TODO_DONE: manage events
 * TODO: manage byref params that actually aren't byref because are not asigned to a value
 *       by the function code
 * TODO_DONE: change getters in assignment eg:
 *              m_obj.getProperty() = ...;
 *       must be
 *              m_obj.setProperty(...);
 * TODO: translate byref for strings
 * TODO: translate byref for arrays. this is for array type params that are resized
 *       by the the function code. we have to search for redim
 * TODO_DONE: translate redim
 * TODO_DONE: translate instr
 * TODO: translate database access. replace recordsets.
 * TODO: translate globals (be aware of multi threading)
 * TODO: file functions (print, open, getattr, etc.)
 * TODO_DONE: translate Not sentence eg return Not cancel (this is parcially translated functionName = Not Cancel)
 * TODO: translate default property
 * TODO: translate on error goto controlerror
 * TODO: add import calls for references to vb projects we have translated
 * TODO_DONE: initialize local variables to zero or null string or null date or false
 * TODO: translate replace function
 * TODO_DONE: replace literal dates which are sourronded by #
 * TODO: resolve params array
 * TODO: translate IsEmpty for variants
 *
 * TODO: make an html report with a sumary of the work done (total classes translated,
 *       total files created, total projects translated, total functions)
 *
 *       erros: list of windows api calls founded and the line number where it appears in files
 *              list o variables of with block which can not be resolved and the line number
 *               where it appears in files
 *              list of references which are not vb projects we have translated yet eg: stdole2.dll
 *
 *       warnnings: list all the cases where default properties were translated
 *                  list all the cases where array indexes where translated
 *                  list all the cases where byref strings and byref numbers where translated
 *                  list all the cases where byref objects where translated to byval because
 *                   the object is not assigned by the code in the function and neither by the code
 *                   in other functions called by the function which was translated and takes
 *                   the object as a byref parameter
 *                  list all the cases where we found #If #else and #end if
 *
 */
