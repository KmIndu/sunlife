/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package buggymastercode;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

/**
 *
 * @author jalvarez
 */
public class Translator {

    static private final String newline = "\n";
    static private final String C_TAB = "  ";
    static private final String outerTabHandler = "                  ";
    static private final String innerTabHandler = outerTabHandler + "  ";
    static private final String C_NUMBERS = "-+0123456789";
    static private final String C_SEPARARTORS = "_._=_&&_||_+_-_*_/_==_!=_<_>_<=_>=_";
    static private final String C_SYMBOLS = " +-()*/,";
    static private final String C_RESERVED_WORDS =
        "_and_as_byval_byref_case_class_dim_elseif_else_end_each_for_friend_"
     + "_function_global_goto_if_in_is_next_not_of_or_on error_on resume_print_"
     + "_private_public_raise_select_sub_type_while_wend_char_date_double_integer_"
     + "_long_object_short_string_variant_#if_#end_exit_redim_on_me_";

    static private final String C_INTERFACE_POSTIFX = "EventI";
    static private final String C_ADAPTER_POSTIFX = "EventA";

    static private final String C_NUMERIC_DATA_TYPES = "||int||integer||double||single||currency||short||long||";

    private boolean m_isVbSource = false;
    private boolean m_codeHasStarted = false;
    private boolean m_attributeBlockHasStarted = false;
    private boolean m_inFunction = false;
    private boolean m_inEnum = false;
    private boolean m_inWith = false;
    private boolean m_inType = false;
    private boolean m_withDeclaration = false;
    private boolean m_endWithDeclaration = false;
    private boolean m_emptyLine = false;
    private String m_returnValue = ""; // default value for function return

    private String[] m_iterators = {"","_i","_j","_k","_t","_w","_z"};
    private int m_iteratorIndex = 0;
    private String[] m_imports = null;
    private int m_importCount = 0;
    
    private boolean m_translateToJava = true;
    private boolean m_translateToCairo = false;
    private boolean m_parseToCairo = false;
    private boolean m_inRemoveFunction = false;
    private boolean m_lastLineWasEmpty = false;

    // member variables of the class which we are translating
    //
    private ArrayList<Variable> m_memberVariables = new ArrayList<Variable>();
    // parameters and local variables of the function which we are translating
    //
    private ArrayList<Variable> m_functionVariables = new ArrayList<Variable>();
    // public functions, subs and properties of the class which we are 
    // translating
    //
    private ArrayList<Function> m_publicFunctions = null;
    // private functions, subs and properties of the class which we are
    // translating
    //
    private ArrayList<Function> m_privateFunctions = null;
    // this is used to build the dictionary of public variables of every
    // class in this project. this collection is used to found identifiers
    // in the code which references to public member of objects of other
    // classes.
    // public variables are accessed by the dot operator and assigned using the
    // equal sign (=) eg: "m_objmember.publicVariable = 1;" on the other
    // hand public properties are translated as setters and getters and the
    // assignment doesn't use the equals sign but the setter method.
    //
    private ArrayList<Variable> m_publicVariables = null;
    // files (frm, bas, cls) in this vbp
    //
    private ArrayList<SourceFile> m_collFiles = new ArrayList<SourceFile>();
    private ArrayList<Variable> m_collWiths = new ArrayList<Variable>();
    private ArrayList<Type> m_types = new ArrayList<Type>();
    // classes in java (String, Date, etc.)
    //
    private ArrayList<SourceFile> m_collJavaClassess = new ArrayList<SourceFile>();

    // the current type which we are translaing
    //
    private String m_type = "";
    // the collection of every type public and private declared
    // in the class which we are translating
    //
    private ArrayList<String> m_collTypes = new ArrayList<String>();
    // the current enum which we are translating
    //
    private String m_enum = "";
    // the collection of every enum public and private declared
    // in the class which we are translating
    //
    private ArrayList<String> m_collEnums = new ArrayList<String>();

    // member variables which can raise events
    //
    private ArrayList<EventListener> m_eventListeners = new ArrayList<EventListener>();
    // the resulting interface declaration of add every public event declaration
    // in the class which we are translating
    //
    private String m_listenerInterface = "";
    // the resulting class declaration of add every public event declaration
    // in the class which we are translating with a null implementation
    // of every method
    //
    private String m_adapterClass = "";
    // this flag tell us if we need add a collection variable to
    // hold the listeners and two methods to add and remove objets
    // in the collection
    //
    private boolean m_raiseEvents = false;
    // this collection is filled when we parse the class and
    // used by translate function declaration to determine if
    // the function has to be syncrhonized
    //
    private ArrayList<String> m_raiseEventFunctions = new ArrayList<String>();

    private boolean m_wasSingleLineIf = false;
    private String m_strBuffer = "";
    private int m_tabCount = 0;
    // the vb name of the function we are parsing or translating
    //
    private String m_vbFunctionName = "";
    private String m_vbClassName = "";
    private String m_javaClassName = "";
    private boolean m_isFirstCase = false;
    private boolean m_previousWasReturn = false;
    // flag to add auxiliary function to support vb date expecific
    // functionality
    //
    private boolean m_addDateAuxFunction = false;
    private boolean m_addDateAuxFunctionToG = false;
    // flag to add auxiliary function to support vb CDate function
    //
    private boolean m_addParseDateAuxFunction = false;
    private boolean m_addParseDateAuxFunctionToG = false;
    // flag to add auxiliary function to support vb IsNumeric function
    //
    private boolean m_addIsNumericAuxFunction = false;
    private boolean m_addIsNumericAuxFunctionToG = false;
    // flag to add auxiliary function to support vb redim and redim preserve
    //
    private boolean m_addRedimAuxFunction = false;
    private boolean m_addRedimAuxFunctionToG = false;
    private boolean m_addRedimPreserveAuxFunction = false;
    private boolean m_addRedimPreserveAuxFunctionToG = false;
    //
    private String m_packageName = "";
    // packages refence by this visual basic project in the order it appears in
    // vbp file
    //
    private String[] m_references = null;

    private ClassObject m_classObject;
    private FunctionObject m_functionObject;
    private VariableObject m_variableObject;

    private TranslatorWorker m_caller = null;

    private ClassObject m_typeClassObject;
    private ClassObject m_enumClassObject;

    private boolean m_AddAuxFunctionsToClass = false;
    private boolean m_UseGAuxFunctions = false;
    private boolean m_UseCSUtils = false;

    // used to define if the function need a variable rtn to
    // hold the return value
    //
    private boolean m_setReturnValueFound = false;
    private boolean m_needReturnVariable = false;
    private Function m_function = null;

    private boolean m_isBasFile = false;

    // to translate On Error
    //
    private boolean m_onErrorFound = false;
    private String m_onErrorLabel = "";
    private boolean m_onCatchBlock = false;
    private boolean m_catchBlockIsOpen = false;
    
    private boolean m_inCairoValidate = false;
    private boolean m_inCairoValidateItems = false;
    private boolean m_inCairoIsEmptyRow = false;
    private boolean m_inCairoSave = false;
    private boolean m_inCairoSaveItems = false;
    private boolean m_inCairoShowDoc = false;
    private boolean m_inCairoTerminate = false;
    private boolean m_inCairoDestroy = false;
    private boolean m_inCairoMessageEx = false;
    private boolean m_inCairoLoad = false;
    private boolean m_inCairoPLoad = false;
    private boolean m_inCairoLoadCollection = false;    
    private String m_refreshCollection = "";
    private boolean m_inCairoDelete = false;
    private boolean m_inCairoEdit = false;
    private boolean m_inCairoEditNew = false;
    private boolean m_inCairoDiscardChanges = false;
    private boolean m_inCairoCopy = false;
    private boolean m_inPropertyChange = false;
    private boolean m_propertyChangeIsNotEmpty = false;
    
    private String m_scalaCode = "";
    
    private String[] m_cairoNames = {  
        "cIABMClient_EditNew", "editNew", 
        "getCIABMClient_Aplication", "getApplication",
        "getCIABMClient_CanAddDocDigital", "editDocumentsEnabled",
        "getCIABMClient_CanCopy", "copyEnabled",
        "getCIABMClient_CanNew", "addEnabled",
        "cIABMClient_ShowDocDigital", "showDocDigital",
        "cIABMClient_MessageEx", "messageEx",
        "cIABMClient_DiscardChanges", "discardChanges",
        "cIABMClient_ListAdHock", "_REMOVE_",
        "cIABMClientGrid_ColumnCancelEdit", "_REMOVE_",
        "cIABMClient_Load", "_REMOVE_",
        "cIABMClient_PropertyChange", "propertyChange",
        "cIABMClient_Save", "save",
        "cIABMClient_Terminate", "terminate",
        "cIABMClient_Copy", "copy",
        "getCIABMClient_Title", "getTitle",
        "cIABMClient_Validate", "validate",
        "getCIEditGeneric_ObjAbm", "getDialog",
        "setCIEditGeneric_TreeId", "setTreeId",
        "getCIEditGeneric_TreeId", "getTreeId",
        "cIEditGeneric_GridAdd", "_REMOVE_",
        "cIEditGeneric_GridEdit", "_REMOVE_",
        "cIEditGeneric_GridRemove", "_REMOVE_",
        "cIEditGeneric_ShowList", "list",
        "setCIEditGeneric_ObjAbm", "setDialog",
        "getCIEditGeneric_Editing", "isEditing",
        "cIEditGeneric_Delete", "delete",
        "cIEditGeneric_Search", "_REMOVE_",
        "cIEditGeneric_Edit", "edit",
        "cIEditGeneric_PrintObj", "_REMOVE_",
        "setCIEditGeneric_ObjTree", "setTree",
        "cIEditGeneric_PropertyChange", "_REMOVE_",
        "setCIEditGeneric_BranchId", "setBranchId",
        "getCIEditGeneric_BranchId", "getBranchId",
        "cIEditGeneric_TabClick", "_REMOVE_",
        "cIEditGeneric_Preview", "_REMOVE_",
        "cIMenuClient_Initialize", "_REMOVE_",
        "cIMenuClient_ProcessMenu", "_REMOVE_",
        "class_Terminate", "destroy",
        "class_Initialize", "initialize",
        "iProperty", "property"};
    
    private String[] m_cairoVarNames = {
        "iProperty", "property",
        "clave", "key"
    };
    

    public Translator() {
        
        m_collJavaClassess = new ArrayList<SourceFile>();
        SourceFile source = null;
        Function fun = null;

        // String
        //
        source = new SourceFile();
        source.setJavaName("String");
        source.setPublicFunctions(new ArrayList<Function>());

            // substring
            //
            fun = new Function();
            if (m_translateToJava)
                fun.getReturnType().setJavaName("substring");
            else
                fun.getReturnType().setJavaName("Substring");
            fun.getReturnType().setType("String");
            source.getPublicFunctions().add(fun);

            // toLowerCase
            //
            fun = new Function();
            if (m_translateToJava)
                fun.getReturnType().setJavaName("toLowerCase");
            else
                fun.getReturnType().setJavaName("ToLower");
            fun.getReturnType().setType("String");
            source.getPublicFunctions().add(fun);

            // toUpperCase
            //
            fun = new Function();
            if (m_translateToJava)
                fun.getReturnType().setJavaName("toUpperCase");
            else
                fun.getReturnType().setJavaName("ToUpper");
            fun.getReturnType().setType("String");
            source.getPublicFunctions().add(fun);

            // trim
            //
            fun = new Function();
            if (m_translateToJava)
                fun.getReturnType().setJavaName("trim");
            else
                fun.getReturnType().setJavaName("Trim");
            fun.getReturnType().setType("String");
            source.getPublicFunctions().add(fun);
        
        m_collJavaClassess.add(source);

        Preference pref = PreferenceObject.getPreference(G.C_AUX_FUN_ID);
        if (pref != null) {
            if (pref.getValue().equals(G.C_AUX_FUN_IN_CLASS_SOURCE))
                m_AddAuxFunctionsToClass = true;
            else if (pref.getValue().equals(G.C_AUX_FUN_IN_G_CLASS))
                m_UseGAuxFunctions = true;
            else if (pref.getValue().equals(G.C_AUX_FUN_IN_CS_LIBRARY))
                m_UseCSUtils = true;
        }
    }
    
    public void setCaller(TranslatorWorker caller) {
        m_caller = caller;
    }

    public void setPackage(String packageName) {
        m_packageName = packageName;
    }

    public void setReferences(String[] references) {
        m_references = references;
    }

    public void setSourceFiles(ArrayList<SourceFile> sourceFiles) {
        m_collFiles = sourceFiles;
    }
    
    public void setTranslateToJava(boolean value) {
        m_translateToJava = value;
    }
    
    public void setTranslateToCairo(boolean value) {
        m_translateToCairo = value;
    }
    
    public void setParseToCairo(boolean value) {
        m_parseToCairo = value;
    }

    public boolean isVbSource() {
        return m_isVbSource;
    }

    public String getVbClassName() {
        return m_vbClassName;
    }

    public String getJavaClassName() {
        return m_javaClassName;
    }

    public ArrayList<Function> getPublicFunctions() {
        return m_publicFunctions;
    }

    public ArrayList<Function> getPrivateFunctions() {
        return m_privateFunctions;
    }

    public ArrayList<Variable> getPublicVariables() {
        return m_publicVariables;
    }

    public boolean deletePackage(String packageName) {
        String sqlstmt = "delete from tvariable where cl_id in "
                            + "(select cl_id from tclass where cl_packagename = "
                            + Db.getString(packageName) + ")";
        if (Db.db.execute(sqlstmt)) {

            sqlstmt = "delete from tfunction where cl_id in "
                                + "(select cl_id from tclass where cl_packagename = "
                                + Db.getString(packageName) + ")";
            if (Db.db.execute(sqlstmt)) {

                sqlstmt = "delete from tclass where cl_packagename = "
                            + Db.getString(packageName);
                if (Db.db.execute(sqlstmt)) {
                    return true;
                }
                else {
                    return false;
                }
            }
            else {
                return false;
            }
        }
        else {
            return false;
        }
    }

    public ArrayList<String> getRaiseEventFunctions() {
        return m_raiseEventFunctions;
    }

    public void setRaiseEventFunctions(ArrayList<String> functions) {
        m_raiseEventFunctions = functions;
    }

    public void parse(String strLine) {
        if (m_isVbSource) {
            if (m_codeHasStarted) {
                parseLine(strLine);
            }
            else {
                if (strLine.contains("Attribute VB_Name = \"")) {
                    m_attributeBlockHasStarted = true;
                    m_vbClassName = strLine.substring(21, strLine.length()-1);
                    m_javaClassName = m_vbClassName;
                    
                    // debug
                    /*
                    if (m_vbClassName.equalsIgnoreCase("mGlobal")) {
                        int i = 9999;
                    }
                     /* 
                     */
                    // debug
                }
                else {
                    if (m_attributeBlockHasStarted) {
                        if (strLine.length() < 9) {
                            m_codeHasStarted = true;
                            parseLine(strLine);
                        }
                        else {
                            if (!strLine.substring(0,9).equals("Attribute")) {
                                m_codeHasStarted = true;
                                parseLine(strLine);
                            }
                        }
                    }
                    else {
                        if (strLine.length() >= 9) {
                            if (strLine.substring(0,9).equals("Attribute")) {
                                m_attributeBlockHasStarted = true;
                            }
                        }
                    }
                }
            }
        }
    }

    public String translate(String strLine) {
        String rtn = "";
        if (m_isVbSource) {
            if (m_codeHasStarted) {
                rtn = translateLine(strLine);
            }
            else {
                if (strLine.contains("Attribute VB_Name = \"")) {
                    m_attributeBlockHasStarted = true;
                    String className = strLine.substring(21, strLine.length()-1);
                    m_vbClassName = className;
                    m_javaClassName = m_vbClassName;
                    m_classObject.setPackageName(m_packageName);
                    m_classObject.setVbName(m_vbClassName);
                    m_classObject.setJavaName(m_javaClassName);
                    m_classObject.getClassIdFromClassName();
                    m_classObject.saveClass();
                    m_tabCount++;
                    
                    if (m_translateToCairo) {
                        rtn = addJavaScriptHeader();
                    }
                    else {
                        rtn = "public class " + className + " {" + newline + newline;
                    }                    
                }
                else {
                    if (m_attributeBlockHasStarted) {
                        if (strLine.length() < 9) {
                            m_codeHasStarted = true;
                            rtn = translateLine(strLine);
                        }
                        else {
                            if (!strLine.substring(0,9).equals("Attribute")) {
                                m_codeHasStarted = true;
                                rtn = translateLine(strLine);
                            }
                            else
                                rtn = "";
                        }
                    }
                    else {
                        if (strLine.length() < 9) {
                            rtn = "";
                        }
                        else {
                            if (strLine.substring(0,9).equals("Attribute")) {
                                m_attributeBlockHasStarted = true;
                            }
                            rtn = "";
                        }
                    }
                }
            }
        }
        if (rtn.contains("return ")) {
            m_previousWasReturn = true;
        }
        else if (rtn.contains("return;")) {
            m_previousWasReturn = true;
        }
        else if (!rtn.trim().isEmpty()) {
            m_previousWasReturn = false;
        }
        if (m_emptyLine) {
            m_emptyLine = false;
            rtn = "";
        }
        if (m_translateToCairo) {
            rtn = removeCairoLines(rtn);
            rtn = replaceCairoNames(rtn);
            rtn = removeCairoLinesAfterReplace(rtn);
            rtn = translateLineInCairoFunction(rtn, strLine);
            rtn = applyLastReplace(rtn);
            if (G.ltrim(rtn).equals("\n")) {
                if (m_lastLineWasEmpty) {
                    rtn = "";
                }
                else {
                    m_lastLineWasEmpty = true;
                }
            }
            else if (!rtn.trim().isEmpty()) {
                m_lastLineWasEmpty = false;
            }
        }
        if (m_inRemoveFunction) {
            rtn = "";
        }        
        return rtn;
    }

    public String getImportSection() {
        String rtn = "";

        if (m_addDateAuxFunction || m_addParseDateAuxFunction) {
            addToImportList("import java.text.DateFormat;");
            addToImportList("import java.text.ParseException;");
            addToImportList("import java.text.SimpleDateFormat;");
            addToImportList("import java.text.Date;");
        }

        if (m_addIsNumericAuxFunction) {
            addToImportList("import java.text.ParseException;");
        }

        for (int i = 0; i < m_importCount; i++) {
            rtn += m_imports[i] + newline;
        }

        if (!rtn.isEmpty())
            rtn = newline + rtn + newline;

        return rtn;
    }

    private void addToImportList(String reference) {
        for (int i = 0; i < m_importCount; i++) {
            if (m_imports[i].equals(reference)) {
                return;
            }
        }
        m_importCount++;
        m_imports[m_importCount-1] = reference;
    }

    public String getEventListenerCollection() {
        if (m_raiseEvents) {
            String className = m_javaClassName + C_INTERFACE_POSTIFX;
            String rtn = newline + "    // event listener collection"
                            + newline + "    //" + newline
                            + "    private ArrayList<"
                            + className
                            + "> m_listeners = new ArrayList<"
                            + className
                            + ">();" + newline + newline
                            + "    public synchronized void addListener("
                            + className
                            + " l) {" + newline
                            + "        m_listeners.add(l);" + newline
                            + "    }" + newline + newline
                            + "    public synchronized void removeListener("
                            + className
                            + " l) {" + newline
                            + "        m_listeners.remove(l);" + newline
                            + "    }" + newline;
            return rtn;
        }
        else
            return "";
    }
    
    public String getClosingBracket() {
        if (m_translateToCairo) {
            return addJavaScriptFooter();
        }
        else{
            return "}";
        }            
    }

    public String getAuxFunctions() {
        String rtn = "";

        if (m_addDateAuxFunction) {
            rtn += newline + getDateAuxFunction();
        }

        if (m_addParseDateAuxFunction) {
            rtn += newline + getParseDateAuxFunction();
        }

        if (m_addIsNumericAuxFunction) {
            rtn += newline + getIsNumericAuxFunction();
        }

        if (m_addRedimAuxFunction) {
            rtn += newline + getRedimAuxFunction();
        }

        if (m_addRedimPreserveAuxFunction) {
            rtn += newline + getRedimPreserveAuxFunction();
        }

        return rtn;
    }

    public String getGImportSection() {
        String rtn = "";
        m_importCount = 0;

        if (m_addDateAuxFunctionToG || m_addParseDateAuxFunctionToG) {
            addToImportList("import java.text.DateFormat;");
            addToImportList("import java.text.ParseException;");
            addToImportList("import java.text.SimpleDateFormat;");
            addToImportList("import java.text.Date;");
        }

        if (m_addIsNumericAuxFunctionToG) {
            addToImportList("import java.text.ParseException;");
        }

        for (int i = 0; i < m_importCount; i++) {
            rtn += m_imports[i] + newline;
        }

        if (!rtn.isEmpty())
            rtn = newline + rtn + newline;

        return rtn;
    }

    public String getGClass() {
        if (m_UseGAuxFunctions) {

            String rtn = "// Class G : Auxiliary functions" 
                            + newline + "//" + newline + newline
                            + getGImportSection()
                            + "public class G {" + newline;

            if (m_addDateAuxFunctionToG) {
                rtn += newline + getDateAuxFunction();
            }

            if (m_addParseDateAuxFunctionToG) {
                rtn += newline + getParseDateAuxFunction();
            }

            if (m_addIsNumericAuxFunctionToG) {
                rtn += newline + getIsNumericAuxFunction();
            }

            if (m_addRedimAuxFunctionToG) {
                rtn += newline + getRedimAuxFunction();
            }

            if (m_addRedimPreserveAuxFunctionToG) {
                rtn += newline + getRedimPreserveAuxFunction();
            }

            rtn += newline + "}";

            return rtn;

        }
        else
            return "";

    }

    private String getDateAuxFunction() {
        return
                    "    private static Date getDateFromString(String date) {" + newline +
                    "        DateFormat df = new SimpleDateFormat(\"MM/dd/yyyy\");" + newline +
                    "        date = date.replace(\"#\",\"\");" + newline +
                    "        Date dateValue = null;" + newline +
                    "        try {" + newline +
                    "            dateValue = df.parse(date);" + newline +
                    "        } catch (ParseException ex) {/* it can not be possible*/}" + newline +
                    "        return dateValue;" + newline +
                    "    }" + newline;

    }

    private String getParseDateAuxFunction() {
        return
                    "    private static Date parseDate(String date) throws ParseException {" + newline +
                    "        DateFormat df = new SimpleDateFormat(\"MM/dd/yyyy\");" + newline +
                    "        return df.parse(date);" + newline +
                    "    }" + newline;
    }

    private String getIsNumericAuxFunction() {
        return
                    "    private static boolean isNumeric(String number) {" + newline +
                    "        try {" + newline +
                    "            Double.parseDouble(number);" + newline +
                    "            return true;" + newline +
                    "        } " + newline +
                    "        catch (ParseException ex) {" + newline +
                    "            return false;" + newline +
                    "        }" + newline +
                    "    }" + newline;
    }

    private String getRedimAuxFunction() {
        return getRedimAuxFunctionForType("String");
    }

    private String getRedimAuxFunctionForType(String type) {
        return
                    "    public static " + type + "[] redim(" + type + "[] source, int size) {" + newline +
                    "        if (size == 0) {" + newline +
                    "            return null;" + newline +
                    "        }" + newline +
                    "        else {" + newline +
                    "            return new " + type + "[size];" + newline +
                    "        }" + newline +
                    "    }" + newline;
    }

    private String getRedimPreserveAuxFunction() {
        return getRedimPreserveAuxFunctionForType("String");
    }

    private String getRedimPreserveAuxFunctionForType(String type) {
        return
                    "    public static " + type + "[] redimPreserve(" + type + "[] source, int size) {" + newline +
                    "        if (size == 0) {" + newline +
                    "            return null;" + newline +
                    "        }" + newline +
                    "        else {" + newline +
                    "            " + type + "[] tmp = new " + type + "[size];" + newline +
                    "            if (source != null) {" + newline +
                    "                for (int i = 0; i < Math.min(source.length, tmp.length); i++) {" + newline +
                    "                    tmp[i] = source[i];" + newline +
                    "                }" + newline +
                    "            }" + newline +
                    "            return tmp;" + newline +
                    "        }" + newline +
                    "    }" + newline;
    }

    private void parseLine(String strLine) {
        // two kind of sentences
            // In function
            // Declarations

        // functions
            // Function
            // Sub
            // Property

        // if the sentence is split in two or more lines
        // we need to join the lines before translate it
        //
        if (isSentenceComplete(strLine)) {

            strLine = m_strBuffer + G.ltrimTab(strLine);
            m_strBuffer = "";

            strLine = removeLineNumbers(strLine);

            if (isEmptyLine(strLine)) {
                return;
            }
            if (isVbSpecificCode(strLine)) {
                return;
            }
            if (isComment(strLine)) {
                return;
            }
            if (isDeclareApi(strLine)) {
                return;
            }
            else if (isBeginOfType(strLine)) {
                m_inType = true;
                return;
            }
            else if (isEndOfType(strLine)) {
                return;
            }
            if (m_inType) {
                return;
            }
            else if (isBeginOfEnum(strLine)) {
                m_inEnum = true;
                return;
            }
            else if (isEndOfEnum(strLine)) {
                return;
            }
            else if (m_inEnum) {
                return;
            }
            else if (isEndFunction(strLine)) {
                setNeedReturnValue();
                m_function = null;
                m_inFunction = false;
                return;
            }
            else if (m_inFunction) {
                checkRaiseEvent(strLine);
                checkNeedReturnVariable(strLine);
                return;
            }
            else {
                // first check for Function | Sub | Property
                if (isBeginOfFunction(strLine)) {
                    parseFunctionDeclaration(strLine);
                    return;
                }
                // declarations
                else {
                    parsePublicMember(strLine);
                    return;
                }
            }
        }
        // split sentences
        else {
            m_strBuffer += G.rtrim(strLine.substring(0, strLine.length()-1)) + " " ;
            return;
        }
    }

    private String translateLine(String strLine) {
        
        // debug
        
        //if (G.beginLike(strLine.trim(), "With .Add(Nothing, rs(cscPrtId).Value)")) {
        //    int i = 9999;
        //}
        
        
        // two kind of sentences
            // In function
            // Declarations

        // functions
            // Function
            // Sub
            // Property

        // if the sentence is split in two or more lines
        // we need to join the lines before translate it
        //
        if (isSentenceComplete(strLine)) {

            strLine = m_strBuffer + G.ltrimTab(strLine);
            m_strBuffer = "";

            strLine = removeLineNumbers(strLine);

            if (isEmptyLine(strLine)) {
                return strLine + newline;
            }
            if (isVbSpecificCode(strLine)) {
                return "//" + strLine + newline;
            }
            if (isComment(strLine)) {
                return getTabs() + commentLine(strLine);
            }
            if (isDeclareApi(strLine)) {
                return declareApiLine(strLine);
            }
            if (m_inType) {
                addToType(strLine);
                return "";
            }
            else if (isBeginOfType(strLine)) {
                addToType(strLine);
                return "//*TODO:** type is translated as a new class at the end of the file " + strLine + newline;
            }
            else if (isBeginOfEnum(strLine)) {
                addToEnum(strLine);
                return "//*TODO:** enum is translated as a new class at the end of the file " + strLine + newline;
            }
            else if (m_inEnum) {
                addToEnum(strLine);
                return "";
            }
            else if (m_inFunction) {
                checkEndBlock(strLine);
                String line = translateLineInFunction(strLine);
                String rtn = "";
                if (!line.isEmpty()) {
                    String tabs = getTabs();
                    rtn = tabs + line;                
                }
                checkBeginBlock(strLine);
                return rtn;
            }
            else {
                // first check for Function | Sub | Property
                if (isBeginOfFunction(strLine)) {
                    checkEndBlock(strLine);
                    String rtn = getTabs() + translateLineInFunction(strLine);
                    checkBeginBlock(strLine);
                    return rtn;
                }
                // declarations
                else {
                    checkEndBlock(strLine);
                    String rtn = getTabs() + translateLineInDeclaration(strLine);
                    checkBeginBlock(strLine);
                    return rtn;
                }
            }
        }
        // split sentences
        else {
            m_strBuffer += strLine.substring(0, strLine.length()-1).trim() + " ";
            return "";
        }
    }

    private boolean isSentenceComplete(String strLine) {
        strLine = G.ltrimTab(strLine);
        if (strLine.isEmpty())
            return true;
        else if (getStartComment(strLine) >= 0)
            return true;
        else if (strLine.length() < 2)
            return true;
        else
            return !(strLine.substring(strLine.length()-2).equals(" _"));
    }

    private int getStartComment(String strLine) {
        boolean literalFlag = false;
        for (int i = 0; i < strLine.length(); i++) {
            if (strLine.charAt(i) == '"') {
                literalFlag = !literalFlag;
            }
            else if (strLine.charAt(i) == '\'') {
                if (!literalFlag) {
                    return i;
                }
            }
        }
        return -1;
    }

    private boolean isEmptyLine(String strLine) {
        strLine = G.ltrimTab(strLine);
        return strLine.isEmpty();
    }

    private boolean isVbSpecificCode(String strLine) {
        strLine = G.ltrimTab(strLine).toLowerCase();
        if (strLine.isEmpty())
            return false;
        if (strLine.equals("option explicit"))
            return true;
        else
            return false;
    }

    private boolean isComment(String strLine) {
        strLine = G.ltrimTab(strLine);
        if (strLine.isEmpty())
            return false;
        else
            return strLine.charAt(0) == '\'';
    }

    private String commentLine(String strLine) {
        return G.ltrimTab(strLine.replaceFirst("'", "//")) + newline;
    }

    private boolean isDeclareApi(String strLine) {
        strLine = G.ltrimTab(strLine);
        if (strLine.isEmpty()) {
            return false;
        }
        else {
            if (strLine.length() >= 15) {
                if (strLine.substring(0, 15).equalsIgnoreCase("public declare ")) {
                    return true;
                }
                else if (strLine.length() >= 16) {
                    return strLine.substring(0, 16).equalsIgnoreCase("private declare ");
                }
                else {
                    return false;
                }
            }
            else {
                return false;
            }
        }
    }














    

    
   
    

    
       
        String vbIdentifier = identifier;
        identifier = getCairoVariableName(identifier);
        identifier = identifier.toUpperCase();        

        Variable var = new Variable();
        var.setVbName(vbIdentifier);
        var.setJavaConstantName(identifier);
        var.setType(dataType);
        m_memberVariables.add(var);

        saveVariable(vbIdentifier, identifier, dataType);

        if (m_translateToJava) {

            return "public static final " + dataType + " " + identifier + " = "
                    + constValue + ";" + misc + newline;
        }
        else {

            String rtn = "public const " + dataType + " " + identifier + " = "
                    + constValue + ";" + misc + newline;
            
            if (m_translateToCairo) {
                if (G.beginLike(rtn, "public const String CSC")) {
                    rtn = identifier.substring(3) + ": "
                        + constValue + "," + misc + newline;
                }
                else if (G.beginLike(rtn, "public const String CST")) {
                    rtn = identifier.substring(3) + ": "
                        + constValue + "," + misc + newline;
                }
            }        
            
            return rtn;
        }
    }

    private String translatePrivateMember(String strLine) {
        // form is
            // dim variable_name as data_type
        strLine = strLine.trim();
        String[] words = G.splitSpace(strLine);//strLine.split("\\s+");
        String dataType = "";
        String identifier = "";
        String vbIdentifier = "";
        String misc = "";
        boolean isEventGenerator = false;

        if (words.length > 1) {
            vbIdentifier = words[1];

            // with events eg:
            //      private withevents my_obj_with_events as CObjetWithEvents ' some comments
            //      0       1           2                 3        4          >= 5
            //
            if (vbIdentifier.equalsIgnoreCase("WithEvents")) {
                vbIdentifier = words[2];
                identifier = getIdentifier(vbIdentifier);
                if (words.length > 4) {
                    dataType = words[4];
                }
                for (int i = 5; i < words.length; i++) {
                    misc += " " + words[i] ;
                }
                isEventGenerator = true;
            }
            else {
                identifier = getIdentifier(vbIdentifier);
                if (words.length > 3) {
                    dataType = words[3];
                }
                for (int i = 4; i < words.length; i++) {
                    misc += " " + words[i] ;
                }
            }
        }
        boolean isArray = false;
        if (!identifier.isEmpty()) {
            isArray = identifier.endsWith("()");
            if (isArray) {
                identifier = identifier.substring(0, identifier.length() - 2);
            }
            
            identifier = getCairoVariableName(identifier);
            
            Variable var = new Variable();
            var.setVbName(vbIdentifier);
            var.setJavaName(identifier);
            var.setType(dataType);
            var.isArray = isArray;
            var.isEventGenerator = isEventGenerator;
            if (isEventGenerator) {
                addToEventListeners(vbIdentifier,
                                    var.getJavaName(),
                                    dataType,
                                    getEventMacroName(var.getJavaName()));
            }
            m_memberVariables.add(var);
        }
        if (dataType.isEmpty()) {
            dataType = getObjectTypeName();
        }
        dataType = getDataType(dataType);

        saveVariable(vbIdentifier, identifier, dataType);

        String modifiers = "";
        if (m_isBasFile)
            modifiers = "static ";
        
        if (m_translateToCairo) {
            return "var " + identifier + getInitialValueForType(dataType) + ";" + misc + newline;
        }
        else {
            if (isArray)
                return "private " + modifiers + dataType + "[] " + identifier + getInitialValueForType(dataType) + ";" + misc + newline;
            else
                return "private " + modifiers + dataType + " " + identifier + getInitialValueForType(dataType) + ";" + misc + newline;
        }
    }

    private String translatePublicMember(String strLine) {
        // form is
        // dim variable_name as data_type
        strLine = strLine.trim();
        String[] words = G.splitSpace(strLine);//strLine.split("\\s+");
        String dataType = "";
        String identifier = "";
        String vbIdentifier = "";
        String misc = "";
        boolean isEventGenerator = false;

        if (words.length > 1) {
            vbIdentifier = words[1];
            // with events eg:
            //      private withevents my_obj_with_events as CObjetWithEvents ' some comments
            //      0       1           2                 3        4          >= 5
            //
            if (vbIdentifier.equalsIgnoreCase("WithEvents")) {
                vbIdentifier = words[2];
                identifier = getIdentifier(vbIdentifier);
                if (words.length > 4) {
                    dataType = words[4];
                }
                for (int i = 5; i < words.length; i++) {
                    misc += " " + words[i] ;
                }
                isEventGenerator = true;
            }
            else {
                identifier = getIdentifier(vbIdentifier);
                if (words.length > 3) {
                    dataType = words[3];
                }
                for (int i = 4; i < words.length; i++) {
                    misc += " " + words[i] ;
                }
            }
        }
        if (!identifier.isEmpty()) {
            
            identifier = getCairoVariableName(identifier);
            
            Variable var = new Variable();
            var.setVbName(vbIdentifier);
            var.setJavaName(identifier);
            var.setType(dataType);
            var.isEventGenerator = isEventGenerator;
            if (isEventGenerator) {
                addToEventListeners(vbIdentifier,
                                    var.getJavaName(),
                                    dataType,
                                    getEventMacroName(var.getJavaName()));
            }
            m_memberVariables.add(var);
        }
        if (dataType.isEmpty()) {
            dataType = getObjectTypeName();
        }
        dataType = getDataType(dataType);

        saveVariable(vbIdentifier, identifier, dataType, false, true);

        boolean isArray = identifier.endsWith("()");
        if (isArray) {
            identifier = identifier.substring(0, identifier.length() - 2);
        }
        
        identifier = getCairoVariableName(identifier);
        
        Variable var = new Variable();
        var.setVbName(vbIdentifier);
        var.setJavaName(identifier);
        var.packageName = m_packageName;
        var.setType(dataType);
        var.isPublic = true;
        var.isArray = isArray;
        m_publicVariables.add(var);

        String modifiers = "";
        if (m_isBasFile)
            modifiers = "static ";
        
        if (m_translateToCairo) {
            return "var " + identifier + getInitialValueForType(dataType) + ";" + misc + newline;
        }
        else {
            if (isArray)
                return "public " + modifiers + dataType + "[] " + identifier + getInitialValueForType(dataType) + ";" + misc + newline;
            else
                return "public " + modifiers + dataType + " " + identifier + getInitialValueForType(dataType) + ";" + misc + newline;
        }
    }

    private String getInitialValueForType(String dataType) {
        String iniValue = getDefaultForReturnType(dataType);
        if (!iniValue.isEmpty())
            iniValue = " = " + iniValue;
        return iniValue;
    }

    private String getIdentifier(String word) {
        String identifier = "";
        if (word.length() > 2 ) {
            if (word.substring(0,2).equals("m_")) {
                identifier = word.substring(0,3).toLowerCase();
                if (word.length() > 3 ) {
                    identifier += word.substring(3);
                }
            }
            else{
                identifier = word;
            }
        }
        else {
            identifier = word;
        }
        return identifier;
    }

    // we need three elements in custom events
    //  -- event class
    //  -- event listener interface
    //  -- event generator
    //
    // a) when the class which we are translating has public events
    // (private events doesn't have sense) we have to create the
    // event listener interface with a method for every public event and
    // a class which implements the event listener interface as and adapter
    // class (to free the listener to implement all the methods of the interface).
    // the listeners will extend the adapter class as an inner anonymous class.
    // the interface name will be named as the class plus the
    // postfix EventI eg: for a class named in vb6 code as cReport the interface
    // will be CReportEventI (remeber that every class will be capitalized)
    // and the adapter will be CReportEventA
    //
    // b) when the class which we are translating is the event listener
    // it has to declare an anonymous inner classes which extend
    // the adapter class (which implement the event listener
    // interface) for every variable which raises events.
    //
    // c) in visual basic 6 you need to instantiate the member variable
    // which generate events with an explicit assignment like
    //
    //      set m_event_generator = new ClassEventGenerator
    // or
    //      set m_event_generator = already_instantiated_event_generator
    //
    // we have to add after that point a call to the addListener method of the
    // event generator object.
    //
    // the problem is that we are translating in one read of the content
    // line by line from up to down and so at the point of this asignment
    // line we can't be sure that we know every event our class is
    // intrested to listen to. for this reason we need to reach the end
    // of the file to be sure we know all the code related to events of 
    // a "with events variable".
    //
    // to fix it we will add a macro to be replace after translating the class
    // with the definition of the anonymous inner class for every "with events
    // variable". this macro will be:
    //          __ADD_TO_LISTENER_name_of_the_generator_variable__
    //
    //  eg: if the generetor is m_report the macro will be
    //
    //          __ADD_TO_LISTENER_m_report__
    //
    private void addToEventListeners(String eventGeneratorVb,
            String eventGeneratorJava,
            String className,
            String eventMacro) {
        EventListener eventListener = new EventListener();
        eventListener.setGeneratorVb(eventGeneratorVb);
        eventListener.setGeneratorJava(eventGeneratorJava);
        eventListener.setAdapter(className + C_ADAPTER_POSTIFX);
        eventListener.setEventMacro(eventMacro);
        m_eventListeners.add(eventListener);
    }

    private String getEventMacroName(String variable) {
        return "__ADD_TO_LISTENER_" + variable + "__";
    }

    private String translateDim(String strLine) {
        // form is
            // dim variable_name as data_type
        strLine = strLine.trim();
        String[] words = G.splitSpace(strLine);//strLine.split("\\s+");
        String dataType = "";
        String vbIdentifier = "";
        String identifier = "";
        String misc = "";

        if (words.length > 1) {
            vbIdentifier = words[1];
            identifier = getVariableName(words[1]);
            if (words.length > 3) {
                dataType = words[3];
            }
            for (int i = 4; i < words.length; i++) {
                misc += " " + words[i] ;
            }
        }
        if (dataType.isEmpty()) {
            dataType = getObjectTypeName();
        }
        dataType = getDataType(dataType);

        if (m_translateToCairo) {
            identifier = translateVarNameToCairo(identifier);
        }
        
        identifier = getCairoVariableName(identifier);
        
        Variable var = new Variable();
        var.setJavaName(identifier);
        var.setVbName(vbIdentifier);
        var.setType(dataType);
        m_functionVariables.add(var);

        if (identifier.contains("(")) {
            words = G.split(identifier);
            if (words.length > 3) {
                dataType += "[" + words[2] + "]";
            }
            else {
                dataType += "[]";
            }
            dataType = m_translateToCairo ? "var" : dataType;
            return dataType + " " + identifier + " = null;" + misc + newline;
        }
        else {
            dataType = m_translateToCairo ? "var" : dataType;
            return dataType + " " + identifier + " = "
                    + getZeroValueForDataType(dataType) + ";" + misc + newline;
        }
    }

    private String removeExtraSpaces(String strLine) {
        String rtn = "";
        boolean previousWasAChar = false;
        for (int i = 0; i < strLine.length(); i++) {
            if (strLine.charAt(i) == ' ') {
                if (!previousWasAChar) {
                    rtn += " ";
                    previousWasAChar = true;
                }
            }
            else {
                rtn += strLine.charAt(i);
                previousWasAChar = false;
            }
        }
        return rtn;
    }

    public void initDbObjects() {
        m_classObject = new ClassObject();
        m_functionObject = new FunctionObject();
        m_variableObject = new VariableObject();
        m_typeClassObject = new ClassObject();
        m_enumClassObject = new ClassObject();
        createADODBClasses();
        createVBClasses();
    }

    public void initTranslator(String name) {
        m_isVbSource = false;
        m_codeHasStarted = false;
        m_attributeBlockHasStarted = false;
        m_inFunction = false;
        m_inEnum = false;
        m_inWith = false;
        m_withDeclaration = false;
        m_endWithDeclaration = false;
        m_type = "";
        m_vbClassName = "";
        m_javaClassName = "";
        m_collTypes.removeAll(m_collTypes);
        m_collEnums.removeAll(m_collEnums);
        m_collWiths.removeAll(m_collWiths);
        m_eventListeners.removeAll(m_eventListeners);
        m_memberVariables.removeAll(m_memberVariables);
        m_functionVariables.removeAll(m_functionVariables);
        m_raiseEvents = false;
        m_privateFunctions = new ArrayList<Function>();
        m_publicFunctions = new ArrayList<Function>();
        m_publicVariables = new ArrayList<Variable>();
        m_raiseEventFunctions = new ArrayList<String>();
        m_types = new ArrayList<Type>();
        m_tabCount = 0;
        m_listenerInterface = "";
        m_adapterClass = "";
        m_addDateAuxFunction = false;
        m_addParseDateAuxFunction = false;
        m_addIsNumericAuxFunction = false;
        m_addRedimAuxFunction = false;
        m_addRedimPreserveAuxFunction = false;
        m_returnValue = "";
        m_imports = new String[100];
        m_importCount = 0;
        m_setReturnValueFound = false;
        m_needReturnVariable = false;
        m_function = null;
        m_isBasFile = false;
        m_onErrorFound = false;
        m_onErrorLabel = "";
        m_onCatchBlock = false;
        m_scalaCode = "";
        
        // scala
        //
        m_discardProperty = false;
        m_discardedProperties = "";
        
        m_caseClassDataFields = "";
        m_caseClassPrefix = "";
        m_formData = "";
        m_writeData = "";
        m_createUpdateParamList = "";
        
        m_caseClassFields = "";
        m_caseClassNoFKFields = "";
        m_caseClassArgumentsFull = "";
        m_caseClassArgumentsApplyFull = "";
        m_caseClassArgumentsNoFK = "";
        m_caseClassEmptyArguments = "";
        
        m_camelField = "";
        
        m_parserMap = "";
        m_parserColumns = "";
        m_parserColumns2 = "";
        m_saveFieldList = "";
        
        initInCairoFlags();

        if (name.contains(".")) {
            if (name.length() > 0) {
                String ext = name.substring(name.length()-3).toLowerCase();
                if ( ext.equals("bas") || ext.equals("cls") || ext.equals("frm") ) {
                    m_isVbSource = true;
                }
                m_isBasFile = ext.equals("bas");
            }
        }
    }

    private void saveTypeClassInDB(String className) {
        int i = className.indexOf("'");
        if (i > 0) {
            className = className.substring(0, i - 1).trim();
        }
        i = className.indexOf(" ");
        if (i > 0) {
            className = className.substring(0, i - 1).trim();
        }        
        m_typeClassObject.setPackageName(m_packageName);
        m_typeClassObject.setVbName(className);
        m_typeClassObject.setJavaName(className);
        m_typeClassObject.getClassIdFromClassName();
        m_typeClassObject.saveClass();
    }

    private void saveEnumClassInDB(String className, boolean isPublic) {
        int i = className.indexOf("'");
        if (i > 0) {
            className = className.substring(0, i - 1).trim();
        }
        i = className.indexOf(" ");
        if (i > 0) {
            className = className.substring(0, i - 1).trim();
        }
        m_enumClassObject.setPackageName(m_packageName);
        m_enumClassObject.setVbName(className);
        m_enumClassObject.setJavaName(className);
        m_enumClassObject.getClassIdFromClassName();
        if (isPublic) {
            m_enumClassObject.setIsPublicEnum(true);
            m_enumClassObject.setEnumParentClass("");
        }
        else {
            m_enumClassObject.setIsPublicEnum(false);
            m_enumClassObject.setEnumParentClass(m_javaClassName);
        }
        m_enumClassObject.saveClass();
    }

    private void addToType(String strLine) {
        String className = "";
        strLine = G.ltrim(strLine);
        int startComment = getStartComment(strLine);
        String comments = "";
        if (startComment >= 0) {
            comments =  "//" + strLine.substring(startComment);
            strLine = strLine.substring(0, startComment-1);
        }

        if (strLine.length() > 5) {
            if (strLine.substring(0,5).toLowerCase().equals("type ")) {
                Type type = new Type();
                type.vbName = strLine.substring(5);
                className = type.vbName;
                type.javaName = className;
                type.getVbCode().append(strLine);
                m_types.add(type);
                m_type += "private class " + className + " {" + comments + newline;
                saveTypeClassInDB(className);
                return;
            }
        }

        if (strLine.length() > 12) {
            if (strLine.substring(0,12).toLowerCase().equals("public type ")) {
                Type type = new Type();
                type.isPublic = true;
                type.vbName = strLine.substring(12);
                className = type.vbName;
                type.javaName = className;
                type.getVbCode().append(strLine);
                m_types.add(type);
                m_type += "public class " + className + " {" + comments + newline;
                saveTypeClassInDB(className);
                return;
            }
        }

        if (strLine.length() > 13) {
            if (strLine.substring(0,13).toLowerCase().equals("private type ")) {
                Type type = new Type();
                type.vbName = strLine.substring(13);
                className = type.vbName;
                type.javaName = className;
                type.getVbCode().append(strLine);
                m_types.add(type);
                m_type += "private class " + className + " {" + comments + newline;
                saveTypeClassInDB(className);
                return;
            }
        }

        if (G.beginLike(strLine, "end type")) {
            m_inType = false;
            m_type += "}" + comments + newline + newline;
            m_collTypes.add(m_type);
            Type type = m_types.get(m_types.size()-1);
            type.getVbCode().append(strLine);
            type.getJavaCode().append(m_type);
            m_type = "";
            if (type.isPublic)
                m_caller.addPublicType(type);
        }
        else {
            String dataType = "";
            String identifier = "";

            Type type = m_types.get(m_types.size()-1);
            type.getVbCode().append(strLine);

            strLine = strLine.trim();
            String[] words = G.splitSpace(strLine);//strLine.split("\\s+");

            if (words.length > 0) {

                // check to see if it is an array
                //
                if (words[0].contains("(")) {

                    String size = words[0].substring(words[0].indexOf("(")+1);
                    if (size.equals(")")) {
                        dataType = getObjectTypeName() + "[]";
                    }
                    else {
                        if (words.length >= 3) {
                            if (words[1].equalsIgnoreCase("to")) {

                                int lowBound = Integer.parseInt(size);
                                size = words[2].substring(0,words[2].length()-1);
                                String upperBound = size;
                                if (lowBound == 1) {
                                    size = upperBound;
                                }
                                else {
                                    size = upperBound + " - " + ((Integer)(lowBound-1)).toString();
                                }

                                // complete sentence eg: type_member(low_bound to upper_bound) as data_type
                                //                       |                   | |  |          | |  |
                                //                       1                     2  3            4  5
                                //
                                if (words.length >= 5) {
                                    if (words[4].charAt(0) =='\'') {
                                        dataType = getObjectTypeName() + "[" + size + "]";
                                    }
                                    else {
                                        dataType = words[4] + "[" + size + "]";
                                    }
                                }
                                else {
                                    dataType = getObjectTypeName() + "[" + size + "]";
                                }
                            }
                            else {
                                size = words[0].substring(words[0].indexOf("(")+1);
                                size = size.substring(0, size.length()-1);
                                dataType = words[2] + "[" + size + "]";
                            }
                        }
                        // variant array like: type_member(dimension)
                        //
                        else {
                            size = words[0].substring(words[0].indexOf("(")+1);
                            size = size.substring(0, size.length()-1);
                            dataType = words[2] + "[" + size + "]";
                        }
                    }
                    identifier = words[0].substring(0, words[0].indexOf("("));
                }
                else {
                    // complete sentence eg: type_member as data_type
                    //
                    if (words.length >= 3) {

                        if (words[1].charAt(0) =='\'') {
                            dataType = getObjectTypeName();
                        }
                        else {
                            if (words[2].charAt(0) =='\'') {
                                dataType = getObjectTypeName();
                            }
                            else {
                                dataType = words[2];
                            }
                        }
                    }
                    // implicit sentence eg: type_member {no declaration of type}
                    //
                    else {
                        dataType = getObjectTypeName();
                    }
                    identifier = words[0];
                }

                String vbIdentifier = identifier;
                if (!identifier.isEmpty()) {
                    if (identifier.length() > 2)
                        identifier = identifier.substring(0, 1).toLowerCase() + identifier.substring(1);
                    else
                        identifier = identifier.substring(0, 1).toLowerCase();
                }

                saveVariableInType(vbIdentifier, identifier, dataType);

                identifier = getCairoVariableName(identifier);
                
                Variable var = new Variable();
                var.setVbName(vbIdentifier);
                var.setJavaName(identifier);
                var.setType(dataType);
                var.isPublic = true;
                type.getMembersVariables().add(var);

                m_type += "    public " + dataType + ' ' + identifier + ";" + comments + newline;
            } 
            else {
                m_type += strLine;
            }
        }
    }

    private void addToEnum(String strLine) {
        strLine = G.ltrim(strLine);

        if (strLine.length() > 5) {
            if (strLine.substring(0, 5).toLowerCase().equals("enum ")) {
                String enumClass = strLine.substring(5);
                saveEnumClassInDB(enumClass, m_isBasFile);
                if (m_translateToJava)
                    m_enum += "private class " + enumClass + " {" + newline;
                else
                    m_enum += "private enum " + enumClass + " {" + newline;
                return;
            }
        }

        if (strLine.length() > 12) {
            if (strLine.substring(0, 12).toLowerCase().equals("public enum ")) {
                String enumClass = strLine.substring(12);
                saveEnumClassInDB(enumClass, true);
                if (m_translateToJava)
                    m_enum += "public class " + enumClass + " {" + newline;
                else
                    m_enum += "public enum " + enumClass + " {" + newline;
                return;
            }
        }

        if (strLine.length() > 13) {
            if (strLine.substring(0, 13).toLowerCase().equals("private enum ")) {
                String enumClass = strLine.substring(13);
                saveEnumClassInDB(enumClass, false);
                if (m_translateToJava)
                    m_enum += "private class " + enumClass + " {" + newline;
                else
                    m_enum += "private enum " + enumClass + " {" + newline;
                return;
            }
        }

        if (G.beginLike(strLine,"end enum")) {
            m_inEnum = false;
            int lastColon = 0;
            for (int i = 0; i < m_enum.length(); i++) {
                if (m_enum.charAt(i) == ',') {
                    lastColon = i;
                }
                else if (m_enum.charAt(i) == '\'') {
                    break;
                }
            }
            if (lastColon > 0) {
                m_enum = m_enum.substring(0,lastColon) + m_enum.substring(lastColon+1);
            }
            m_enum += "}" + newline + newline;
            m_collEnums.add(m_enum);
            m_enum = "";
        }
        else {
            String constValue = "";
            String identifier = "";
            String misc = "";

            strLine = strLine.trim();
            String[] words = G.splitSpace(strLine);//strLine.split("\\s+");

            if (words.length > 0) {

                identifier = words[0];
                
                // complete sentence eg: enum_member = enum_value
                //
                if (words.length >= 3) {
                    if (words[1].charAt(0) == '=') {
                        constValue = words[2];
                    }
                }
                // implicit sentence eg: enum_member {no declaration of value}
                //
                else {
                    int lenIdentifier = identifier.length();
                    if (strLine.length() > lenIdentifier) {
                        misc = "//" + strLine.substring(lenIdentifier);
                    }
                }

                if (constValue.isEmpty()) {
                    if (m_translateToJava)
                        m_enum += "    public static final int " + identifier.toUpperCase() 
                                + ";" + misc + newline;
                    else
                        m_enum += "    " + identifier.toUpperCase() 
                                + "," + misc + newline;
                }
                else {
                    if (constValue.length() > 2) {
                        if (constValue.substring(0, 2).equalsIgnoreCase("&h")) {
                            constValue = "0x" + constValue.substring(2);
                        }
                    }
                    if (m_translateToJava)
                        m_enum += "    public static final int " + identifier.toUpperCase() + " = "
                                + constValue + ";" + misc + newline;
                    else
                        m_enum += "    " + identifier.toUpperCase() + " = "
                                + constValue + "," + misc + newline;
                }
                saveVariableInEnum(identifier, identifier.toUpperCase(), "int");
            }
            else {
                m_enum += strLine;
            }
        }
    }

    public String getSubClasses() {
        String subClasses = "";
        for (int i = 0; i < m_collTypes.size(); i++) {
            subClasses += m_collTypes.get(i) + newline;
        }
        for (int i = 0; i < m_collEnums.size(); i++) {
            subClasses += m_collEnums.get(i) + newline;
        }
        return subClasses;
    }
    
    public String getScalaFiles() {
        return 
                "// Controller \n\n"
                + getControllerFile()
                + "\n\n// Model\n\n"
                + getModelFile()
                + "\n\n// Router\n\n"
                + getRouter()
                + "\n\n\n\n/*" + m_discardedProperties + "*/\n";
    }

    public void addEventListenerInterface() {
        if (!m_listenerInterface.isEmpty())
            m_caller.addClass(m_javaClassName + C_INTERFACE_POSTIFX,
                    "public interface "
                    + m_javaClassName
                    + C_INTERFACE_POSTIFX + " {"
                    + newline
                    + m_listenerInterface
                    + "}");
    }

    public void addEventListenerAdapter() {
        if (!m_listenerInterface.isEmpty())
            m_caller.addClass(m_javaClassName + C_ADAPTER_POSTIFX,
                    "public class "
                    + m_javaClassName
                    + C_ADAPTER_POSTIFX + " implements "
                    + m_javaClassName
                    + C_INTERFACE_POSTIFX + " {"
                    + newline
                    + m_adapterClass
                    + "}");
    }

    public void implementListeners(StringBuilder code) {
        
        Iterator itrListener = m_eventListeners.iterator();
        while(itrListener.hasNext()) {
            EventListener listener = (EventListener)itrListener.next();
            String innerClass = listener.getAnonymousInnerClass();
            String callToAddListener = listener.getGeneratorJava() + ".addListener("
                                        + innerClass + ")";
            int i = code.indexOf(listener.getEventMacro());
            if (i > 0) {
                int j = i + listener.getEventMacro().length();
                code.replace(i, j, callToAddListener);
            }
        }
    }

    private void checkBeginBlock(String strLine) {
        m_wasSingleLineIf = false;
        strLine = G.ltrimTab(strLine);

        if (m_onCatchBlock) {
            m_tabCount++;
            m_onCatchBlock = false;
        }
        // If
        //
        else if (G.beginLike(strLine, "If ")) {
            int startComment = getStartComment(strLine);
            if (startComment >= 0) {
                strLine = strLine.substring(0, startComment-1);
            }
            strLine = strLine.trim();
            if (G.endLike(strLine, " Then")) {
                m_tabCount++;
                m_wasSingleLineIf = false;
            }
            else {
                m_wasSingleLineIf = true;
            }
        }
        // Else If
        //
        else if (G.beginLike(strLine, "ElseIf ")) {
            int startComment = getStartComment(strLine);
            if (startComment >= 0) {
                strLine = strLine.substring(0, startComment-1);
            }
            strLine = strLine.trim();
            if (G.endLike(strLine, " Then")) {
                m_tabCount++;
                m_wasSingleLineIf = false;
            }
            else {
                m_wasSingleLineIf = true;
            }
        }
        // Else
        //
        else if (G.beginLike(strLine, "Else ")) {
            int startComment = getStartComment(strLine);
            if (startComment >= 0) {
                strLine = strLine.substring(0, startComment-1);
            }
            strLine = strLine.trim();
            if (strLine.trim().equalsIgnoreCase("Else")) {
                m_tabCount++;
                m_wasSingleLineIf = false;
            }
            else {
                m_wasSingleLineIf = true;
            }
        }
        // Else
        //
        else if (strLine.trim().equalsIgnoreCase("Else")) {
            m_tabCount++;
        }
        // For
        //
        else if (G.beginLike(strLine, "For ")) {
            m_tabCount++;
        }
        // While
        //
        else if (G.beginLike(strLine, "While ")) {
            m_tabCount++;
        }
        // Do
        //
        else if (G.beginLike(strLine, "Do ")) {
            m_tabCount++;
        }
        // With
        //
        //else if (G.beginLike(strLine, "With ")) {
        //    m_tabCount++;
        //}
        // Select Case
        //
        else if (G.beginLike(strLine, "Select Case ")) {
            m_tabCount+=2;
        }
        // Case
        //
        else if (G.beginLike(strLine, "Case ")) {
            m_tabCount++;
        }
        // Public Function
        //
        else if (G.beginLike(strLine, "Public Function ")) {
            m_tabCount++;
        }
        // Private Function
        //
        else if (G.beginLike(strLine, "Private Function ")) {
            m_tabCount++;
        }
        // Public Sub
        //
        else if (G.beginLike(strLine, "Public Sub ")) {
            m_tabCount++;
        }
        // Private Sub
        //
        else if (G.beginLike(strLine, "Private Sub ")) {
            m_tabCount++;
        }
        // Function
        //
        else if (G.beginLike(strLine, "Function ")) {
            m_tabCount++;
        }
        // Sub
        //
        else if (G.beginLike(strLine, "Sub ")) {
            m_tabCount++;
        }
        // Public Property
        //
        else if (G.beginLike(strLine, "Public Property ")) {
            m_tabCount++;
        }
        // Private Property
        //
        else if (G.beginLike(strLine, "Private Property ")) {
            m_tabCount++;
        }
        // Property
        //
        else if (G.beginLike(strLine, "Property ")) {
            m_tabCount++;
        }
        // Friend Function
        //
        else if (G.beginLike(strLine, "Friend Function ")) {
            m_tabCount++;
        }
        // Friend Sub
        //
        else if (G.beginLike(strLine, "Friend Sub ")) {
            m_tabCount++;
        }
        // Friend Property
        //
        else if (G.beginLike(strLine, "Friend Property ")) {
            m_tabCount++;
        }
        // On error
        //
        else if (G.beginLike(strLine, "On Error ")) {
            if (m_translateToCairo) {
                if (!G.beginLike(strLine.trim(), "On Error Resume Next")) {
                    m_tabCount++;
                    m_onErrorFound = true;                    
                }
            }
            else {
                m_tabCount++;
                m_onErrorFound = true;
            }
        }
    }

    private void checkEndBlock(String strLine) {
        strLine = G.ltrimTab(strLine);
        
        int startComment = getStartComment(strLine);
        if (startComment >= 0) {
            strLine = strLine.substring(0, startComment-1);
        }
        
        if (strLine.trim().equalsIgnoreCase("End If")) {
            m_tabCount--;
        }
        // ElseIf
        //
        else if (G.beginLike(strLine, "ElseIf ")) {
            //if (G.endLike(strLine, " Then")) {
            //    m_tabCount--;
            //}
            //if (!m_wasSingleLineIf) m_tabCount--;
            m_tabCount--;
        }
        // Else
        //
        else if (G.beginLike(strLine, "Else ")) {
            //if (!m_wasSingleLineIf) m_tabCount--;
            m_tabCount--;
        }
        // Else
        //
        else if (strLine.trim().equalsIgnoreCase("Else")) {
            //if (!m_wasSingleLineIf) m_tabCount--;
            m_tabCount--;
        }
        // End Select
        //
        else if (strLine.trim().equalsIgnoreCase("End Select")) {
            m_tabCount-=2;
        }
        // Case
        //
        else if (G.beginLike(strLine, "Case ")) {
            m_tabCount--;
        }
        // End With
        //
        //else if (strLine.trim().equalsIgnoreCase("End With")) {
        //    m_tabCount--;
        //}
        // Loop
        //
        else if (G.beginLike(strLine, "Loop ")) {
            m_tabCount--;
        }
        else if (strLine.trim().equalsIgnoreCase("Loop")) {
            m_tabCount--;
        }
        // Wend
        //
        else if (strLine.trim().equalsIgnoreCase("Wend")) {
            m_tabCount--;
        }
        // Next
        //
        else if (G.beginLike(strLine, "Next ")) {
            m_tabCount--;
        }
        // Next
        //
        else if (strLine.trim().equalsIgnoreCase("Next")) {
            m_tabCount--;
        }
        // End Function
        //
        else if (strLine.trim().equalsIgnoreCase("End Function")) {
            m_tabCount--;
            if (m_onErrorFound)
                m_tabCount--;
        }
        // End Sub
        //
        else if (strLine.trim().equalsIgnoreCase("End Sub")) {
            m_tabCount--;
            if (m_onErrorFound)
                m_tabCount--;
        }
        // End Property
        //
        else if (strLine.trim().equalsIgnoreCase("End Property")) {
            m_tabCount--;
            if (m_onErrorFound)
                m_tabCount--;
        }
        // Label Error
        //
        else if (isOnErrorLabelSentence(strLine)) {
            m_tabCount--;
            m_onCatchBlock = true;
        }
        // End On Error
        //
        else if (isOnErrorSentence(strLine)) {
            if (m_onErrorFound)
                m_tabCount--;
        }

        if (m_tabCount < 1) {
            m_tabCount = 1;
        }
    }

    private Boolean isEndFunction(String strLine) {
        strLine = G.ltrimTab(strLine);

        int startComment = getStartComment(strLine);
        if (startComment >= 0) {
            strLine = strLine.substring(0, startComment-1);
        }
        boolean isEnd = false;
        // En Function
        //
        if (strLine.trim().equalsIgnoreCase("End Function")) {
            isEnd = true;
        }
        // End Sub
        //
        else if (strLine.trim().equalsIgnoreCase("End Sub")) {
            isEnd = true;
        }
        // End Property
        //
        else if (strLine.trim().equalsIgnoreCase("End Property")) {
            isEnd = true;
        }
        return isEnd;
    }

    private String getTabs() {
        return G.rep(' ', m_tabCount * 2);
    }

    private String removeLineNumbers(String strLine) {
        boolean isNumber = true;
        strLine = G.ltrimTab(strLine);
        String[] words = G.splitSpace(strLine);//strLine.split("\\s+");

        if (words.length > 0) {
            for (int i = 0; i < words[0].length(); i++) {
                if(!C_NUMBERS.contains(String.valueOf(words[0].charAt(i)))) {
                    isNumber = false;
                    break;
                }
            }
            if (isNumber) {
                return strLine.replaceFirst(words[0], "");
            }
            else {
                return strLine;
            }
        }
        else {
            return strLine;
        }
    }

    private boolean isStringIdentifier(String identifier) {
        return isXTypeIdentifier(identifier, "String");
    }
    private boolean isNumericIdentifier(String identifier) {
        return isXTypeIdentifier(identifier, "@numeric");
    }
    private boolean isXTypeIdentifier(String identifier, String type) {
        // first we evaluate constants expressions
        //
        if (type.equals("String")) {
            if (identifier.startsWith("\"")) {
                identifier = removeLiterals(identifier);
                if (identifier.length() == 0)
                    return true;
            }
        }
        if (type.equals("@numeric")) {
            if ("-".equals(identifier.substring(0, 1))) {
                if (identifier.length() < 2) {
                    return false;
                }
                else if ("1234567890".contains(identifier.substring(2, 3))) {
                    return true;
                }
            }
            else {
                if ("1234567890".contains(identifier.substring(0, 1))) {
                    return true;
                }
            }
        }

        // if is not a constant we look for the type of the variable or
        // function
        //
        IdentifierInfo info = null;
        String varType = "";
        String parent = "";
        String[] words = G.split2(identifier, "\t/*-+ .()");
        identifier = "";
        String[] parents = new String[30]; // why 30? who nows :P, 30 should be enough :)
        int openParentheses = 0;

        for (int i = 0; i < words.length; i++) {
            if (!(",.()\"'".contains(words[i]))) {
                info = getIdentifierInfo(words[i], parent, false);
                if (info == null)
                    varType = "";
                else if (info.isFunction) {
                    varType = info.function.getReturnType().dataType;
                }
                else {
                    varType = info.variable.dataType;
                }
                parent = varType;
            }
            else if (words[i].equals("(")) {
                parents[openParentheses] = parent;
                parent = "";
                openParentheses++;
            }
            else if (words[i].equals(")")) {
                openParentheses--;
                parent = parents[openParentheses];
            }
            else if (words[i].equals(" ")) {
                parent = "";
            }
            
        }
        if (type.equals("@numeric")) {
            return C_NUMERIC_DATA_TYPES.contains(varType.toLowerCase());
        }
        else
            return varType.toLowerCase().equals(varType.toLowerCase());
    }

    private void showError(String msg) {
        msg = "module: " + m_vbClassName + newline + msg;
        msg = "function: " + m_vbFunctionName + newline + msg;
        //G.showInfo(msg);
    }

    // ADODB
    //
    private String replaceADODBSentence(String strLine) {
        Preference pref = PreferenceObject.getPreference(G.C_AUX_ADO_REPLACE_ID);
        if (pref != null) {
            if (!pref.getValue().equals("0")) {
                strLine = replaceADODBConnection(strLine);
                strLine = replaceADODBRecordSet(strLine);
                strLine = replaceADODBFields(strLine);
                strLine = replaceADODBField(strLine);
                //strLine = translateADODBBofAndEof(strLine);
            }
        }
        return strLine;
    }

    private String replaceADODBConnection(String strLine) {
        return strLine;
    }
    private String replaceADODBRecordSet(String strLine) {
        return strLine;
    }
    private String replaceADODBFields(String strLine) {
        return strLine;
    }
    private String replaceADODBField(String strLine) {
        return strLine;
    }
    private boolean isADODBType(String dataType) {
        if (dataType.equalsIgnoreCase("ADODB.Connection")) {
            return true;
        }
        else if (dataType.equalsIgnoreCase("Connection")) {
            return true;
        }
        else if (dataType.equalsIgnoreCase("ADODB.RecordSet")) {
            return true;
        }
        else if (dataType.equalsIgnoreCase("RecordSet")) {
            return true;
        }
        else if (dataType.equalsIgnoreCase("ADODB.Fields")) {
            return true;
        }
        else if (dataType.equalsIgnoreCase("Fields")) {
            return true;
        }
        else if (dataType.equalsIgnoreCase("ADODB.Field")) {
            return true;
        }
        else if (dataType.equalsIgnoreCase("Field")) {
            return true;
        }
        else {
            return false;
        }
    }
    private String translateADODBType(String dataType) {
        if (dataType.equalsIgnoreCase("ADODB.Connection")) {
            addToImportList("import java.sql.Connection;");
            return "Connection";
        }
        else if (dataType.equalsIgnoreCase("Connection")) {
            addToImportList("import java.sql.Connection;");
            return "Connection";
        }
        else if (dataType.equalsIgnoreCase("ADODB.RecordSet")) {
            return "DBRecordSet";
        }
        else if (dataType.equalsIgnoreCase("RecordSet")) {
            return "DBRecordSet";
        }
        else if (dataType.equalsIgnoreCase("ADODB.Fields")) {
            addToImportList("import org.apache.commons.beanutils.DynaBean;");
            return "DBFields";
        }
        else if (dataType.equalsIgnoreCase("Fields")) {
            addToImportList("import org.apache.commons.beanutils.DynaBean;");
            return "DBFields";
        }
        else if (dataType.equalsIgnoreCase("ADODB.Field")) {
            return "DBField";
        }
        else if (dataType.equalsIgnoreCase("Field")) {
            return "DBField";
        }
        else {
            return dataType;
        }
    }
    private void createADODBClasses() {
        // Connection
        m_classObject.setPackageName("ADODB");
        m_classObject.setVbName("Connection");
        m_classObject.setJavaName("DBConnection");
        m_classObject.getClassIdFromClassName();
        m_classObject.saveClass();
        
        // RecordSet
        m_classObject.setPackageName("ADODB");
        m_classObject.setVbName("RecordSet");
        m_classObject.setJavaName("DBRecordSet");
        m_classObject.getClassIdFromClassName();
        m_classObject.saveClass();

        saveFunction("BOF", "isBOF", "boolean");
        saveFunction("EOF", "isEOF", "boolean");

        // Fields
        m_classObject.setPackageName("ADODB");
        m_classObject.setVbName("Fields");
        m_classObject.setJavaName("DBFields");
        m_classObject.getClassIdFromClassName();
        m_classObject.saveClass();

        // Field
        m_classObject.setPackageName("ADODB");
        m_classObject.setVbName("Field");
        m_classObject.setJavaName("DBField");
        m_classObject.getClassIdFromClassName();
        m_classObject.saveClass();
        
        m_classObject.setId(0);
    }
    
    // Visual Basic Standar Objects
    
    private void createVBClasses() {
        // Collection
        m_classObject.setPackageName("VBA");
        m_classObject.setVbName("Collection");
        //m_classObject.setJavaName("ArrayList");
        m_classObject.setJavaName("LinkedMap");
        m_classObject.getClassIdFromClassName();
        m_classObject.saveClass();

        saveFunction("count", "size", "int");
        saveFunction("item", "get", getObjectTypeName());
        saveFunction("remove", "remove", "void");

        m_classObject.setPackageName("VBA");
        m_classObject.setVbName("VBA");
        m_classObject.setJavaName("VBA");
        m_classObject.getClassIdFromClassName();
        m_classObject.saveClass();

        m_functionObject.setId(0);
        saveVariable("Err", "ex", getObjectTypeName(), false, true);
        
        m_classObject.setId(0);
    }
    private boolean isVBStandarObject(String dataType) {
        if (dataType.equalsIgnoreCase("Collection")) {
            return true;
        }
        else {
            return false;
        }
    }
    private String translateVBStandarObject(String dataType) {
        if (dataType.equalsIgnoreCase("Collection")) {
            //addToImportList("import java.util.ArrayList;");
            addToImportList("import org.apache.commons.collections.map.LinkedMap;");
            return "LinkedMap";
        }
        else {
            return dataType;
        }
    }
    private String getObjectTypeName() {
        if (m_translateToJava)
            return "Object";
        else
            return "object";
    }

    private void initInCairoFlags() {
        m_inCairoValidate = false;
        m_inCairoValidateItems = false;
        m_inCairoIsEmptyRow = false;
        m_inCairoSave = false;
        m_inCairoSaveItems = false;
        m_inCairoShowDoc = false;
        m_inCairoTerminate = false;
        m_inCairoDestroy = false;
        m_inCairoMessageEx = false;
        m_inCairoLoad = false;
        m_inCairoPLoad = false;
        m_inCairoLoadCollection = false;
        m_refreshCollection = "";
        m_inCairoDelete = false;
        m_inCairoEdit = false;
        m_inCairoEditNew = false;
        m_inCairoDiscardChanges = false;
        m_inCairoCopy = false;
        m_inPropertyChange = false;
        m_propertyChangeIsNotEmpty = false;
        m_isComplexSave = false;
        m_complexSaveCall = "";
    }
    
    private void updateInCairoFlags(String name) {
        if (name.equals("cIABMClient_Validate")) {
            m_inCairoValidate = true;
        }
        else if (name.equals("cIABMClient_Save")) {
            m_inCairoSave = true;
        }
        else if (name.equals("cIABMClient_ShowDocDigital")) {
            m_inCairoShowDoc = true;
        }
        else if (name.equals("class_Terminate")) {
            m_inCairoDestroy = true;
        }
        else if (name.equals("cIABMClient_Terminate")) {
            m_inCairoTerminate = true;
        }
        else if (name.equals("cIABMClient_MessageEx")) {
            m_inCairoMessageEx = true;
        }
        else if (name.equals("load")) {
            m_inCairoLoad = true;
        }
        else if (name.equals("loadCollection")) {
            m_inCairoLoadCollection = true;
        }
        else if (name.equals("cIEditGeneric_Delete")) {
            m_inCairoDelete = true;
        }
        else if (name.equals("cIEditGeneric_Edit")) {
            m_inCairoEdit = true;
        }
        else if (name.equals("cIABMClient_EditNew")) {
            m_inCairoEditNew = true;
        }
        else if (name.equals("cIABMClient_DiscardChanges")) {
            m_inCairoDiscardChanges = true;
        }
        else if (name.equals("cIABMClient_PropertyChange")) {
            m_inPropertyChange = true;
        }
        else if (name.equals("cIABMClient_Copy")) {
            m_inCairoCopy = true;
        }
        else if (name.contains("pSaveItems")) {
            m_inCairoSaveItems = true;
        }
        else if (name.contains("pValidateRow")) {
            m_inCairoValidateItems = true;
        }        
        else if (name.contains("pIsEmptyRow")) {
            m_inCairoIsEmptyRow = true;
        }        
        else if (name.contains("pLoad")) {
            m_inCairoPLoad = true;
        }        
    }
    
    private String translateLineInCairoFunction(String strLine, String originalLine) {
        if (m_inCairoValidate) {
            return translateLineInCairoValidate(strLine);
        }
        if (m_inCairoValidateItems) {
            return translateLineInCairoValidateItems(strLine);
        }
        if (m_inCairoIsEmptyRow) {
            return translateLineInCairoIsEmptyRow(strLine);
        }
        else if (m_inCairoShowDoc) {
            return translateLineInCairoShowDoc(strLine);
        }
        else if (m_inCairoDestroy) {
            return translateLineInCairoDestroy(strLine);
        }
        else if (m_inCairoTerminate) {
            return translateLineInCairoTerminate(strLine, originalLine);
        }
        else if (m_inCairoMessageEx) {
            return translateLineInCairoMessageEx(strLine);
        }
        else if (m_inCairoLoad) {
            return translateLineInCairoLoad(strLine);
        }
        else if (m_inCairoPLoad) {
            return translateLineInCairoPLoad(strLine);
        }
        else if (m_inCairoLoadCollection) {
            writeControllerClassData(strLine);
            writeControllerFormData(strLine);
            writeControllerWriteData(strLine);
            writeCreateUpdateParamList(strLine);
            writeModelCaseClass(strLine);
            return translateLineInCairoLoadCollection(strLine, originalLine);
        }
        else if (m_inCairoDelete) {
            return translateLineInCairoDelete(strLine);
        }
        else if (m_inCairoEdit) {
            return translateLineInCairoEdit(strLine);
        }
        else if (m_inCairoEditNew) {
            return translateLineInCairoEditNew(strLine);
        }
        else if (m_inCairoSave) {
            return translateLineInCairoSave(strLine);
        }
        else if (m_inCairoSaveItems) {
            return translateLineInCairoSaveItems(strLine);
        }
        else if (m_inCairoDiscardChanges) {
            return translateLineInCairoDiscarChanges(strLine);
        }
        else if (m_inPropertyChange) {
            return translateLineInCairoPropertyChange(strLine, originalLine);
        }
        else if (m_inCairoCopy) {
            return translateLineInCairoCopy(strLine);
        }
        else {
            return strLine;
        }
    }
    
    private String getCairoVariableName(String name) {
        if (m_translateToCairo || m_parseToCairo) {
            if (name.trim().equals("K_NOMBRE"))
                return "K_NAME";
            if (name.trim().equals("K_CODIGO"))
                return "K_CODE";
            if (name.trim().equals("K_ACTIVO"))
                return "K_ACTIVE";
            if (name.trim().equals("m_nombre"))
                return "m_name";
            if (name.trim().equals("m_codigo"))
                return "m_code";
            if (name.trim().equals("m_activo"))
                return "m_active";
            if (name.trim().equals("m_objTree"))
                return "m_listController";
            if (name.trim().toLowerCase().startsWith("csc")) {
                name = replaceIdentifierCamel(name);
                if (G.endLike(name.toUpperCase(), "NOMBRE"))
                    name = name.toUpperCase().replace("NOMBRE", "NAME");
                else if (G.endLike(name.toUpperCase(), "CODIGO"))
                    name = name.toUpperCase().replace("CODIGO", "CODE");
                return name;
            }
            return name;
        }
        else {
            return name;
        }
    }
    
    String deleteReturnLine = "{\n          return Cairo.Promises.resolvedPromise(false);\n        }";
    
    private String translateLineInCairoDelete(String strLine) {
        return "";
    }
    
    private String translateLineInCairoEdit(String strLine) {
        String trimmedLine = strLine.trim();
        if (G.beginLike(trimmedLine, "if (!load(id)) { return _rtn; }")) {
            trimmedLine = getTabs() + "p = load(id).then(\n" + getTabs() + " function(success) {\n" + getTabs() + "    if(success) {\n";
            m_tabCount += 3;
            return trimmedLine;
        }
        else if (G.beginLike(strLine.trim(), "return _rtn;")) {
            m_tabCount -= 1;
            trimmedLine = getTabs() + "}\n" 
                        + getTabs() + "return success;\n";
            m_tabCount -= 2;
            trimmedLine += getTabs() + "});\n";
            return trimmedLine;
        }
        else if (G.beginLike(trimmedLine, "return _rtn;")) {
            return "";
        }        
        else {
            return strLine
                    .replace("var _rtn = null;", "var p = Cairo.Promises.resolvedPromise(false);")
                    .replace("if (!loadCollection()) { return _rtn; }", "if(!loadCollection()) { return false; }")
                    .replace("_rtn = m_id != Cairo.Constants.NO_ID;", "success = m_id != Cairo.Constants.NO_ID;")
                    .replace("_rtn = true;", "success = true;")
                    .replaceAll("_rtn", "p");
        }
    }

    private String translateLineInCairoEditNew(String strLine) {
        return strLine
                .replaceAll("self.edit\\(Cairo.Constants.NO_ID\\);", "return self.edit(Cairo.Constants.NO_ID);")
                .replace("self.terminate();", "updateList();\n")
                .replace("return self.edit(Cairo.Constants.NO_ID);", "m_listController.updateEditorKey(self, Cairo.Constants.NO_ID);\n\n        return load(Cairo.Constants.NO_ID).then(\n          function(ignored) {\n            return refreshCollection();\n          }\n        );");
    }
    
    private String translateLineInCairoDiscarChanges(String strLine) {
        return strLine.replace("loadCollection();", "return Cairo.Promises.resolvedPromise(refreshCollection());");
    }
    
    private String translateLineInCairoPropertyChange(String strLine, String originalLine) {
        if (originalLine.equals("End Function")) {
            if (m_propertyChangeIsNotEmpty == false) {
                return "        return Cairo.Promises.resolvedPromise(false);\n" + strLine;
            }
        }
        else if (!(strLine.equals("      self.propertyChange = function(key) {\n") 
                || strLine.equals("\n"))) {
            m_propertyChangeIsNotEmpty = true;
        }
        return strLine;
    }
    
    private String translateLineInCairoCopy(String strLine) {
        return strLine
                .replace("self.terminate();", "updateList();\n")
                .replace("m_isNew = true;", "m_isNew = true;\n\n        m_listController.updateEditorKey(self, Cairo.Constants.NO_ID);");
    }
    
    private boolean m_isComplexSave = false;
    private String m_complexSaveCall = "";
    
    private String translateLineInCairoSave(String strLine) {
        
        if (strLine.contains("commitTrans")) {
            int debug = 0;
        }        
        
        String trimmedLine = strLine.trim();
        if (G.beginLike(trimmedLine, "var register = null;") ||
                G.beginLike(trimmedLine, "var fields = null;") ||
                G.beginLike(trimmedLine, "var property = null;") ||
                G.beginLike(trimmedLine, "//Error al grabar ")) {
            return "";
        }
        else if (G.beginLike(trimmedLine, "if (!Cairo.Database.saveEx(register, , Cairo.General.Constants.")) {
            if (m_isComplexSave) {
                trimmedLine = trimmedLine.substring(62).replace(") { return false; }", "");
                trimmedLine = trimmedLine.replace(") { return _rtn; }", "");
                trimmedLine = trimmedLine.replace("C_ABMClientSave", "\n            Cairo.Constants.CLIENT_SAVE_FUNCTION,\n            ");
                trimmedLine = trimmedLine.replace(", C_MODULE, ", "C_MODULE,\n            ");
                m_complexSaveCall = getTabs() + "return Cairo.Database.saveTransaction(\n            register,\n            false,\n            Cairo.General.Constants" + trimmedLine + ".then(\n\n"
                        + getTabs() + "  function(result) {\n"
                        + getTabs() + "    if(result.success) {";
                return getTabs() + "// save items";                
            }
            else {
                trimmedLine = trimmedLine.substring(62).replace(") { return false; }", "");
                trimmedLine = trimmedLine.replace(") { return _rtn; }", "");
                trimmedLine = trimmedLine.replace("C_ABMClientSave", "\n            Cairo.Constants.CLIENT_SAVE_FUNCTION,\n            ");
                trimmedLine = trimmedLine.replace(", C_MODULE, ", "C_MODULE,\n            ");
                trimmedLine = getTabs() + "return Cairo.Database.saveEx(\n            register,\n            false,\n            Cairo.General.Constants" + trimmedLine + ".then(\n\n"
                        + getTabs() + "  function(result) {\n"
                        + getTabs() + "    if(result.success) {";
                m_tabCount += 4;
                return trimmedLine;
            }
        }
        else if (G.beginLike(trimmedLine, "return load(register.getID());") 
                || G.beginLike(trimmedLine, "_rtn = load(register.getID());")) {

            m_tabCount -= 2;
            trimmedLine = getTabs() + "}\n" 
                        + getTabs() + "else {\n" 
                        + getTabs() + "  return false;\n" 
                        + getTabs() + "}\n";
            trimmedLine = "              return load(result.data.getId()).then(\n" 
                    + "                function (success) {\n"
                    + "                  if(success) {\n"
                    + "                    updateList();\n"
                    + "                    m_listController.updateEditorKey(self, m_id);\n"
                    + "                  };\n"
                    + "                  m_isNew = false;\n"
                    + "                  return success;\n"
                    + "                }\n"
                    + "              );\n"                    
                    + trimmedLine;
            m_tabCount -= 2;
            trimmedLine += getTabs() + "});\n";
            return trimmedLine;
        }
        else if (G.beginLike(trimmedLine, "if (!register.beginTrans(Cairo.Database)) { return _rtn; }")) {
            m_isComplexSave = true;
            return getTabs() + "register.prepareTransaction();";
        }
        else if (G.beginLike(trimmedLine, "if (!register.commitTrans()) {")) {
            m_tabCount += 4;
            return m_complexSaveCall;
        }
        else if (trimmedLine.contains("pSaveItems")) {
            return strLine.replace("()", "(register)").replace("// **TODO:** goto found: GoTo SaveError; }", " return false; }");
        }
        else {
            return strLine
                    .replaceAll("register = new cRegister\\(\\);", "var register = new Cairo.Database.Register();")
                    .replaceAll("fields = register.getFields\\(\\);", "var fields = register.getFields();")
                    .replaceAll("property = m_dialog.getProperties\\(\\).item\\(_i\\);", "var property = m_dialog.getProperties().item(_i);")
                    .replaceAll("fields.add2\\(", "fields.add(")
                    .replaceAll("//Error al grabar ", "\n" + getTabs() + "// Error saving ")
                    .replace("if (m_copy) {", "var apiPath = Cairo.Database.getAPIVersion();\n        register.setPath(apiPath + \"general/" 
                                + m_javaClassName.substring(1).toLowerCase() 
                                + "\");\n\n        if(m_copy) {")
                    .replace("if(!m_genericEdit.Save(m_dialog, register)) { return _rtn; }", "if(!m_genericEdit.save(m_dialog, register)) { return false; }")
                    .replace("// **TODO:** goto found: GoTo SaveError; }", " return false; }");
        }
    }
    
    private String m_itemsDeletedList = "";
    
    private String translateLineInCairoSaveItems(String strLine) {
        
        if (strLine.contains("commitTrans")) {
            int debug = 0;
        }        
        
        String trimmedLine = strLine.trim();
        if (G.beginLike(trimmedLine, "var fields = null;") ||
                G.beginLike(trimmedLine, "var property = null;") ||
                G.beginLike(trimmedLine, "sqlstmt = \"delete ") ||
                G.beginLike(trimmedLine, "var sqlstmt = null;") ||
                G.beginLike(trimmedLine, "//Error al grabar ")) {
            return "";
        }
        else if (G.beginLike(trimmedLine, "var pSaveItems")) {
            return strLine.replace("()", "(mainTransaction)");
        }
        else if (G.beginLike(trimmedLine, "if (!Cairo.Database.save(register, ,")) {
            return getTabs() + "transaction.addRegister(register);\n";
        }
        else if (G.beginLike(trimmedLine, "var register = null;")) {
            return getTabs() + "var transaction = new Cairo.Database.Transaction();\n";
        }
        else if (G.beginLike(trimmedLine, "return true;")) {            
            return getTabs() + "mainTransaction.addTransaction(transaction);\n\n" + getTabs() + "return true;\n";
        }
        else if (trimmedLine.contains("cUtil.removeLastColon(m_itemsDeleted")) {
            m_itemsDeletedList = trimmedLine.substring(0, trimmedLine.indexOf("="));
            return "";
        }
        else if (trimmedLine.contains("if (!Cairo.Database.execute(sqlstmt, ") && !m_itemsDeletedList.isEmpty()) {
            trimmedLine = getTabs() + "transaction.setDeletedList(" + m_itemsDeletedList + ")\n";
            m_itemsDeletedList = "";
            return trimmedLine;
        }
        else {
            return strLine
                    .replaceAll("register = new cRegister\\(\\);", "var register = new Cairo.Database.Register();") 
                    .replaceAll("fields = register.getFields\\(\\);", "var fields = register.getFields();")
                    .replaceAll("property = m_dialog.getProperties\\(\\).item\\(_i\\);", "var property = m_dialog.getProperties().item(_i);")
                    .replaceAll("fields.add2\\(", "fields.add(")
                    .replaceAll("//Error al grabar ", "\n" + getTabs() + "// Error saving ")
                    .replace("if (m_copy) {", "var apiPath = Cairo.Database.getAPIVersion();\n        register.setPath(apiPath + \"general/" 
                                + m_javaClassName.substring(1).toLowerCase() 
                                + "\");\n\n        if(m_copy) {")
                    .replace("if(!m_genericEdit.Save(m_dialog, register)) { return _rtn; }", "if(!m_genericEdit.save(m_dialog, register)) { return false; }")
                    .replace("// **TODO:** goto found: GoTo SaveError; }", " return false; }");
        }
    }
    
    private String translateLineInCairoLoadCollection(String strLine, String originalLine) {
        if (originalLine.equals("End Function")) {
            
            m_refreshCollection = "\n" 
                    + "      var refreshCollection = function() {\n\n"
                    + "        m_dialog.setTitle(m_name);\n\n"
                    + "        var properties = m_dialog.getProperties();\n"
                    + m_refreshCollection
                    + "\n        return m_dialog.showValues(properties);\n"
                    + "      };\n";
            
            return strLine + m_refreshCollection.replaceAll("Integer.parseInt\\(", "Cairo.Util.boolToInt(");
        }
        else {
            if (G.beginLike(strLine.trim(), "var elem = properties.add(null")) {
                m_refreshCollection += "\n" + strLine.replace(".add(null, ", ".item(");
            } else if (G.beginLike(strLine.trim(), "elem.setValue(")) {
                m_refreshCollection += strLine;
            } else if (G.beginLike(strLine.trim(), "elem.setSelectId(")) {
                m_refreshCollection += strLine;
            } 
            if (G.beginLike(strLine.trim(), "if (!pLoad")) {
                return getTabs() + "setGrid" + getPLoadName(strLine, "(") + "(c);\n" + strLine;
            }
            else if (G.beginLike(strLine.trim(), "Const(")) {
                return strLine
                        .replace("Const(", "var ")
                        .replace("==", "=")
                        .replace(")", "")                        
                        ;
            }
            else
                return strLine.replace("Integer.parseInt(", "Cairo.Util.boolToInt(");
        }
    }
    
    private String getPLoadName(String strLine, String sep) {
        int i = strLine.indexOf("pLoad") + 5;
        int j = strLine.indexOf(sep, i);
        return strLine.substring(i, j).trim();
    }
    
    private String translateLineInCairoLoad(String strLine) {
        String trimmedLine = strLine.trim();
        if (G.beginLike(trimmedLine, "sqlstmt") ||
                G.beginLike(trimmedLine, "var sqlstmt = null;") ||
                G.beginLike(trimmedLine, "var rs = null;")) {
            return "";
        }
        else if (G.beginLike(trimmedLine, "if (!Cairo.Database.openRs(sqlstmt, rs,")) {
            String rtn = getTabs()
                    + "var apiPath = Cairo.Database.getAPIVersion();\n"
                    + getTabs()
                    + "return Cairo.Database.getData(\"load[\" + apiPath + \"general/" + m_javaClassName.substring(1).toLowerCase() + "]\", id).then(\n"
                    + getTabs() + C_TAB + "function(response) {\n";
            m_tabCount += 2;
            return rtn;
        }
        else if (G.beginLike(trimmedLine, "return true;")) {
            m_tabCount -= 2;
            return getTabs() + "  return true;\n" + getTabs() + "});\n";
        }
        else if (G.beginLike(trimmedLine, "if (rs.isEOF()) {")) {
            m_tabCount--;
            String rtn = getTabs() + "if(response.success !== true) { return false; }\n\n" + getTabs() + "if(response.data.id === Cairo.Constants.NO_ID) {\n";
            m_tabCount++;
            return rtn;
        }
        else if (G.beginLike(trimmedLine, "if (!rs.isEOF()) {")) {
            m_tabCount--;
            String rtn = getTabs() + "if(response.success !== true) { return false; }\n\n" + getTabs() + "if(response.data.id !== Cairo.Constants.NO_ID) {\n";
            m_tabCount++;
            return rtn;
        }
        else {
            return strLine.replaceAll("rs.getFields\\(\\)", "response.data");
        }
    }
    
    private String m_pLoadName = "";
    
    private String translateLineInCairoPLoad(String strLine) {
        String trimmedLine = strLine.trim();
        if (G.beginLike(trimmedLine, "sqlstmt") ||
                G.beginLike(trimmedLine, "var sqlstmt = null;") ||
                G.beginLike(trimmedLine, "rs.MoveNext;") ||
                G.beginLike(trimmedLine, "var rs = null;")) {
            return "";
        }
        else if (G.beginLike(trimmedLine, "var pLoad")) {
            m_pLoadName = getPLoadName(trimmedLine, "=");
            m_pLoadName = unCapitalize(m_pLoadName);
            return "      var setGrid" + capitalize(m_pLoadName) + " = function(property) {\n";
        }
        else if (G.beginLike(trimmedLine, "if (!Cairo.Database.openRs(sqlstmt, rs,")) {
            return "";
        }        
        else if (G.beginLike(trimmedLine, "if (rs.isEOF()) {")) {
            m_tabCount--;
            String rtn = getTabs() + "if(response.success !== true) { return false; }\n\n" + getTabs() + "if(response.data.id === Cairo.Constants.NO_ID) {\n";
            m_tabCount++;
            return rtn;
        }
        else if (G.beginLike(trimmedLine, "while (!rs.isEOF()) {")) {
            return getTabs() + "for(var _i = 0; _i < m_data." + m_pLoadName + ".length; _i += 1) {\n";
        }
        else if (G.beginLike(trimmedLine, "w_rows.clear();")) {
            
            return strLine + getTabs() + "return true;\n" + "      };\n\n"
                    + "      var pLoad" + capitalize(m_pLoadName) + " = function() {\n\n"
                    ;
        }
        else {
            return strLine
                    .replaceAll("rs.getFields\\(\\)", "m_data." + m_pLoadName + "[_i]")
                    .replaceAll("propiedad", "property")
                    ;
        }
    }
    
    private String translateLineInCairoShowDoc(String strLine) {
        String[] lines = {
            "// **TODO:** goto found: GoTo ExitProc;",
            "// **TODO:** label found: ExitProc:;",
            "var doc = null;"
        };
        String trimmedLine = strLine.trim();
        for (int i = 0; i < lines.length; i++) {
            if (trimmedLine.equals(lines[i]) ) {
                return "";
            }        
        }
        return strLine
                .replaceAll("// \\*\\*TODO\\:\\*\\* on error resume next found !!!\n", "")
                .replace("doc = new cDocDigital();", "var doc = new Cairo.DocDigital();");
    }
    
    private String translateLineInCairoDestroy(String strLine) {
        String[] lines = {
            "// **TODO:** on error resume next found !!!"
        };
        String trimmedLine = strLine.trim();
        for (int i = 0; i < lines.length; i++) {
            if (trimmedLine.equals(lines[i]) ) {
                return "";
            }        
        }
        return strLine;
    }
    
    private String translateLineInCairoTerminate(String strLine, String originalLine) {
        
        if(originalLine.trim().equals("End Function")) {
            String updateList =
              "      var updateList = function() {\n"
            + "        if(m_id == Cairo.Constants.NO_ID) { return; }\n"
            + "        if(m_listController == null) { return; }\n\n"
            + "        if(m_isNew) {\n"
            + "          m_listController.addLeave(m_id, m_branchId);\n"
            + "        }\n"
            + "        else {\n"
            + "          m_listController.refreshBranch(m_id, m_branchId);\n"
            + "        }\n"
            + "      };\n\n"
            + "      self.terminate = function() {\n\n"
            + "        m_editing = false;\n\n"
            + "        try {\n"
            + "          if(m_listController != null) {\n"
            + "            updateList();\n"
            + "            m_listController.removeEditor(self);\n"
            + "          }\n"
            + "        }\n"
            + "        catch (ignored) {\n"
            + "          Cairo.logError('Error in terminate', ignored);\n"
            + "        }\n"
            + "      };\n\n"
            + "      self.getPath = function() {\n"
            + "        return \"#general/" + m_javaClassName.substring(1).toLowerCase() + "/\" + m_id.toString();\n"
            + "      };\n\n"
            + "      self.getEditorName = function() {\n"
            + "        var id = m_id ? m_id.toString() : \"N\" + (new Date).getTime().toString();\n"
            + "        return \"" + m_javaClassName.substring(1).toLowerCase() + "\" + id;\n"
            + "      };\n\n";
        
            
            return updateList;
        }
        else {
            return "";
        }
    }
    
    private String translateLineInCairoValidate(String strLine) {
        if (strLine.trim().equals("return true;"))
            return strLine.replaceAll("return true;", "return Cairo.Promises.resolvedPromise(true);");
        else if (strLine.trim().equals("return null;"))
            return "";
        else if (G.beginLike(strLine.trim(), "cWindow.msgInfo(")) {
            strLine = strLine.replaceAll("cWindow.msgInfo\\(","return Cairo.Modal.showInfo(");
            strLine = strLine.replaceAll("\\);", ").then(function() {return false;});");
            return strLine;
        }
        else
            return strLine.replace("C_ValidateRow", "Cairo.Constants.VALIDATE_ROW_FUNCTION");
    }
    
    private String translateLineInCairoValidateItems(String strLine) {
        if (strLine.trim().equals("return true;"))
            return strLine.replaceAll("return true;", "return Cairo.Promises.resolvedPromise(true);");
        else if (strLine.trim().equals("return null;"))
            return "";
        else if (strLine.trim().equals("var strRow = null;"))
            return "";
        else if (strLine.trim().equals("strRow = \" (Fila \"+ rowIndex.toString()+ \")\";"))
            return getTabs() + "var strRow = \" (Row: \" + rowIndex.toString() + \")\";\n";
        else if (G.beginLike(strLine.trim(), "cWindow.msgInfo(")) {
            strLine = strLine.replaceAll("cWindow.msgInfo\\(","return Cairo.Modal.showInfo(");
            strLine = strLine.replaceAll("\\);", ").then(function() {return false;});");
            return strLine;
        }
        else
            return strLine.replace("C_ValidateRow", "Cairo.Constants.VALIDATE_ROW_FUNCTION");
    }
    
    private String translateLineInCairoIsEmptyRow(String strLine) {
        if (strLine.trim().equals("var bRowIsEmpty = null;"))
            return "";
        else if (strLine.trim().equals("bRowIsEmpty = true;"))
            return getTabs() + "var bRowIsEmpty = true;\n";
        else
            return strLine;
    }    

    String[] lines = {
        "var abmGen = null;",
        "abmGen = m_dialog;"
    };    
    private String translateLineInCairoMessageEx(String strLine) {
        String trimmedLine = strLine.trim();
        for (int i = 0; i < lines.length; i++) {
            if (trimmedLine.equals(lines[i]) ) {
                return "";
            }        
        }
        
        if (G.beginLike(trimmedLine, "return _rtn;"))
            return strLine.replaceAll("return _rtn;", "return Cairo.Promises.resolvedPromise(_rtn);");        
        else
            return strLine.replaceAll("abmGen", "m_dialog");
    }
    
    private String translateFunctionNameToCairo(String name) {
        for (int i=0; i < m_cairoNames.length -1; i += 2) {
            if(name.equals(m_cairoNames[i])) {
                name = m_cairoNames[i+1];
                break;
            }
        }
        
        return name;
    }
    
    private String translateVarNameToCairo(String name) {
        for (int i=0; i < m_cairoVarNames.length -1; i += 2) {
            if(name.equals(m_cairoVarNames[i])) {
                name = m_cairoVarNames[i+1];
                break;
            }
        }
        
        return name;
    }    
    
    private Boolean functionIsPublicInterface(String name) {
        for (int i=0; i < m_cairoNames.length -1; i += 2) {
            if(name.equals(m_cairoNames[i])) {
                return true;
            }
        }
        
        return false;
    }
    
    private String replaceCairoNames(String strLine) {
        strLine = strLine.replaceAll("mPublic.gDB", "Cairo.Database");
        strLine = strLine.replaceAll("Constantes.cSC", "Constantes.");
        strLine = strLine.replaceAll("Constantes.cST", "Constantes.");
        strLine = strLine.replaceAll("mConstantes", "Cairo.Constants");
        strLine = strLine.replaceAll("mGeneralConstantes", "Cairo.General.Constants");
        strLine = strLine.replaceAll("csConstIds.cSNO_ID", "Cairo.Constants.NO_ID");
        strLine = strLine.replaceAll("csETablasGeneral.cS", "Cairo.Tables.");
        strLine = strLine.replaceAll("getProperties\\(\\).item\\(\\).item\\(", "getProperties().item(");        
        strLine = strLine.replaceAll("self.getNombre", "self.getName");
        strLine = strLine.replaceAll("self.getCodigo", "self.getCode");
        strLine = strLine.replaceAll("cError.mngError\\(VBA.ex,", "Cairo.manageErrorEx(ex.message,");
        strLine = strLine.replaceAll("cSecurity.", "Cairo.Security.");
        strLine = strLine.replaceAll("mPublic.gAppName", "Cairo.appName");
        strLine = strLine.replaceAll("Cairo.Constants.c_strCodigo", "Cairo.Constants.CODE_LABEL");
        strLine = strLine.replaceAll("Cairo.Constants.c_strActivo", "Cairo.Constants.ACTIVE_LABEL");
        strLine = strLine.replaceAll("Cairo.Constants.ACTIVO", "Cairo.Constants.ACTIVE");
        strLine = strLine.replaceAll("Cairo.Constants.c_strDescrip", "Cairo.Constants.DESCRIPTION_LABEL");
        strLine = strLine.replaceAll("Cairo.Constants.c_strNombre", "Cairo.Constants.NAME_LABEL");
        strLine = strLine.replaceAll("\\(k_", "(K_");
        strLine = strLine.replaceAll("ABM_MSG.m", "Dialogs.Message.M");
        strLine = strLine.replaceAll(" case  ", " case ");
        strLine = strLine.replaceAll("Cairo.Constants.self.val\\(", "Cairo.Util.val(");
        strLine = strLine.replaceAll("cUtil.valEmpty\\(", "Cairo.Util.valEmpty(");
        
        strLine = replaceIdentifierToLowerCase(strLine, "csTypes.cS", "Cairo.Constants.Types.");
        
        strLine = strLine.replaceAll("Cairo.Constants.c_DebeIndicarNombre", "Cairo.Constants.MUST_SET_A_NAME");
        strLine = strLine.replaceAll("Cairo.Constants.c_DebeIndicarCodigo", "Cairo.Constants.MUST_SET_A_CODE");
        strLine = strLine.replaceAll("c_get_codigo_from_id", "Cairo.Constants.GET_CODE_FROM_ID");
        strLine = strLine.replaceAll("\\(C_C\\+", "(Cairo.Constants.COPY_OF +");
        strLine = strLine.replaceAll("C_ShowDocDigital,", "Cairo.Constants.SHOW_DOCUMENTS_FUNCTION,");
        strLine = strLine.replaceAll("LNGGetText\\(", "Cairo.Language.getText(");
        strLine = strLine.replaceAll("CSKernelClient2.cUtil.showHelp\\(abmGen.getHWnd\\(\\), ", "Cairo.Documentation.show(");
        
        strLine = replaceIdentifier(strLine, "csPreGNew", "Cairo.Security.Actions.General.NEW_");
        strLine = replaceIdentifier(strLine, "csPreGEdit", "Cairo.Security.Actions.General.EDIT_");
        strLine = replaceIdentifier(strLine, "csPreGList", "Cairo.Security.Actions.General.LIST_");
        strLine = replaceIdentifier(strLine, "csPreGDelete", "Cairo.Security.Actions.General.DELETE_");
        
        strLine = strLine.replaceAll("C_EditGenericDelete,", "Cairo.Constants.DELETE_FUNCTION,");
        strLine = strLine.replaceAll("m_objAbm", "m_dialog");
        strLine = strLine.replaceAll("setHelpId", "setSelectId");
        strLine = strLine.replaceAll("\"\\+ \"", "");
        strLine = strLine.replaceAll("m_dialog.setTitle2\\(", "m_dialog.setTitle(");
        strLine = strLine.replaceAll("setPropertyType\\(", "setType(");
        strLine = strLine.replaceAll("setSubType\\(csp", "setSubType(Dialogs.PropertySubType.");
        strLine = strLine.replaceAll("setType\\(csp", "setType(Dialogs.PropertyType.");
        strLine = strLine.replaceAll("Dialogs.PropertyType.Help", "Dialogs.PropertyType.select");
        strLine = strLine.replaceAll("Dialogs.PropertyType.Text", "Dialogs.PropertyType.text");
        strLine = strLine.replaceAll("Dialogs.PropertyType.Numeric", "Dialogs.PropertyType.numeric");
        strLine = strLine.replaceAll("Dialogs.PropertyType.Option", "Dialogs.PropertyType.option");
        strLine = strLine.replaceAll("Dialogs.PropertyType.Check", "Dialogs.PropertyType.check");
        strLine = strLine.replaceAll("Dialogs.PropertyType.Password", "Dialogs.PropertyType.password");
        strLine = strLine.replaceAll("Dialogs.PropertyType.Grid", "Dialogs.PropertyType.grid");
        strLine = strLine.replaceAll("Dialogs.PropertyType.Date", "Dialogs.PropertyType.date");
        strLine = strLine.replaceAll("Dialogs.PropertyType.Button", "Dialogs.PropertyType.button");
        strLine = strLine.replaceAll("Dialogs.PropertyType.Toolbar", "Dialogs.PropertyType.toolbar");
        strLine = strLine.replaceAll("Dialogs.PropertyType.Image", "Dialogs.PropertyType.image");
        strLine = strLine.replaceAll("Dialogs.PropertyType.ProgressBar", "Dialogs.PropertyType.progressBar");
        strLine = strLine.replaceAll("Dialogs.PropertyType.Label", "Dialogs.PropertyType.label");
        strLine = strLine.replaceAll("Dialogs.PropertyType.Title", "Dialogs.PropertyType.title");
        strLine = strLine.replaceAll("Dialogs.PropertyType.Description", "Dialogs.PropertyType.description");
        strLine = strLine.replaceAll("Dialogs.PropertyType.File", "Dialogs.PropertyType.file");
        strLine = strLine.replaceAll("Dialogs.PropertyType.Folder", "Dialogs.PropertyType.folder");
        strLine = strLine.replaceAll("Dialogs.PropertyType.List", "Dialogs.PropertyType.list");
        strLine = strLine.replaceAll("Dialogs.PropertyType.Time", "Dialogs.PropertyType.time");
        strLine = strLine.replaceAll("Dialogs.PropertySubType.Memo", "Dialogs.PropertySubType.memo");
        strLine = strLine.replaceAll("Dialogs.PropertySubType.Money", "Dialogs.PropertySubType.money");
        strLine = strLine.replaceAll("Dialogs.PropertySubType.integer", "Dialogs.PropertySubType.integer");
        strLine = strLine.replaceAll("Dialogs.PropertySubType.Double", "Dialogs.PropertySubType.double");
        strLine = strLine.replaceAll("Dialogs.PropertySubType.Percent", "Dialogs.PropertySubType.percentage");
        strLine = strLine.replaceAll("Dialogs.PropertySubType.Mask", "Dialogs.PropertySubType.mask");
        strLine = strLine.replaceAll("Dialogs.PropertySubType.CUIT", "Dialogs.PropertySubType.taxId");
        strLine = strLine.replaceAll("Dialogs.PropertySubType.TextButton", "Dialogs.PropertySubType.textButton");
        strLine = strLine.replaceAll("Dialogs.PropertySubType.TextButtonEx", "Dialogs.PropertySubType.textButtonEx");
        strLine = strLine.replaceAll("setValue\\(Integer.parseInt\\(m_active\\)\\);", "setValue(m_active === true ? 1 : 0);");
        strLine = strLine.replaceAll("elem.setTable\\(Cairo.Tables.", "elem.setSelectTable(Cairo.Tables.");
        strLine = strLine.replaceAll(".securityCanAccess\\(", ".hasPermissionTo(");
        strLine = strLine.replaceAll(".getHelpId\\(\\)", ".getSelectId()");
        strLine = strLine.replaceAll("csConstIds.cSNEW", "Cairo.Constants.NEW_ID");
        strLine = strLine.replaceAll("register.setID", "register.setId");
        strLine = strLine.replaceAll("C_EditGenericEdit", "Cairo.Constants.EDIT_FUNCTION");
        strLine = strLine.replaceAll("cIABMClientGrid_ValidateRow", "validateRow");
        strLine = strLine.replaceAll("cIABMClientGrid_NewRow", "newRow");
        strLine = strLine.replaceAll("cIABMClientGrid_ListAdHock", "listAdHock");
        strLine = strLine.replaceAll("cIABMClientGrid_ColumnAfterUpdate", "columnAfterUpdate");
        strLine = strLine.replaceAll("cIABMClientGrid_ColumnClick", "columnClick");
        strLine = strLine.replaceAll("cIABMClientGrid_DblClick", "dblClick");
        strLine = strLine.replaceAll("cIABMClientGrid_IsEmptyRow", "isEmptyRow");
        
        strLine = strLine.replaceAll("cIABMClientGrid_ColumnAfterEdit", "columnAfterEdit");
        strLine = strLine.replaceAll("cIABMClientGrid_ColumnBeforeEdit", "columnBeforeEdit");
        strLine = strLine.replaceAll("cIABMClientGrid_ColumnButtonClick", "columnButtonClick");
        strLine = strLine.replaceAll("cIABMClientGrid_ColumnCancelEdit", "isEmptyRow");
        strLine = strLine.replaceAll("cIABMClientGrid_DeleteRow", "deleteRow");
        
        
        strLine = strLine.replaceAll("setHelpFilter", "setSelectFilter");
        strLine = strLine.replaceAll("mPublic.gFormatDecCantidad", "Cairo.Settings.getQuantityDecimalsFormat()");
        
        strLine = strLine.replaceAll("csE_CuentaGrupoTipo", "Cairo.General.Constants.AccountGroupType");
        strLine = strLine.replaceAll("cSECUECTIPOPRODUCTOVENTA", "productForSale");
        strLine = strLine.replaceAll("cSECUECTIPOPRODUCTOCOMPRA", "productForPurchase");
        strLine = strLine.replaceAll("cSECUECTIPOACREEDOR", "creditor");
        strLine = strLine.replaceAll("cSECUECTIPODEUDOR", "debtor");
        strLine = strLine.replaceAll("cSECUECTIPODEBITOAUTOMATICO", "directDebit");
        strLine = strLine.replaceAll("cSECUECTIPOFONDOFIJO", "pettyCashFund");
        strLine = strLine.replaceAll("c_TiFilterVenta", "Cairo.General.Constants.filterForSales");
        strLine = strLine.replaceAll("c_TiFilterCompra", "Cairo.General.Constants.filterForPurchase");
        strLine = strLine.replaceAll("setGridAdd", "setGridAddEnabled");
        strLine = strLine.replaceAll("setGridEdit", "setGridEditEnabled");
        strLine = strLine.replaceAll("setGridRemove", "setGridRemoveEnabled");
        
        
        strLine = strLine.replaceAll(".ToLower\\(\\)", ".toLowerCase()");
        strLine = strLine.replaceAll(".ToUpper\\(\\)", ".toUpperCase()");
        strLine = strLine.replaceAll(".ToString\\(\\)", ".toString()");
        strLine = strLine.replaceAll("RTrim\\$\\(", "Cairo.String.rtrim(");
        strLine = strLine.replaceAll("RTrim\\(", "Cairo.String.rtrim(");
        strLine = strLine.replaceAll("LTrim\\$\\(", "Cairo.String.ltrim(");
        strLine = strLine.replaceAll("LTrim\\(", "Cairo.String.ltrim(");
        strLine = strLine.replaceAll("Trim\\$\\(", "\\$.trim(");
        strLine = strLine.replaceAll("Trim\\(", "\\$.trim(");
        strLine = strLine.replaceAll("CInt\\(b", "Cairo.Util.boolToInt(b");
        strLine = strLine.replaceAll("cABMUtil.pCell\\(", "Dialogs.cell(");
        strLine = strLine.replaceAll("cell.getID\\(\\)", "cell.getId()");
        strLine = strLine.replaceAll("\\(csTalonario\\)", "\\(Cairo.Tables.TALONARIO\\)");
        strLine = strLine.replaceAll("getHelpValueProcess", "getSelectIntValue");
        strLine = strLine.replace("register.setId((Cairo.Util.val(cell.getValue()) > 0) ? Cairo.Util.val(cell.getValue()) : Cairo.Constants.NEW_ID));", "register.setId((Cairo.Util.val(cell.getValue()) > 0) ? Cairo.Util.val(cell.getValue()) : Cairo.Constants.NEW_ID);");
        
        return strLine;
    }
    
    private String replaceIdentifierCamel(String identifier) {
        String newIdentifier = "";
        boolean upperFound = false;
        boolean firstUpper = true;
        String x = "";
        for (int k = 0; k < identifier.length(); k++) {
            char z = identifier.charAt(k);                            
            if (Character.isUpperCase(z)) {
                upperFound = true;
                x += z;
            }
            else {
                if (upperFound) {
                    upperFound = false;
                    if (firstUpper) {
                        firstUpper = false;
                    }
                    else {
                        newIdentifier += "_";
                    }
                    newIdentifier += x;
                    x = "";
                }
                newIdentifier += z;
            }            
        }
        if (!x.isEmpty()) {
            newIdentifier += "_" + x;
        }
        return newIdentifier;
    }
    
    private String replaceIdentifier(String strLine, String toSearch, String replaceWith) {
        int i;
        do {
            i = strLine.toLowerCase().indexOf(toSearch.toLowerCase());
            if (i >= 0) {
                
                int t, r;
                t = r = i + toSearch.length();

                int s = strLine.length();
                while (t <= s) {                    
                    char c = strLine.charAt(t);
                    if (!(Character.isLetter(c) 
                            || Character.isDigit(c)
                            || c == '_')) {
                        strLine = strLine.substring(0, i) + replaceWith + strLine.substring(r, t).toUpperCase() + strLine.substring(t, s); 
                        break;
                    }                        
                    t++;
                }
            }
        } while (i >= 0);
        return strLine;
    }
    
    private String replaceIdentifierToLowerCase(String strLine, String toSearch, String replaceWith) {
        int i;
        do {
            i = strLine.toLowerCase().indexOf(toSearch.toLowerCase());
            if (i >= 0) {
                
                int t, r;
                t = r = i + toSearch.length();

                int s = strLine.length();
                while (t <= s) {                    
                    char c = strLine.charAt(t);
                    if (!(Character.isLetter(c) 
                            || Character.isDigit(c)
                            || c == '_')) {
                        strLine = strLine.substring(0, i) + replaceWith + strLine.substring(r, t).toLowerCase() + strLine.substring(t, s); 
                        break;
                    }                        
                    t++;
                }
            }
        } while (i >= 0);
        return strLine;
    }
    
    private String addJavaScriptHeader() {
        String header = "(function() {\n  \"use strict\";\n\n";
        header += "  Cairo.module(\"" + m_javaClassName.substring(1) + ".Edit\", function(Edit, Cairo, Backbone, Marionette, $, _) {\n\n";
        header += "    var createObject = function() {\n\n";
        header += "      var self = {};\n\n";
        header += "      var Dialogs = Cairo.Dialogs;\n";
        m_tabCount += 2;
        return header;
    };
    
    private String addJavaScriptFooter() {
        String footer = "\n      return self;\n";
        footer += "    };\n\n";
        footer += "    Edit.Controller = { getEditor: createObject };\n\n";
        footer += "  });\n\n";
        footer += getCairoTreeListController();
        footer += "\n\n}());";
        return footer;
    }

    String[] discardedLines = {
        "//--------------------------------------------------------------------------------\n",
        "// notas:\n",
        "// api win32\n",
        "// constantes\n",
        "// estructuras\n",
        "// funciones\n",
        "// estructuras\n",
        "// variables privadas\n",
        "// propiedades publicas\n",
        "// propiedades privadas\n",
        "// funciones publicas\n",
        "// Implementacion de cIABMClient\n",
        "// Implementacion de cIEditGeneric\n",
        "// construccion - destruccion\n",
        "//Option Explicit\n",
        "var m_host;\n"
    };
    String[] dicardBeginLikeLines = {
        "//  With m_ObjAbm.Properties(csc",
        "//    .Value = C_CopiaDe & .Value",
        "//  End With",
        "// Este objeto puede no cumplir con la interfaz esperada, asi que si hay un error no",
        "// le doy bola",
        "fields.setHaveLastUpdate(",
        "fields.setHaveWhoModify(",
        "// Error saving ",
        "abmObj.setBSendRefresh",
        "o.setDontResizeHeight(",
        "o.setDontResize("
    };
    private String removeCairoLines(String strLine) {
        String trimmedLine = G.ltrim(strLine);
        for (int i=0; i < discardedLines.length; i += 1) {
            if (trimmedLine.equals(discardedLines[i])) {
                strLine = "";
                break;
            }
        }
        
        if (G.beginLike(strLine.trim(), "*Implements ")) {
            strLine = "";
        }
        
        for (int i=0; i < dicardBeginLikeLines.length; i += 1) {
            if (G.beginLike(trimmedLine, dicardBeginLikeLines[i])) {
                strLine = "";
                break;
            }
        }
        
        return strLine;
    }

    String[] lastReplaceStrings = {
            "if \\(", "if("
    };        
    private String applyLastReplace(String strLine) {        
        for (int i=0; i < lastReplaceStrings.length -1; i += 2) {
            strLine = strLine.replaceAll(lastReplaceStrings[i], lastReplaceStrings[i+1]);
        }
        
        return strLine;
    }
    
    String[] discardBegindAndEndLikeLines = {
            "m_dialog.showValue(m_objAbm.getProperties().item(Cairo.General.Constants.", "NOMBRE));\n"
    };    
    private String removeCairoLinesAfterReplace(String strLine) {
        String trimmedLine = G.ltrim(strLine);        
        for (int i=0; i < discardBegindAndEndLikeLines.length -1; i += 2) {
            if (G.beginLike(trimmedLine, discardBegindAndEndLikeLines[i])) {
                if (G.endLike(trimmedLine, discardBegindAndEndLikeLines[i+1])) {
                    strLine = "";
                    break;
                }
            }
        }
        
        return strLine;        
    }
    
    private String cairoTreeListControllerGetPluralName(String name) {
        switch (name) {
            case "Proveedor":
                name = "Proveedores";
            default:
                name += "s";                
        }
        return name;
    }
    private String cairoTreeListControllerGetIdentifierName(String name) {
        switch (name) {
            default:
                name = name.toLowerCase();
        }
        return name;
    }
    private String cairoTreeListControllerGetlowerName(String name) {
        switch (name) {
            default:
                name = name.toLowerCase();
        }
        return name;
    }
    private String cairoTreeListControllerGetIdentifierPluralName(String name) {
        switch (name) {
            case "Proveedor":
                name = "proveedores";
            default:
                name = name.toLowerCase() + "s";                
        }
        return name;
    }
    private String cairoTreeListControllerGetTableName(String name) {
        switch (name) {
            case "Proveedor":
                name = "PROVEEDOR";
            default:
                name = name.toUpperCase();                
        }
        return name;
    }    
    
    private String getCairoTreeListController() {
        String moduleName = m_javaClassName.substring(1);
        String pluralName = cairoTreeListControllerGetPluralName(moduleName); //"Proveedores";
        String identifierName = cairoTreeListControllerGetIdentifierName(moduleName); //"proveedor";
        String upperModuleName = moduleName.toUpperCase();
        String lowerName = cairoTreeListControllerGetlowerName(moduleName); //"proveedor";
        String identifierPluralName = cairoTreeListControllerGetIdentifierPluralName(moduleName); //"proveedores";
        String tableName = cairoTreeListControllerGetTableName(moduleName); //"PROVEEDOR";
        
        String strLine = 
            "  Cairo.module(\"" + moduleName + ".List\", function(List, Cairo, Backbone, Marionette, $, _) {\n"
          + "    List.Controller = {\n"
          + "      list: function() {\n"
          + "\n"
          + "        var self = this;\n"
          + "\n"
          + "        /*\n"
          + "         this function will be called by the tab manager every time the\n"
          + "         view must be created. when the tab is not visible the tab manager\n"
          + "         will not call this function but only make the tab visible\n"
          + "         */\n"
          + "        var createTreeDialog = function(tabId) {\n"
          + "\n"
          + "          var editors = Cairo.Editors." + identifierName + "Editors || Cairo.Collections.createCollection(null);\n"
          + "          Cairo.Editors." + identifierName + "Editors = editors;\n"
          + "\n"
          + "          // ListController properties and methods\n"
          + "          //\n"
          + "          self.entityInfo = new Backbone.Model({\n"
          + "            entitiesTitle: \"" + pluralName + "\",\n"
          + "            entityName: \"" + identifierName + "\",\n"
          + "            entitiesName: \"" + identifierPluralName + "\"\n"
          + "          });\n"
          + "\n"
          + "          self.showBranch = function(branchId) {\n"
          + "            Cairo.log(\"Loading nodeId: \" + branchId);\n"
          + "            Cairo.Tree.List.Controller.listBranch(branchId, Cairo.Tree.List.Controller.showItems, self);\n"
          + "          };\n"
          + "\n"
          + "          self.addLeave = function(id, branchId) {\n"
          + "            try {\n"
          + "              Cairo.Tree.List.Controller.addLeave(branchId, id, self);\n"
          + "            }\n"
          + "            catch(ignore) {\n"
          + "              Cairo.log(\"Error when adding this item to the branch\\n\\n\" + ignore.message);\n"
          + "            }\n"
          + "          };\n"
          + "\n"
          + "          self.refreshBranch = function(id, branchId) {\n"
          + "            try {\n"
          + "              Cairo.Tree.List.Controller.refreshBranchIfActive(branchId, id, self);\n"
          + "            }\n"
          + "            catch(ignore) {\n"
          + "              Cairo.log(\"Error when refreshing a branch\\n\\n\" + ignore.message);\n"
          + "            }\n"
          + "          };\n"
          + "\n"
          + "          var getIndexFromEditor = function(editor) {\n"
          + "            var count = editors.count();\n"
          + "            for(var i = 0; i < count; i += 1) {\n"
          + "              if(editors.item(i).editor === editor) {\n"
          + "                return i;\n"
          + "              }\n"
          + "            }\n"
          + "            return -1;\n"
          + "          };\n"
          + "\n"
          + "          self.removeEditor = function(editor) {\n"
          + "            var index = getIndexFromEditor(editor);\n"
          + "            if(index >= 0) {\n"
          + "              editors.remove(index);\n"
          + "            }\n"
          + "          };\n"
          + "\n"
          + "          var getKey = function(id) {\n"
          + "            if(id === Cairo.Constants.NO_ID) {\n"
          + "              return \"new-id:\" + (new Date).getTime().toString()\n"
          + "            }\n"
          + "            else {\n"
          + "              return \"k:\" + id.toString();\n"
          + "            }\n"
          + "          };\n"
          + "\n"
          + "          self.updateEditorKey = function(editor, newId) {\n"
          + "            var index = getIndexFromEditor(editor);\n"
          + "            if(index >= 0) {\n"
          + "              var editor = editors.item(index);\n"
          + "              editors.remove(index);\n"
          + "              var key = getKey(newId);\n"
          + "              editors.add(editor, key);\n"
          + "            }\n"
          + "          };\n"
          + "\n"
          + "          self.edit = function(id, treeId, branchId) {\n"
          + "            var key = getKey(id);\n"
          + "            if(editors.contains(key)) {\n"
          + "              editors.item(key).dialog.showDialog();\n"
          + "            }\n"
          + "            else {\n"
          + "              var editor = Cairo." + moduleName + ".Edit.Controller.getEditor();\n"
          + "              var dialog = Cairo.Dialogs.Views.Controller.newDialog();\n"
          + "\n"
          + "              editor.setTree(self);\n"
          + "              editor.setDialog(dialog);\n"
          + "              editor.setTreeId(treeId);\n"
          + "              editor.setBranchId(branchId);\n"
          + "              editor.edit(id);\n"
          + "\n"
          + "              editors.add({editor: editor, dialog: dialog}, key);\n"
          + "            }\n"
          + "          };\n"
          + "\n"
          + "          self.destroy = function(id, treeId, branchId) {\n"
          + "            if(!Cairo.Security.hasPermissionTo(Cairo.Security.Actions.General.DELETE_" + upperModuleName + ")) {\n"
          + "              return Cairo.Promises.resolvedPromise(false);\n"
          + "            }\n"
          + "            var apiPath = Cairo.Database.getAPIVersion();\n"
          + "            return Cairo.Database.destroy(apiPath + \"general/" + identifierName + "\", id, Cairo.Constants.DELETE_FUNCTION, \"" + moduleName + "\").success(\n"
          + "              function() {\n"
          + "                try {\n"
          + "                  var key = getKey(id);\n"
          + "                  if(editors.contains(key)) {\n"
          + "                    editors.item(key).dialog.closeDialog();\n"
          + "                  }\n"
          + "                }\n"
          + "                catch(ignore) {\n"
          + "                  Cairo.log('Error closing dialog after delete');\n"
          + "                }\n"
          + "                return true;\n"
          + "              }\n"
          + "            );\n"
          + "          };\n"
          + "\n"
          + "          // progress message\n"
          + "          //\n"
          + "          Cairo.LoadingMessage.show(\"" + pluralName + "\", \"Loading " + lowerName + " from Crowsoft Cairo server.\");\n"
          + "\n"
          + "          // create the tree region\n"
          + "          //\n"
          + "          Cairo.addRegions({ " + identifierName + "TreeRegion: tabId });\n"
          + "\n"
          + "          // create the dialog\n"
          + "          //\n"
          + "          Cairo.Tree.List.Controller.list(\n"
          + "            Cairo.Tables." + tableName + ",\n"
          + "            new Cairo.Tree.List.TreeLayout({ model: self.entityInfo }),\n"
          + "            Cairo." + identifierName + "TreeRegion,\n"
          + "            self);\n"
          + "\n"
          + "        };\n"
          + "\n"
          + "        var showTreeDialog = function() {\n"
          + "          Cairo.Tree.List.Controller.showTreeDialog(self);\n"
          + "        };\n"
          + "\n"
          + "        var closeTreeDialog = function() {\n"
          + "\n"
          + "        }\n"
          + "\n"
          + "        // create the tab\n"
          + "        //\n"
          + "        Cairo.mainTab.showTab(\"" + pluralName + "\", \"" + identifierName + "TreeRegion\", \"#general/" + identifierPluralName + "\", createTreeDialog, closeTreeDialog, showTreeDialog);\n"
          + "\n"
          + "      }\n"
          + "    };\n"
          + "  });\n";                
        return strLine;
    }
    
    // server: SCALA CODE

    /*
     
     * CONTROLLER
     
     */
    
    private static final String m_controllerImports = 
            "import controllers._\n"
          + "import play.api.mvc._\n"
          + "import play.api.data._\n"
          + "import play.api.data.Forms._\n"
          + "import actions._\n"
          + "import play.api.Logger\n"
          + "import play.api.libs.json._\n"
          + "import models.cairo.modules.general._\n"
          + "import models.cairo.system.security.CairoSecurity\n"
          + "import models.cairo.system.database.DBHelper\n";

    private String m_controllerClassData = "case class XxxzData(\n              id: Option[Int],\nCASE-CLASS-FIELDS\n              )";
    
    private String m_controllerObject = 
          "object Xxxzs extends Controller with ProvidesUser {\n\n"
            
        + "  val xxxzForm = Form(\n"
        + "    mapping(\n"
        + "[FORM-DATA]"   
        + "  )(XxxzData.apply)(XxxzData.unapply))\n\n"   

        + "  implicit val xxxzWrites = new Writes[Xxxz] {\n"
        + "    def writes(xxxz: Xxxz) = Json.obj(\n"
        + "[WRITES-DATA]"   
        + "    )\n"   
        + "  }\n\n"   
            
        + "  def get(id: Int) = GetAction { implicit request =>\n"
        + "    LoggedIntoCompanyResponse.getAction(request, CairoSecurity.hasPermissionTo(S.LIST_XXXZ), { user =>\n"
        + "      Ok(Json.toJson(Xxxz.get(user, id)))\n"
        + "    })\n"
        + "  }\n\n"

        + "  def update(id: Int) = PostAction { implicit request =>\n"
        + "    Logger.debug(\"in xxxzs.update\")\n"
        + "    xxxzForm.bindFromRequest.fold(\n"
        + "      formWithErrors => {\n"
        + "        Logger.debug(s\"invalid form: ${formWithErrors.toString}\")\n"
        + "        BadRequest\n"
        + "      },\n"
        + "      xxxz => {\n"
        + "        Logger.debug(s\"form: ${xxxz.toString}\")\n"
        + "        LoggedIntoCompanyResponse.getAction(request, CairoSecurity.hasPermissionTo(S.EDIT_XXXZ), { user =>\n"
        + "          Ok(\n"
        + "            Json.toJson(\n"
        + "              Xxxz.update(user,\n" 
        + "                Xxxz(\n"
        + "                       id,\n"
        + "[UPDATE-PARAM-LIST]\n"
        + "                ))))\n"
        + "        })\n"
        + "      }\n"
        + "    )\n"
        + "  }\n\n"

        + "  def create = PostAction { implicit request =>\n"
        + "    Logger.debug(\"in xxxzs.create\")\n"
        + "    xxxzForm.bindFromRequest.fold(\n"
        + "      formWithErrors => {\n"
        + "        Logger.debug(s\"invalid form: ${formWithErrors.toString}\")\n"
        + "        BadRequest\n"
        + "      },\n"
        + "      xxxz => {\n"
        + "        Logger.debug(s\"form: ${xxxz.toString}\")\n"
        + "        LoggedIntoCompanyResponse.getAction(request, CairoSecurity.hasPermissionTo(S.NEW_XXXZ), { user =>\n"
        + "          Ok(\n"
        + "            Json.toJson(\n"
        + "              Xxxz.create(user,\n"
        + "                Xxxz(\n"
        + "[CREATE-PARAM-LIST]\n"
        + "                ))))\n"
        + "        })\n"
        + "      }\n"
        + "    )\n"
        + "  }\n\n"

        + "  def delete(id: Int) = PostAction { implicit request =>\n"
        + "    Logger.debug(\"in xxxzs.delete\")\n"
        + "    LoggedIntoCompanyResponse.getAction(request, CairoSecurity.hasPermissionTo(S.DELETE_XXXZ), { user =>\n"
        + "      Xxxz.delete(user, id)\n"
        + "      // Backbonejs requires at least an empty json object in the response\n"
        + "      // if not it will call errorHandler even when we responded with 200 OK :P\n"
        + "      Ok(JsonUtil.emptyJson)\n"
        + "    })\n"
        + "  }\n\n"            
        + "}";            

    private String m_caseClassDataFields = "";
    private String m_caseClassPrefix = "";
    private String m_caseClassDataLastField = "";
    private boolean m_discardProperty = false;
    private String m_discardedProperties = "";
    private boolean m_setIdFound = false;
    
    private void writeControllerClassData(String strLine) {
      if (strLine.contains("var elem = properties.add(null")) {
         m_setValueFound = false;
         if (strLine.contains("var elem = properties.add(null, Cairo.General.Constants.")) {
            m_discardProperty = false; 
            m_setIdFound = false;
                    
            m_caseClassDataLastField = strLine.trim().replace("var elem = properties.add(null, Cairo.General.Constants.", "");
            m_caseClassDataLastField = m_caseClassDataLastField.substring(0, m_caseClassDataLastField.indexOf(")"));

            if (m_caseClassPrefix.isEmpty()) {
                m_caseClassPrefix = m_caseClassDataLastField.substring(0, m_caseClassDataLastField.indexOf("_") + 1);
            }

            if (m_caseClassDataLastField.startsWith(m_caseClassPrefix)) {
              m_caseClassDataLastField = m_caseClassDataLastField.substring(m_caseClassPrefix.length());
            }

            m_caseClassDataLastField = toCamel(m_caseClassDataLastField);

            m_caseClassDataFields += "              " + m_caseClassDataLastField + ": ";
         }
         else if (strLine.contains("var elem = properties.add(null, Cairo.Constants.ACTIVE")) {
             m_discardProperty = false;
             m_setIdFound = false;
         }
         else {
             m_discardProperty = true;
             m_discardedProperties += strLine + "\n";
         }
      }
      else if (strLine.contains("var elem = properties.add(null, Cairo.Constants.ACTIVE")) {
          // nothing to do
      }
      else if(strLine.contains("setValue") && ! m_discardProperty) {
          m_setValueFound = true;
          String expression = strLine.substring(strLine.indexOf("(") + 1, strLine.indexOf(")"));
          if (expression.equals("m_active === true ? 1 : 0")) {
              m_caseClassDataFields += "              active: Boolean,\n";
          }
          else {
            if (! m_setIdFound) {  
                IdentifierInfo info = getIdentifierInfo(getVariableFromExpression(expression));
                if (info != null) {
                    String dataType = info.variable != null ? info.variable.dataType : info.function.getReturnType().dataType;
                    m_caseClassDataFields += getScalaType(dataType) + ",\n";
                }
                else {
                    int debug = 1;
                }
            }
          }
      }      
      else if(strLine.contains("setSelectId")) {
          m_setIdFound = true;
          m_caseClassDataFields = updateLastFieldType(m_caseClassDataFields, "Int");
      }
    }
    
    private String getVariableFromExpression(String variable) {
        try {
            for (int i = variable.length()-2; i > 0; i--) {
                if (variable.charAt(i) == '(') {
                    variable = variable.substring(i+1);
                    break;
                }
            }
            return variable;
        }
        catch(RuntimeException e) {
            return "";
        }
    }
    
    private String updateLastFieldType(String list, String dataType) {
        for (int i = list.length()-1; i > 0; i--) {
            if (list.charAt(i) == ':') {
                list = list.substring(0, i + 2) + dataType + ",\n";
                break;
            }
        }
        return list;
    }
    
    private String m_formDataLastField = "";
    private String m_formData = "";
    
    private void writeControllerFormData(String strLine) {
        if (strLine.contains("var elem = properties.add(null, Cairo.General.Constants.")) {
            m_formDataLastField = strLine.trim().replace("var elem = properties.add(null, Cairo.General.Constants.", "");
            m_formDataLastField = m_formDataLastField.substring(0, m_formDataLastField.indexOf(")"));
            m_formData += "      C." + m_formDataLastField + " -> ";
        } else if (strLine.contains("setValue") && ! m_discardProperty) {
            String expression = strLine.substring(strLine.indexOf("(") + 1, strLine.indexOf(")"));
            if (expression.equals("m_active === true ? 1 : 0")) {
                m_formData += "      DBHelper.ACTIVE -> boolean,\n";
            } else if (expression.equals("m_name")) {
                m_formData += "nonEmptyText,\n";
            } else {
                if (! m_setIdFound) {
                    IdentifierInfo info = getIdentifierInfo(getVariableFromExpression(expression));
                    if (info != null) {
                        String dataType = info.variable != null ? info.variable.dataType : info.function.getReturnType().dataType;
                        m_formData += getFormType(dataType) + ",\n";
                    }
                    else {
                        int debug = 1;
                    }
                }
            }
        }
        else if(strLine.contains("setSelectId")) {
            m_formData = updateFormDataLastFieldType(m_formData, "number");
        }        
    }
    
    private String updateFormDataLastFieldType(String list, String dataType) {
        for (int i = list.length()-1; i > 0; i--) {
            if (list.charAt(i) == '>') {
                list = list.substring(0, i + 2) + dataType + ",\n";
                break;
            }
        }
        return list;
    }
    
    private String m_writeDataLastField = "";
    private String m_writeData = "";
    private String m_writeDataLastField2 = "";
    private String m_writeDataFkBuffer = "";
    private boolean m_setValueFound = false;
    
    private void writeControllerWriteData(String strLine) {
        if (strLine.contains("var elem = properties.add(null, Cairo.General.Constants.")) {
            m_writeDataLastField = strLine.trim().replace("var elem = properties.add(null, Cairo.General.Constants.", "");
            m_writeDataLastField = m_writeDataLastField.substring(0, m_writeDataLastField.indexOf(")"));
            m_writeData += "      C." + m_writeDataLastField + " -> ";
            
            m_writeDataLastField2 = strLine.trim().replace("var elem = properties.add(null, Cairo.General.Constants.", "");
            m_writeDataLastField2 = m_writeDataLastField2.substring(0, m_writeDataLastField2.indexOf(")"));

            if (m_caseClassPrefix.isEmpty()) {
                m_caseClassPrefix = m_caseClassDataLastField.substring(0, m_caseClassDataLastField.indexOf("_") + 1);
            }

            if (m_writeDataLastField2.startsWith(m_caseClassPrefix)) {
              m_writeDataLastField2 = m_writeDataLastField2.substring(m_caseClassPrefix.length());
            }

            m_writeDataLastField2 = toCamel(m_writeDataLastField2);
            
        } else if (strLine.contains("setValue") && ! m_discardProperty) {
            String expression = strLine.substring(strLine.indexOf("(") + 1, strLine.indexOf(")"));
            if (expression.equals("m_active === true ? 1 : 0")) {
                m_writeData += "      DBHelper.ACTIVE -> Json.toJson(xxxz.active),\n";
            } else {
                IdentifierInfo info = getIdentifierInfo(getVariableFromExpression(expression));
                if (info != null) {
                    m_writeData += "Json.toJson(xxxz." + m_writeDataLastField2 + "),\n" + m_writeDataFkBuffer;
                    m_writeDataFkBuffer = "";
                }
                else {
                    int debug = 1;
                }                    
            }
        }
        else if(strLine.contains("setSelectId")) {
            
            if(!m_writeDataLastField.isEmpty()) {
                String prefix = m_writeDataLastField.substring(0, m_writeDataLastField.indexOf("_"));

                String jsonLine = "      C." + prefix
                        + "_NAME -> Json.toJson(xxxz." 
                        + prefix.toLowerCase() + "Name),\n";
                if (m_setValueFound) {
                    m_writeData += jsonLine;
                    m_writeDataFkBuffer = "";
                }
                else {
                    m_writeDataFkBuffer = jsonLine;
                }
            }
        }
    }
    
    private String m_createUpdateParamList = "";
    private String m_paramListLastField = "";
    
    private void writeCreateUpdateParamList(String strLine) {
        if (strLine.contains("var elem = properties.add(null, Cairo.General.Constants.")) {
            m_paramListLastField = strLine.trim().replace("var elem = properties.add(null, Cairo.General.Constants.", "");
            m_paramListLastField = m_paramListLastField.substring(0, m_paramListLastField.indexOf(")"));

            if (m_caseClassPrefix.isEmpty()) {
                m_caseClassPrefix = m_caseClassDataLastField.substring(0, m_caseClassDataLastField.indexOf("_") + 1);
            }

            if (m_paramListLastField.startsWith(m_caseClassPrefix)) {
              m_paramListLastField = m_paramListLastField.substring(m_caseClassPrefix.length());
            }

            m_paramListLastField = toCamel(m_paramListLastField);

            m_createUpdateParamList += "                       xxxz." + m_paramListLastField + ",\n";
            
        } else if (strLine.contains("setValue") && ! m_discardProperty) {
            String expression = strLine.substring(strLine.indexOf("(") + 1, strLine.indexOf(")"));
            if (expression.equals("m_active === true ? 1 : 0")) {
                m_createUpdateParamList += "                       xxxz.active,\n";
            }
        }        
    }
    
    private String getFormType(String dataType) {
        if (dataType.equals("String"))
            return "text";
        else if (dataType.equals("Boolean"))
            return "boolean";
        else 
            return "number";
    }
       
    private String getControllerFile() {        
        m_caseClassDataFields = chop(m_caseClassDataFields, 2);
        
        String className = m_javaClassName.substring(1);
        String pluralClassName = cairoTreeListControllerGetIdentifierPluralName(className);
        String lowerPluralClassName = pluralClassName.toLowerCase();
        String capitalizedPluralClassName = capitalize(pluralClassName);
        String lowerCaseClassName = cairoTreeListControllerGetIdentifierName(className);
        String capitalizedClassName = capitalize(lowerCaseClassName);
        
        String pkColumnName = m_caseClassPrefix + "ID";
        
        m_formData = "      \"id\" -> optional(number),\n" + chop(m_formData, 2) + "\n";        
        m_writeData = ("      \"id\" -> Json.toJson(xxxz.id),\n" + "      C." + pkColumnName + " -> Json.toJson(xxxz.id),\n" + chop(m_writeData, 2)).replaceAll("xxxz", lowerCaseClassName) + "\n";
        m_createUpdateParamList = chop(m_createUpdateParamList, 2).replaceAll("xxxz", lowerCaseClassName);

        return "package controllers.logged.modules.general\n\n"
                + m_controllerImports
                + "\n\n"
                + m_controllerClassData.replace("CASE-CLASS-FIELDS", m_caseClassDataFields).replaceAll("Xxxz", capitalizedClassName)
                + "\n\n"
                + m_controllerObject
                    .replaceAll("Xxxzs", capitalizedPluralClassName)
                    .replaceAll("xxxzs", lowerPluralClassName)
                    .replaceAll("Xxxz", capitalizedClassName)
                    .replaceAll("xxxz", lowerCaseClassName)
                    .replaceAll("XXXZs", pluralClassName.toUpperCase())
                    .replaceAll("XXXZ", lowerCaseClassName.toUpperCase())
                    .replaceAll("\\[FORM-DATA\\]", m_formData)
                    .replaceAll("\\[WRITES-DATA\\]", m_writeData)
                    .replaceAll("\\[UPDATE-PARAM-LIST\\]", m_createUpdateParamList)
                    .replaceAll("\\[CREATE-PARAM-LIST\\]", m_createUpdateParamList)
                ;    
    }
    
    private String chop(String text, int characters) {
        if (text.length() <= characters)
            return "";
        else 
            return text.substring(0, text.length() - characters);
    }
    
    private String toCamel(String text) {
        String rtn = "";
        boolean lastWasUnderscore = false;
        for (int i = 0; i < text.length(); i++) {
            String c = text.substring(i, i+1);
            if (c.equals("_")) {
                lastWasUnderscore = true;
            }
            else {
                if (lastWasUnderscore) {
                    rtn += c.toUpperCase();
                    lastWasUnderscore = false;
                }                
                else {
                    rtn += c.toLowerCase();
                }
            }
        }
        return rtn;
    }
    
    /*
     
     * MODEL
     
     */    
    
    private static final String m_modelImports = 
            "import java.sql.{Connection, CallableStatement, ResultSet, Types, SQLException}\n"
          + "import anorm.SqlParser._\n"
          + "import anorm._\n"
          + "import services.DateUtil\n"
          + "import services.db.DB\n"
          + "import models.cairo.system.database.{DBHelper, Register, Field, FieldType, SaveResult}\n"
          + "import play.api.Play.current\n"
          + "import models.domain.CompanyUser\n"
          + "import java.util.Date\n"
          + "import play.api.Logger\n"
          + "import play.api.libs.json._\n"
          + "import scala.util.control.NonFatal\n";
    
    private String m_modelCaseClass = 
            "case class Xxxz(\n              id: Int,\n"
          + "CASE-CLASS-FIELDS-FULL,\n"
          + "              createdAt: Date,\n"
          + "              updatedAt: Date,\n"
          + "              updatedBy: Int) {\n\n"
          + "  def this(\n      id: Int,\nCASE-CLASS-FIELDS-NO-FK-NAMES) = {\n\n"
          + "    this(\n      id,\nCASE-CLASS-ARGUMENTS-FULL,\n"
          + "      DateUtil.currentTime,\n      DateUtil.currentTime,\n      DBHelper.NoId)\n"
          + "  }\n\n"  
          + "  def this(\nCASE-CLASS-FIELDS-NO-FK-NAMES) = {\n\n"
          + "    this(\n      DBHelper.NoId,\nCASE-CLASS-ARGUMENTS-NO-FK)\n\n"
          + "  }\n\n"
          + "}";
    
    private String m_modelObject = 
                "object Xxxz {\n\n"

            + "  lazy val emptyXxxz = Xxxz(\nCASE-CLASS-EMPTY-ARGUMENTS)\n\n"

            + "  def apply(\n      id: Int,\nCASE-CLASS-FIELDS-NO-FK-NAMES) = {\n\n"
            + "    new Xxxz(\n      id,\nCASE-CLASS-ARGUMENTS-APPLY-FULL)\n"
            + "  }\n\n"
            + "  def apply(\nCASE-CLASS-FIELDS-NO-FK-NAMES) = {\n\n"
            + "    new Xxxz(\nCASE-CLASS-ARGUMENTS-NO-FK)\n"
            + "  }\n\n"

            + "  private val xxxzParser: RowParser[Xxxz] = {\n"
            + "      SqlParser.get[Int](C.PK_COLUMN) ~\n"
            + "[PARSER-MAP]"
            + "      SqlParser.get[Date](DBHelper.CREATED_AT) ~\n"
            + "      SqlParser.get[Date](DBHelper.UPDATED_AT) ~\n"
            + "      SqlParser.get[Int](DBHelper.UPDATED_BY) map {\n"
            
            /* [PARSER-MAP]:
             
            + "      SqlParser.get[String](C.PRO_NAME) ~\n"
            + "      SqlParser.get[String](C.PRO_CODE) ~\n"
            + "      SqlParser.get[String](C.PRO_DESCRIP) ~\n"
            + "      SqlParser.get[Int](DBHelper.ACTIVE) ~\n"
            + "      SqlParser.get[Int](C.PA_ID) ~\n"
            + "      SqlParser.get[String](C.PA_NAME)
             
             */
            
            
            + "      case\n              id ~\n[PARSER~COLUMNS] ~\n              createdAt ~\n              updatedAt ~\n              updatedBy =>\n"
            
            /* [PARSER~COLUMNS]:             
             
             name ~ code ~ descrip ~ active ~ paId ~ paName
             
             */            
            
            + "        Xxxz(\n              id,\n[PARSER-COLUMNS],\n              createdAt,\n              updatedAt,\n              updatedBy)\n"
            
            /* [PARSER-COLUMNS]:
            
             name, code, descrip, (if(active != 0) true else false), paId, paName
            
            */
            
            + "    }\n"
            + "  }\n\n"

            + "  def create(user: CompanyUser, xxxz: Xxxz): Xxxz = {\n"
            + "    save(user, xxxz, true)\n"
            + "  }\n\n"

            + "  def update(user: CompanyUser, xxxz: Xxxz): Xxxz = {\n"
            + "    save(user, xxxz, false)\n"
            + "  }\n\n"

            + "  private def save(user: CompanyUser, xxxz: Xxxz, isNew: Boolean): Xxxz = {\n"
            + "    def getFields = {\n"
            + "      List(\n"
            + "[SAVE-FIELD-LIST]\n"
            + "      )\n"
            + "    }\n"
            
            /* [SAVE-FIELD-LIST]
             
            + "        Field(C.PRO_NAME, xxxz.name, FieldType.text),\n"
            + "        Field(C.PRO_CODE, xxxz.code, FieldType.text),\n"
            + "        Field(C.PRO_DESCRIP, xxxz.descrip, FieldType.text),\n"
            + "        Field(DBHelper.ACTIVE, (if(xxxz.active) 1 else 0), FieldType.boolean),\n"
            + "        Field(C.PA_ID, xxxz.paId, FieldType.id)\n"             
             
             */
            
            
            + "    def throwException = {\n"
            + "      throw new RuntimeException(s\"Error when saving ${C.XXXZ}\")\n"
            + "    }\n\n"

            + "    DBHelper.saveEx(\n"
            + "      user,\n"
            + "      Register(\n"
            + "        C.XXXZ,\n"
            + "        C.PK_COLUMN,\n"
            + "        xxxz.id,\n"
            + "        false,\n"
            + "        true,\n"
            + "        true,\n"
            + "        getFields),\n"
            + "      isNew,\n"
            + "      C.CODE_COLUMN\n"
            + "    ) match {\n"
            + "      case SaveResult(true, id) => load(user, id).getOrElse(throwException)\n"
            + "      case SaveResult(false, id) => throwException\n"
            + "    }\n"
            + "  }\n\n"

            + "  def load(user: CompanyUser, id: Int): Option[Xxxz] = {\n"
            + "    loadWhere(user, s\"${C.PK_COLUMN} = {id}\", 'id -> id)\n"
            + "  }\n\n"

            + "  def loadWhere(user: CompanyUser, where: String, args : scala.Tuple2[scala.Any, anorm.ParameterValue[_]]*) = {\n"
            + "    DB.withConnection(user.database.database) { implicit connection =>\n"
            + "      SQL(s\"SELECT t1.*, t2.${C.FK_NAME} FROM ${C.XXXZ} t1 INNER JOIN ${C.???} t2 ON t1.${C.FK_ID} = t2.${C.FK_ID} WHERE $where\")\n"
            + "        .on(args: _*)\n"
            + "        .as(xxxzParser.singleOpt)\n"
            + "    }\n"
            + "  }\n\n"

            + "  def delete(user: CompanyUser, id: Int) = {\n"
            + "    DB.withConnection(user.database.database) { implicit connection =>\n"
            + "      try {\n"
            + "        SQL(s\"DELETE FROM ${C.XXXZ} WHERE ${C.PK_COLUMN} = {id}\")\n"
            + "        .on('id -> id)\n"
            + "        .executeUpdate\n"
            + "      } catch {\n"
            + "        case NonFatal(e) => {\n"
            + "          Logger.error(s\"can't delete a ${C.XXXZ}. ${C.PK_COLUMN} id: $id. Error ${e.toString}\")\n"
            + "          throw e\n"
            + "        }\n"
            + "      }\n"
            + "    }\n"
            + "  }\n\n"

            + "  def get(user: CompanyUser, id: Int): Xxxz = {\n"
            + "    load(user, id) match {\n"
            + "      case Some(p) => p\n"
            + "      case None => emptyXxxz\n"
            + "    }\n"
            + "  }\n"
            + "}\n";           
    
    private String m_caseClassFields = "";
    private String m_caseClassNoFKFields = "";

    private String m_caseClassArgumentsFull = "";    
    private String m_caseClassArgumentsApplyFull = "";    
    private String m_caseClassArgumentsNoFK = "";
    private String m_caseClassEmptyArguments = "";
    private String m_parserMap = "";
    private String m_parserColumns = "";
    private String m_parserColumns2 = "";
    private String m_saveFieldList = "";
    private String m_parserMapLastField = "";
    private String m_camelField = "";
    
    private String m_caseClassLastField = "";
    
    private void writeModelCaseClass(String strLine) {
      if (strLine.contains("var elem = properties.add(null, Cairo.General.Constants.")) {
          m_caseClassLastField = strLine.trim().replace("var elem = properties.add(null, Cairo.General.Constants.", "");
          m_caseClassLastField = m_caseClassLastField.substring(0, m_caseClassLastField.indexOf(")"));
          
          m_parserMapLastField = m_caseClassLastField;
          
          if (m_caseClassPrefix.isEmpty()) {
              m_caseClassPrefix = m_caseClassLastField.substring(0, m_caseClassLastField.indexOf("_") + 1);
          }
          
          if (m_caseClassLastField.startsWith(m_caseClassPrefix)) {
            m_caseClassLastField = m_caseClassLastField.substring(m_caseClassPrefix.length());
          }
          
          m_camelField = toCamel(m_caseClassLastField);
          
          m_caseClassFields += "              " + m_camelField + ": ";
          m_caseClassNoFKFields += "      " + m_camelField + ": ";
          
          m_caseClassArgumentsFull += "      " + m_camelField + ",\n";
          m_caseClassArgumentsApplyFull += "      " + m_camelField + ",\n";
          m_caseClassArgumentsNoFK += "      " + m_camelField + ",\n";
          
          m_parserColumns += "              " + m_camelField + " ~\n";
          m_parserColumns2 += "              " + m_camelField + ",\n";
                  
      }
      else if(strLine.contains("setValue") && ! m_discardProperty) {
          String expression = strLine.substring(strLine.indexOf("(") + 1, strLine.indexOf(")"));
          if (expression.equals("m_active === true ? 1 : 0")) {
              m_caseClassFields += "              active: Boolean,\n";
              m_caseClassNoFKFields += "      active: Boolean,\n";
              m_caseClassArgumentsFull += "      active,\n";
              m_caseClassArgumentsApplyFull += "      active,\n";
              m_caseClassArgumentsNoFK += "      active,\n";
              m_caseClassEmptyArguments += "    false,\n";
              m_parserMap += "      SqlParser.get[Int](DBHelper.ACTIVE) ~\n";
              m_parserColumns += "              active ~\n";
              m_parserColumns2 += "              (if(active != 0) true else false),\n";
              m_saveFieldList += "        Field(DBHelper.ACTIVE, (if(xxxz.active) 1 else 0), FieldType.boolean),\n";
              
          }
          else {
            IdentifierInfo info = getIdentifierInfo(getVariableFromExpression(expression)); 
            if (info != null) {
                String dataType = info.variable != null ? info.variable.dataType : info.function.getReturnType().dataType;
                String scalaType = getScalaType(dataType);
                if (! m_setIdFound) {
                  m_caseClassNoFKFields += scalaType + ",\n";
                  m_caseClassFields += scalaType + ",\n";
                }
                m_caseClassEmptyArguments += "    " + getZeroValueForDataType(dataType) + ",\n";
                m_parserMap += "      SqlParser.get[" + scalaType + "](C." + m_parserMapLastField + ") ~\n";            
                m_saveFieldList += "        Field(C." + m_parserMapLastField + ", xxxz." + m_camelField + ", FieldType." + getFormType(dataType) + "),\n";            
            }
            else {
                int debug = 1;
            }
          }
      }      
      else if(strLine.contains("setSelectId")) {
          int t = m_caseClassLastField.indexOf("_");
          if(t >= 0) {
            String fkName = m_caseClassLastField.substring(0, t).toLowerCase() + "Name";

            if (m_caseClassNoFKFields.contains("ibcId:")) {
                int debug = 1;
            }

            m_caseClassFields = updateLastFieldType(m_caseClassFields, "Int");
            m_caseClassNoFKFields = updateLastFieldType(m_caseClassNoFKFields, "Int");
            int len = (m_caseClassEmptyArguments.endsWith(" 0,\n")) ? 3 : (m_caseClassEmptyArguments.endsWith(" null,\n")) ? 6 : 4;

            m_caseClassEmptyArguments = chop(m_caseClassEmptyArguments, len) + "DBHelper.NoId,\n";
            m_caseClassFields += "              " + fkName + ": String,\n";
            m_caseClassArgumentsFull += "      \"\",\n";
            m_parserMap = updateLastParserType(m_parserMap, "Int");
            m_parserMap += "      SqlParser.get[String](C." + m_caseClassLastField.substring(0, m_caseClassLastField.indexOf("_")).toUpperCase() + "_NAME" + ") ~\n";
            m_parserColumns += "              " + fkName + " ~\n";
            m_parserColumns2 += "              " + fkName + ",\n";

            m_saveFieldList = updateLastSaveListType(m_saveFieldList, "id");
          }
      }
    }
    
    private String updateLastParserType(String list, String dataType) {
        for (int i = list.length()-1; i > 0; i--) {
            if (list.charAt(i) == '[') {
                list = list.substring(0, i + 1) + dataType + "](C." + m_parserMapLastField + ") ~\n";
                break;
            }
        }
        return list;
    }

    private String updateLastSaveListType(String list, String dataType) {
        for (int i = list.length()-3; i > 0; i--) {
            if (list.charAt(i) == ',') {
                list = list.substring(0, i + 1) + " FieldType." + dataType + "),\n";
                break;
            }
        }
        return list;
    }    
    
    private String getModelFile() {
               
        String className = m_javaClassName.substring(1);
        String pluralClassName = cairoTreeListControllerGetIdentifierPluralName(className);
        String lowerPluralClassName = pluralClassName.toLowerCase();
        String capitalizedPluralClassName = capitalize(pluralClassName);
        String lowerCaseClassName = cairoTreeListControllerGetIdentifierName(className);
        String capitalizedClassName = capitalize(lowerCaseClassName);
        
        String pkColumnName = m_caseClassPrefix + "ID";
        String codeColumnName = m_caseClassPrefix + "CODE";
        
        m_caseClassFields = chop(m_caseClassFields, 2);
        m_caseClassNoFKFields = chop(m_caseClassNoFKFields, 2);
        m_caseClassArgumentsFull = chop(m_caseClassArgumentsFull, 2);
        m_caseClassArgumentsApplyFull = chop(m_caseClassArgumentsApplyFull, 2);
        m_caseClassArgumentsNoFK = chop(m_caseClassArgumentsNoFK, 2);        
        
        return "package models.cairo.modules.general\n\n"
                + m_modelImports
                + "\n"
                + m_modelCaseClass
                        .replace("CASE-CLASS-FIELDS-FULL", m_caseClassFields)
                        .replace("CASE-CLASS-FIELDS-NO-FK-NAMES", m_caseClassNoFKFields)
                        .replace("CASE-CLASS-ARGUMENTS-FULL", m_caseClassArgumentsFull)
                        .replace("CASE-CLASS-ARGUMENTS-NO-FK", m_caseClassArgumentsNoFK)
                        .replaceAll("Xxxz", capitalizedClassName)
                + "\n\n"
                + m_modelObject
                    .replace("CASE-CLASS-FIELDS-FULL", m_caseClassFields)
                    .replace("CASE-CLASS-FIELDS-NO-FK-NAMES", m_caseClassNoFKFields)
                    .replace("CASE-CLASS-ARGUMENTS-APPLY-FULL", m_caseClassArgumentsApplyFull)
                    .replace("CASE-CLASS-ARGUMENTS-NO-FK", m_caseClassArgumentsNoFK)
                    .replace("CASE-CLASS-EMPTY-ARGUMENTS", chop(m_caseClassEmptyArguments, 2))
                    .replaceAll("PK_COLUMN", pkColumnName)
                    .replaceAll("CODE_COLUMN", codeColumnName)
                    .replaceAll("\\[PARSER-MAP\\]", m_parserMap)
                    .replaceAll("\\[PARSER~COLUMNS\\]", chop(m_parserColumns, 2))
                    .replaceAll("\\[PARSER-COLUMNS\\]", chop(m_parserColumns2, 2))
                    .replaceAll("\\[SAVE-FIELD-LIST\\]", chop(m_saveFieldList, 2))
                    .replaceAll("Xxxzs", capitalizedPluralClassName)
                    .replaceAll("xxxzs", lowerPluralClassName)
                    .replaceAll("Xxxz", capitalizedClassName)
                    .replaceAll("xxxz", lowerCaseClassName)
                    .replaceAll("XXXZs", pluralClassName.toUpperCase())
                    .replaceAll("XXXZ", lowerCaseClassName.toUpperCase())
                ;
        
        ////////////////////////////////////////////////////////////////////////
        

        
/*        
        
        m_formData = "      \"id\" -> optional(number),\n" + chop(m_formData, 2) + "\n";        
        m_writeData = ("      \"id\" -> Json.toJson(xxxz.id),\n" + chop(m_writeData, 2)).replaceAll("xxxz", lowerCaseClassName) + "\n";
        m_createUpdateParamList = chop(m_createUpdateParamList, 2).replaceAll("xxxz", lowerCaseClassName);

        return m_controllerImports
                + "\n\n"
                + m_controllerClassData.replace("CASE-CLASS-FIELDS", m_caseClassDataFields).replaceAll("Xxxz", capitalizedClassName)
                + "\n\n"
                + m_controllerObject
                    .replaceAll("Xxxzs", capitalizedPluralClassName)
                    .replaceAll("xxxzs", lowerPluralClassName)
                    .replaceAll("Xxxz", capitalizedClassName)
                    .replaceAll("xxxz", lowerCaseClassName)
                    .replaceAll("XXXZs", pluralClassName.toUpperCase())
                    .replaceAll("XXXZ", lowerCaseClassName.toUpperCase())
                    .replaceAll("\\[FORM-DATA\\]", m_formData)
                    .replaceAll("\\[WRITES-DATA\\]", m_writeData)
                    .replaceAll("\\[UPDATE-PARAM-LIST\\]", m_createUpdateParamList)
                    .replaceAll("\\[CREATE-PARAM-LIST\\]", m_createUpdateParamList)
                ; 
                */ 
    }
    
    private String getScalaType(String dataType) {
        return dataType.equals("Integer") ? "Int" : dataType;
    }
    
    private String m_router = 
        "GET     /api/v1/general/xxxz/:id              controllers.logged.modules.general.Xxxzs.get(id: Int)\n"
      + "POST    /api/v1/general/xxxz                  controllers.logged.modules.general.Xxxzs.create\n"
      + "PUT     /api/v1/general/xxxz/:id              controllers.logged.modules.general.Xxxzs.update(id: Int)\n"
      + "DELETE  /api/v1/general/xxxz/:id              controllers.logged.modules.general.Xxxzs.delete(id: Int)\n";
            
    private String getRouter() {
        String className = m_javaClassName.substring(1);
        String path = className.toLowerCase();
        String controllerName = capitalize(cairoTreeListControllerGetIdentifierPluralName(className));
        return m_router
              .replaceAll("xxxz", path)
              .replaceAll("Xxxzs", controllerName);              
    }
    
    
    /*
     
     SCALA functions
     * 
     * CONTROLLER
     * 
     * imports:
     * 
        import controllers._
        import play.api.mvc._
        import play.api.data._
        import play.api.data.Forms._
        import actions._
        import play.api.Logger
        import play.api.libs.json._
        import models.cairo.modules.general._
        import models.cairo.system.security.CairoSecurity
        import models.cairo.system.database.DBHelper
     *
     * case class XXXZData (only columns in the table. for FK do not include names)
     * 
     * object XXXZs extends Controller with ProvidesUser
     * 
     * XXXZForm:    only columns in the table
     * 
     * XXXZWrites:  all fields in XXXZ model (include FK's name) take this from load
     * 
     * get: very easy: just call model.load
     * 
     * create: very easy: just call model.create
     * 
     * delete: very easy: just call model.delete
     * 
     * MODEL
     * 
     * imports:
     * 
        import java.sql.{Connection, CallableStatement, ResultSet, Types, SQLException}
        import anorm.SqlParser._
        import anorm._
        import services.DateUtil
        import services.db.DB
        import models.cairo.system.database.{DBHelper, Register, Field, FieldType, SaveResult}
        import play.api.Play.current
        import models.domain.CompanyUser
        import java.util.Date
        import play.api.Logger
        import play.api.libs.json._
        import scala.util.control.NonFatal
     * 
     * case class XXXZ
     *  three constructors:
     *      - default constructor: all fields including names of FK
     *      - constructor which doesn't takes names of FK
     *      - constructor which doesn't takes names of FK neither PK
     * 
     * object XXXZ
     * 
     *  an emptyXXXZ
     * 
     *  two apply methods to implement the two aditional constructors
     * 
     *  rowParser
     * 
     *  create and update (very easy: only assign parameter: Type like provincia: Provincia and return type like ): Provincia, then call save(user, parameter, true/false))
     * 
     *  save  - easy: just define a list with Field(colName, value, type. this has to be done when parsin save just use the case K_xxx to create the list
     *                define an exception with a generic message
     *                call DBHelper.saveEx
     *                match the result
     * 
     *  load - easy: just set the idColumnName and call loadWhere
     * 
     *  loadWhere - very easy: just set the parser, the select should be written manually don't translate the select just copy the original select from load into
     *                         this function to help the manual editing
     * 
     *  delete - very easy: just set the name of the table and PK if the delete uses an SP or is more complex it will be translated manually
     * 
     *  get - just call load and if None return emptyXXXZ
     * 
     * ROUTER
     * 
     * # general
            GET     /api/v1/general/XXXZ/:id              controllers.logged.modules.general.XXXZs.get(id: Int)
            POST    /api/v1/general/XXXZ                  controllers.logged.modules.general.XXXZs.create
            PUT     /api/v1/general/XXXZ/:id              controllers.logged.modules.general.XXXZs.update(id: Int)
            DELETE  /api/v1/general/XXXZ/:id              controllers.logged.modules.general.XXXZs.delete(id: Int)
     * 
     * 
     
     */
    
}

class IdentifierInfo {
    boolean isFunction = false;
    Function function = null;
    Variable variable = null;
}

/*
 And
 As
 Call
 Do
 Exit
 False
 True
 For
 Function
 GoTo
 If
 Loop
 Me
 Next
 Not
 Nothing
 Option
 Or
 Private
 Public
 Resume
 Step
 Sub
 Then
 Until
 While
 If..Else..ElseIf..Then
 */

/*
 * TODO_DONE: file mError.bas line 72 {s = Replace(s, "$" & i + 1, X(i))}
 *       the code is translated as
 *              {s = Replace(s, "$" + ((Integer) i).toString() + 1, X(i));}
 *       it is wrong because i + 1 must to be evaluated first and then has to apply
 *       the cast to Integer:
 *              {s = Replace(s, "$" + ((Integer) (i + 1)).toString(), X(i));}
 */

/*
 *
 * TODO_DONE: manage events
 * TODO: manage byref params that actually aren't byref because are not asigned to a value
 *       by the function code
 * TODO_DONE: change getters in assignment eg:
 *              m_obj.getProperty() = ...;
 *       must be
 *              m_obj.setProperty(...);
 * TODO: translate byref for strings
 * TODO: translate byref for arrays. this is for array type params that are resized
 *       by the the function code. we have to search for redim
 * TODO_DONE: translate redim
 * TODO_DONE: translate instr
 * TODO: translate database access. replace recordsets.
 * TODO: translate globals (be aware of multi threading)
 * TODO: file functions (print, open, getattr, etc.)
 * TODO_DONE: translate Not sentence eg return Not cancel (this is parcially translated functionName = Not Cancel)
 * TODO: translate default property
 * TODO: translate on error goto controlerror
 * TODO: add import calls for references to vb projects we have translated
 * TODO_DONE: initialize local variables to zero or null string or null date or false
 * TODO: translate replace function
 * TODO_DONE: replace literal dates which are sourronded by #
 * TODO: resolve params array
 * TODO: translate IsEmpty for variants
 *
 * TODO: make an html report with a sumary of the work done (total classes translated,
 *       total files created, total projects translated, total functions)
 *
 *       erros: list of windows api calls founded and the line number where it appears in files
 *              list o variables of with block which can not be resolved and the line number
 *               where it appears in files
 *              list of references which are not vb projects we have translated yet eg: stdole2.dll
 *
 *       warnnings: list all the cases where default properties were translated
 *                  list all the cases where array indexes where translated
 *                  list all the cases where byref strings and byref numbers where translated
 *                  list all the cases where byref objects where translated to byval because
 *                   the object is not assigned by the code in the function and neither by the code
 *                   in other functions called by the function which was translated and takes
 *                   the object as a byref parameter
 *                  list all the cases where we found #If #else and #end if
 *
 */
