translateFunctionCall: Translates VB6 function calls to Java, handling different scenarios such as comments, reserved words, and special cases like single-parameter Sub calls.
isReservedWord: Determines if a given word is a reserved word in either Java or VB6 based on the translation context.
replaceMemberVariables: Replaces member variables in a string based on a list of known member variables.
replaceFunctionVariables: Replaces function variables in a string based on a list of known function variables.
putParentheses and related methods: Handles parentheses in expressions, ensuring correct grouping and translation.
containsMathOperators: Checks if a string contains mathematical operators (+, -, *, /).
removeLiterals: Removes string literals from a given string.
replaceAmpersand and related methods: Replaces ampersands (&) in expressions, ensuring proper translation and precedence.
translateVbOperators: Translates VB6 operators like "and," "or," "<>," "not," and parentheses to their Java equivalents.
replaceStringComparison: Replaces VB6 string comparison expressions with Java equivalents.
replaceStringCompareNullString: Replaces VB6 string comparisons with an empty string with the Java equivalent for checking emptiness.
replaceTypeOfSentence: Replaces VB6 TypeOf expressions with their Java equivalents.
replaceMidSentence, replaceLeftSentence: Replaces VB6 Mid and Left function calls with their Java equivalents.
replaceRightSentence: Replaces VB's Right function with Java's substring for string manipulation, handling potential nested function calls and complex expressions.
replaceLCaseSentence: Converts VB's LCase function to Java's toLowerCase for case conversion, managing nested calls and complex expressions.
replaceUCaseSentence: Translates VB's UCase function to Java's toUpperCase for uppercase conversion, handling nested calls and complex expressions.
replaceLenSentence: Replaces VB's Len function with Java's length for string length retrieval, managing nested calls and complex expressions.
replaceInStrSentence: Converts VB's InStr function to Java's indexOf for string search, handling various parameter combinations and complex expressions.
replaceReplaceSentence: Translates VB's Replace function to Java's replace method for string replacement, handling nested calls and complex expressions.
replaceIifSentence: Replaces VB's IIf function with the Java ternary operator ? : for conditional statements, managing nested calls and complex expressions.
replaceTrimSentence: Converts VB's Trim function to Java's trim for whitespace removal, handling nested calls and complex expressions.
replaceIsNumericSentence: Replaces VB's IsNumeric function with an auxiliary Java function or G.isNumeric for checking numeric values.
replaceCDblSentence: Translates VB's CDbl function to Java's Double.parseDouble for converting to double.
replaceCIntSentence: Converts VB's CInt function to Java's Integer.parseInt for converting to integer.
replaceCLngSentence: Translates VB's CLng function to Java's Long.parseLong for converting to long.
replaceCSngSentence: Replaces VB's CSng function with Java's Double.parseDouble for converting to single.
replaceCCurSentence: Converts VB's CCur function to Java's Double.parseDouble for converting to currency.
replaceCDateSentence: Translates VB's CDate function to an auxiliary Java function or G.parseDate for date 
replaceOneParamFunction: Iterates through the input expression, identifying occurrences of the specified VB6 function. Handles nested calls by recursively replacing inner function calls. Reconstructs the expression with the Java equivalent function and its parameters, ensuring proper conversion of function calls.
containsTypeOf: Performs case-insensitive checks within the expression to identify the presence of VB6 TypeOf. Utilizes string manipulation to accurately detect these occurrences, assisting in the precise conversion to Java.
containsMid, containsLeft, containsRight: Employs toLowerCase() and contains() methods to identify VB6 string manipulation functions within the expression. Captures variations and forms of these functions, ensuring comprehensive recognition for accurate Java conversion.
containsLCase, containsUCase, containsLen: Utilizes similar string manipulation techniques to identify VB6 string functions. Recognizes variations and formats, enabling precise conversion of these functions to their Java equivalents.
containsTrim, containsInStr, containsReplace, containsIif: Leverages string methods and conditional checks to detect specific VB6 functions. Ensures accurate identification and subsequent conversion to Java equivalents, preserving the intended functionality.
containsFunction: Employs case-insensitive checks and string manipulation to determine if a particular VB6 function is present in the expression. Provides a crucial mechanism for identifying functions during the conversion process.
replaceVbWords: Iterates through an array of words in the expression, replacing VB6-specific terms with their Java equivalents. Ensures consistent terminology in the converted code, enhancing readability and maintaining code integrity.
processEqualsSentence: Handles equality and inequality operations, especially for string comparisons. Accounts for different scenarios, such as string expressions, to construct Java-equivalent expressions that maintain the intended logic during the conversion.
getCastToString: This function handles the conversion of different variable types to strings in Java. It checks the variable type and constructs the appropriate Java code to convert it to a string, considering scenarios like Long, Int, Boolean, and complex expressions.
getIdentifierInfo: It extracts information about an identifier (variable or function) within an expression. It handles nested parentheses, identifying the type of the identifier and its parent type, providing valuable information for subsequent conversion.
isComplexExpression: Determines whether an expression is complex by checking for the presence of arithmetic operators like +, -, *, and /.
getVariable and getMemberVariable: These functions retrieve information about variables, considering class names and database references. They navigate through various scopes, including function variables, member variables, private types, and public variables declared in bas files.
getWordsFromSentence: Splits a sentence into an array of words, considering literals within double quotes and specific symbols.
isFunctionDeclaration and translateFunctionDeclaration: These functions identify and translate VB6 function declarations. They extract information about the function scope, name, type, and handle special cases like properties.
translateFunction: This function translates VB6 functions into Java functions. It handles various function types, scopes, and properties, adjusting their syntax and structure accordingly.
translateFunctionReturnVariable: Manages the translation of the return variable for functions that require one. It handles data types and initializes the return variable if needed.
getReturnLine: Generates the return line for functions that require a return statement. It includes the appropriate syntax and return variable.
replaceNotSentence: Modifies logical "Not" sentences, replacing them with the equivalent "!" symbol for negation.
replaceResumeSentence: Replaces VB6 "Resume" statements with comments indicating the presence of such statements. This helps in identifying and handling error resumption.
replaceGotoSentence: Converts VB6 "GoTo" statements into comments, highlighting their presence for further consideration or modification.
replaceLabelSentence: Handles VB6 labels, marking them as TODO items in comments. This assists in identifying and addressing labeled positions in the code.
replaceSetReturnValueSentence: Manages the setting of return values in functions. It identifies and adjusts assignments to the function name, considering the need for a return variable.
getIfNeedToBeSynchronized: Determines whether a function needs to be synchronized based on its association with raised events. Adds the "synchronized" keyword accordingly.
translateEventDeclaration: Translates VB6 event declarations into Java listener interface and adapter class declarations. Handles various event scopes and generates the necessary Java code.
getPropertyType: Determines the data type of a property based on its declaration in VB6. It utilizes the getFunctionType method for this purpose.
getFunctionType: Identifies the data type of a function based on its declaration in VB6. It considers parameters and return types, providing the appropriate Java data type.
translateParameters: Translates VB6 function parameters into Java syntax. It considers various parameter declarations, including ByVal, ByRef, and Optional.
getParam: Handles individual function parameters, determining their names, data types, and optional status. Utilizes information from the VB6 parameter declaration.
getZeroValueForDataType: Returns the zero value for a given data type, which is used for initializing variables.
getDataType: Translates VB6 data types to their equivalent Java data types.
getDefaultForReturnType: Returns the default value for a given data type, used in function return statements.
getVariableName: Returns a variable name in a camelCase format.
getParamName: Returns a parameter name in a camelCase format.
translatePrivateConstMember: Translates a private constant member declaration from VB6 to Java, handling data type conversion and saving the constant.
saveFunction: Saves function details (name, type, scope) into a database.
saveParam: Saves parameter details (name, type) into a database.
saveVariable: Saves variable details (name, type, scope) into a database.
saveVariableInType: Saves variable details within a specific type or class.
saveVariableInEnum: Saves variable details within an enumeration.
translatePublicConstMember: Translates a public constant member declaration from VB6 to Java, handling data type conversion and saving the constant.
unCapitalize: Converts the first character of a string to lowercase.
capitalize: Converts the first character of a string to uppercase.
getStartParams: Finds the starting index of function parameters in a line.
getEndParams: Finds the ending index of function parameters in a line.

